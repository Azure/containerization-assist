name: 'Architecture Check'
description: 'Validates architecture constraints and code quality metrics'
inputs:
  path:
    description: 'Path to check for architecture violations'
    required: false
    default: 'pkg/mcp'
  complexity-threshold:
    description: 'Cyclomatic complexity threshold'
    required: false
    default: '15'
  complexity-budget:
    description: 'Maximum allowed complex functions'
    required: false
    default: '50'
  large-file-threshold:
    description: 'Large file line threshold'
    required: false
    default: '800'
  large-file-budget:
    description: 'Maximum allowed large files'
    required: false
    default: '10'
  config-file:
    description: 'Path to quality configuration file'
    required: false
    default: '.github/quality-config.json'
outputs:
  adapter-count:
    description: 'Number of adapter files found'
  wrapper-count:
    description: 'Number of wrapper files found'
  import-cycles:
    description: 'Number of import cycles detected'
  large-files:
    description: 'Number of files exceeding the large file threshold'
  complex-functions:
    description: 'Number of functions exceeding complexity threshold'
  complexity-within-budget:
    description: 'Whether complexity violations are within budget (true/false)'
  architecture-score:
    description: 'Overall architecture score (0-100)'
  architecture-status:
    description: 'Overall architecture status (pass/warning/fail)'
runs:
  using: "composite"
  steps:
    - name: Check for adapters
      shell: bash
      run: |
        ADAPTER_COUNT=$(find ${{ inputs.path }} -name "*adapter*.go" 2>/dev/null | wc -l | tr -d ' \n' || echo "0")
        echo "adapter-count=$ADAPTER_COUNT" >> $GITHUB_OUTPUT
        echo "✅ Found $ADAPTER_COUNT adapter files"

    - name: Check for wrappers
      shell: bash
      run: |
        WRAPPER_COUNT=$(find ${{ inputs.path }} -name "*wrapper*.go" 2>/dev/null | grep -v docker_operation | wc -l | tr -d ' \n' || echo "0")
        echo "wrapper-count=$WRAPPER_COUNT" >> $GITHUB_OUTPUT
        echo "✅ Found $WRAPPER_COUNT wrapper files (excluding docker_operation)"

    - name: Check import cycles
      shell: bash
      run: |
        echo "🔍 Checking for import cycles..."
        CYCLE_COUNT=0

        # Try to detect import cycles by attempting to build
        if go build -tags mcp ${{ inputs.path }}/... 2>&1 | grep -q "import cycle"; then
          # Count unique cycle errors (this is a rough approximation)
          CYCLE_COUNT=$(go build -tags mcp ${{ inputs.path }}/... 2>&1 | grep "import cycle" | wc -l | tr -d ' \n' || echo "0")
          echo "❌ Detected $CYCLE_COUNT import cycles"
          go build -tags mcp ${{ inputs.path }}/... 2>&1 | grep "import cycle"
        else
          echo "✅ No import cycles detected"
        fi

        echo "import-cycles=$CYCLE_COUNT" >> $GITHUB_OUTPUT

    - name: Check for large files
      shell: bash
      run: |
        echo "📏 Checking for large files (>${{ inputs.large-file-threshold }} lines)..."
        LARGE_FILES_COUNT=$(find ${{ inputs.path }} -name "*.go" -not -path "*/test*" -exec wc -l {} \; | awk -v threshold=${{ inputs.large-file-threshold }} '$1 > threshold {count++} END {print count+0}')
        echo "large-files=$LARGE_FILES_COUNT" >> $GITHUB_OUTPUT
        echo "✅ Found $LARGE_FILES_COUNT files with >${{ inputs.large-file-threshold }} lines"

        if [ "$LARGE_FILES_COUNT" -gt 0 ]; then
          echo "Large files detected:"
          find ${{ inputs.path }} -name "*.go" -not -path "*/test*" -exec wc -l {} \; | awk -v threshold=${{ inputs.large-file-threshold }} '$1 > threshold {print "  - " $2 " (" $1 " lines)"}'
        fi

    - name: Install gocyclo
      shell: bash
      run: |
        echo "📦 Installing gocyclo for complexity analysis..."
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

    - name: Check cyclomatic complexity
      shell: bash
      run: |
        # Load configuration from quality config file
        COMPLEXITY_THRESHOLD=${{ inputs.complexity-threshold }}
        COMPLEXITY_BUDGET=${{ inputs.complexity-budget }}
        
        if [ -f "${{ inputs.config-file }}" ]; then
          echo "📋 Loading complexity settings from ${{ inputs.config-file }}..."
          
          # Extract threshold and budget from config file
          CONFIG_THRESHOLD=$(jq -r '.complexity.thresholds.target // ${{ inputs.complexity-threshold }}' "${{ inputs.config-file }}")
          CONFIG_BUDGET=$(jq -r '.complexity.current_baseline.over_15 // ${{ inputs.complexity-budget }}' "${{ inputs.config-file }}")
          
          if [ "$CONFIG_THRESHOLD" != "null" ] && [ "$CONFIG_THRESHOLD" != "" ]; then
            COMPLEXITY_THRESHOLD=$CONFIG_THRESHOLD
          fi
          
          if [ "$CONFIG_BUDGET" != "null" ] && [ "$CONFIG_BUDGET" != "" ]; then
            COMPLEXITY_BUDGET=$CONFIG_BUDGET
          fi
          
          echo "Using config: threshold=$COMPLEXITY_THRESHOLD, budget=$COMPLEXITY_BUDGET"
        else
          echo "📋 Using default complexity settings: threshold=$COMPLEXITY_THRESHOLD, budget=$COMPLEXITY_BUDGET"
        fi

        echo "🔄 Checking cyclomatic complexity (threshold: $COMPLEXITY_THRESHOLD, budget: $COMPLEXITY_BUDGET)..."
        
        # Check for functions with complexity above threshold
        COMPLEX_FUNCTIONS=$(~/go/bin/gocyclo -over $COMPLEXITY_THRESHOLD ${{ inputs.path }} | wc -l | tr -d ' \n' || echo "0")
        echo "complex-functions=$COMPLEX_FUNCTIONS" >> $GITHUB_OUTPUT

        # Check if within budget
        if [ "$COMPLEX_FUNCTIONS" -le "$COMPLEXITY_BUDGET" ]; then
          echo "✅ Found $COMPLEX_FUNCTIONS functions with complexity >$COMPLEXITY_THRESHOLD (within budget of $COMPLEXITY_BUDGET)"
          echo "complexity-within-budget=true" >> $GITHUB_OUTPUT
        else
          OVER_BUDGET=$((COMPLEX_FUNCTIONS - COMPLEXITY_BUDGET))
          echo "⚠️ Found $COMPLEX_FUNCTIONS functions with complexity >$COMPLEXITY_THRESHOLD (exceeds budget of $COMPLEXITY_BUDGET by $OVER_BUDGET)"
          echo "complexity-within-budget=false" >> $GITHUB_OUTPUT
        fi

        if [ "$COMPLEX_FUNCTIONS" -gt 0 ]; then
          echo "High complexity functions (showing first 5):"
          ~/go/bin/gocyclo -over $COMPLEXITY_THRESHOLD ${{ inputs.path }} | head -5
          if [ "$COMPLEX_FUNCTIONS" -gt 5 ]; then
            echo "  ... and $((COMPLEX_FUNCTIONS - 5)) more"
          fi
        fi

    - name: Calculate architecture score
      shell: bash
      run: |
        echo "📊 Calculating overall architecture score..."

        # Get values from previous steps
        ADAPTER_COUNT=$(grep "adapter-count=" $GITHUB_OUTPUT | cut -d'=' -f2)
        WRAPPER_COUNT=$(grep "wrapper-count=" $GITHUB_OUTPUT | cut -d'=' -f2)
        CYCLE_COUNT=$(grep "import-cycles=" $GITHUB_OUTPUT | cut -d'=' -f2)
        LARGE_FILES=$(grep "large-files=" $GITHUB_OUTPUT | cut -d'=' -f2)
        COMPLEX_FUNCTIONS=$(grep "complex-functions=" $GITHUB_OUTPUT | cut -d'=' -f2)
        COMPLEXITY_WITHIN_BUDGET=$(grep "complexity-within-budget=" $GITHUB_OUTPUT | cut -d'=' -f2)

        # Calculate score (100 - deductions)
        SCORE=100

        # Deduct points for violations
        SCORE=$((SCORE - ADAPTER_COUNT * 20))      # -20 points per adapter
        SCORE=$((SCORE - WRAPPER_COUNT * 15))      # -15 points per wrapper
        SCORE=$((SCORE - CYCLE_COUNT * 25))        # -25 points per import cycle

        # Large files deduction with budget system
        LARGE_FILE_BUDGET=${{ inputs.large-file-budget }}
        if [ "$LARGE_FILES" -gt "$LARGE_FILE_BUDGET" ]; then
          LARGE_FILE_EXCESS=$((LARGE_FILES - LARGE_FILE_BUDGET))
          SCORE=$((SCORE - LARGE_FILE_EXCESS * 5))  # Only deduct for files over budget
        fi

        # Complex functions deduction with budget system
        COMPLEXITY_BUDGET=${{ inputs.complexity-budget }}
        if [ "$COMPLEX_FUNCTIONS" -gt "$COMPLEXITY_BUDGET" ]; then
          COMPLEXITY_EXCESS=$((COMPLEX_FUNCTIONS - COMPLEXITY_BUDGET))
          SCORE=$((SCORE - COMPLEXITY_EXCESS * 2))  # Only deduct for functions over budget
        fi

        # Ensure score doesn't go below 0
        if [ $SCORE -lt 0 ]; then
          SCORE=0
        fi

        # Determine status
        if [ $SCORE -ge 80 ]; then
          STATUS="pass"
          STATUS_EMOJI="✅"
        elif [ $SCORE -ge 60 ]; then
          STATUS="warning"
          STATUS_EMOJI="⚠️"
        else
          STATUS="fail"
          STATUS_EMOJI="❌"
        fi

        echo "architecture-score=$SCORE" >> $GITHUB_OUTPUT
        echo "architecture-status=$STATUS" >> $GITHUB_OUTPUT

        echo "$STATUS_EMOJI Architecture Score: $SCORE/100 ($STATUS)"
        echo ""
        echo "Score breakdown:"
        echo "  - Base score: 100"
        echo "  - Adapters: -$((ADAPTER_COUNT * 20)) ($ADAPTER_COUNT files)"
        echo "  - Wrappers: -$((WRAPPER_COUNT * 15)) ($WRAPPER_COUNT files)"
        echo "  - Import cycles: -$((CYCLE_COUNT * 25)) ($CYCLE_COUNT cycles)"

        # Large files with budget
        if [ "$LARGE_FILES" -gt "$LARGE_FILE_BUDGET" ]; then
          LARGE_FILE_EXCESS=$((LARGE_FILES - LARGE_FILE_BUDGET))
          echo "  - Large files: -$((LARGE_FILE_EXCESS * 5)) ($LARGE_FILES files, $LARGE_FILE_EXCESS over budget of $LARGE_FILE_BUDGET)"
        else
          echo "  - Large files: 0 ($LARGE_FILES files, within budget of $LARGE_FILE_BUDGET)"
        fi

        # Complex functions with budget
        if [ "$COMPLEX_FUNCTIONS" -gt "$COMPLEXITY_BUDGET" ]; then
          COMPLEXITY_EXCESS=$((COMPLEX_FUNCTIONS - COMPLEXITY_BUDGET))
          echo "  - Complex functions: -$((COMPLEXITY_EXCESS * 2)) ($COMPLEX_FUNCTIONS functions, $COMPLEXITY_EXCESS over budget of $COMPLEXITY_BUDGET)"
        else
          echo "  - Complex functions: 0 ($COMPLEX_FUNCTIONS functions, within budget of $COMPLEXITY_BUDGET)"
        fi
