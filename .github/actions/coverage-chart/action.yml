name: 'Coverage Chart Generator'
description: 'Generates coverage trend visualization and metrics for PR comments'

inputs:
  current-coverage:
    description: 'Current test coverage percentage'
    required: true
  
  baseline-coverage:
    description: 'Baseline coverage percentage to compare against'
    required: false
    default: '0'
  
  coverage-files:
    description: 'Path to coverage files (coverage.out, etc.)'
    required: false
    default: './coverage.out'
  
  chart-type:
    description: 'Type of chart to generate'
    required: false
    default: 'sparkline'
    
  package-breakdown:
    description: 'Generate per-package coverage breakdown'
    required: false
    default: 'true'
  
  target-coverage:
    description: 'Target coverage percentage'
    required: false
    default: '80'

outputs:
  coverage-status:
    description: 'Coverage status (excellent/good/warning/poor)'
    value: ${{ steps.analyze.outputs.status }}
  
  coverage-badge:
    description: 'Coverage badge SVG'
    value: ${{ steps.generate-badge.outputs.badge }}
  
  coverage-chart:
    description: 'Coverage trend chart (sparkline or bar)'
    value: ${{ steps.generate-chart.outputs.chart }}
  
  coverage-breakdown:
    description: 'Per-package coverage breakdown table'
    value: ${{ steps.breakdown.outputs.table }}
  
  recommendations:
    description: 'Coverage improvement recommendations'
    value: ${{ steps.analyze.outputs.recommendations }}

runs:
  using: "composite"
  steps:
    - name: Analyze coverage metrics
      id: analyze
      shell: bash
      run: |
        echo "üìä Analyzing coverage metrics..."
        
        CURRENT="${{ inputs.current-coverage }}"
        BASELINE="${{ inputs.baseline-coverage }}"
        TARGET="${{ inputs.target-coverage }}"
        
        # Remove % sign if present
        CURRENT_NUM=$(echo "$CURRENT" | sed 's/%//')
        BASELINE_NUM=$(echo "$BASELINE" | sed 's/%//')
        TARGET_NUM=$(echo "$TARGET" | sed 's/%//')
        
        # Determine status based on coverage
        if (( $(echo "$CURRENT_NUM >= 90" | bc -l) )); then
          STATUS="excellent"
          STATUS_EMOJI="üéâ"
          STATUS_COLOR="brightgreen"
        elif (( $(echo "$CURRENT_NUM >= $TARGET_NUM" | bc -l) )); then
          STATUS="good"
          STATUS_EMOJI="‚úÖ"
          STATUS_COLOR="green"
        elif (( $(echo "$CURRENT_NUM >= 60" | bc -l) )); then
          STATUS="warning"
          STATUS_EMOJI="‚ö†Ô∏è"
          STATUS_COLOR="yellow"
        else
          STATUS="poor"
          STATUS_EMOJI="‚ùå"
          STATUS_COLOR="red"
        fi
        
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "status_emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT
        echo "status_color=$STATUS_COLOR" >> $GITHUB_OUTPUT
        
        # Calculate trend
        if (( $(echo "$CURRENT_NUM > $BASELINE_NUM" | bc -l) )); then
          TREND="üìà Improving"
          TREND_SYMBOL="‚ÜóÔ∏è"
        elif (( $(echo "$CURRENT_NUM < $BASELINE_NUM" | bc -l) )); then
          TREND="üìâ Declining"
          TREND_SYMBOL="‚ÜòÔ∏è"
        else
          TREND="‚û°Ô∏è Stable"
          TREND_SYMBOL="‚û°Ô∏è"
        fi
        
        echo "trend=$TREND" >> $GITHUB_OUTPUT
        echo "trend_symbol=$TREND_SYMBOL" >> $GITHUB_OUTPUT
        
        # Generate recommendations
        RECOMMENDATIONS=""
        if (( $(echo "$CURRENT_NUM < $TARGET_NUM" | bc -l) )); then
          RECOMMENDATIONS+="- üéØ **Target**: Increase coverage to ${TARGET}%\n"
          RECOMMENDATIONS+="- üìù **Focus**: Add tests for uncovered functions\n"
          RECOMMENDATIONS+="- üîç **Priority**: Focus on critical business logic\n"
        fi
        
        if (( $(echo "$CURRENT_NUM < 70" | bc -l) )); then
          RECOMMENDATIONS+="- ‚ö†Ô∏è **Warning**: Coverage below 70% may indicate insufficient testing\n"
        fi
        
        if [ -z "$RECOMMENDATIONS" ]; then
          RECOMMENDATIONS="- üéâ **Excellent**: Coverage meets quality standards!\n- üîÑ **Maintain**: Keep adding tests for new code"
        fi
        
        echo "recommendations<<EOF" >> $GITHUB_OUTPUT
        echo -e "$RECOMMENDATIONS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate coverage badge
      id: generate-badge
      shell: bash
      run: |
        echo "üè∑Ô∏è Generating coverage badge..."
        
        CURRENT="${{ inputs.current-coverage }}"
        COLOR="${{ steps.analyze.outputs.status_color }}"
        
        # Create SVG badge
        BADGE_SVG="<svg xmlns='http://www.w3.org/2000/svg' width='104' height='20'>"
        BADGE_SVG+="<linearGradient id='b' x2='0' y2='100%'>"
        BADGE_SVG+="<stop offset='0' stop-color='#bbb' stop-opacity='.1'/>"
        BADGE_SVG+="<stop offset='1' stop-opacity='.1'/>"
        BADGE_SVG+="</linearGradient>"
        BADGE_SVG+="<mask id='a'>"
        BADGE_SVG+="<rect width='104' height='20' rx='3' fill='#fff'/>"
        BADGE_SVG+="</mask>"
        BADGE_SVG+="<g mask='url(#a)'>"
        BADGE_SVG+="<path fill='#555' d='M0 0h63v20H0z'/>"
        BADGE_SVG+="<path fill='$COLOR' d='M63 0h41v20H63z'/>"
        BADGE_SVG+="<path fill='url(#b)' d='M0 0h104v20H0z'/>"
        BADGE_SVG+="</g>"
        BADGE_SVG+="<g fill='#fff' text-anchor='middle' font-family='DejaVu Sans,Verdana,Geneva,sans-serif' font-size='11'>"
        BADGE_SVG+="<text x='31.5' y='15' fill='#010101' fill-opacity='.3'>coverage</text>"
        BADGE_SVG+="<text x='31.5' y='14'>coverage</text>"
        BADGE_SVG+="<text x='82.5' y='15' fill='#010101' fill-opacity='.3'>${CURRENT}%</text>"
        BADGE_SVG+="<text x='82.5' y='14'>${CURRENT}%</text>"
        BADGE_SVG+="</g>"
        BADGE_SVG+="</svg>"
        
        echo "badge<<EOF" >> $GITHUB_OUTPUT
        echo "$BADGE_SVG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate coverage chart
      id: generate-chart
      shell: bash
      run: |
        echo "üìà Generating coverage chart..."
        
        CURRENT="${{ inputs.current-coverage }}"
        BASELINE="${{ inputs.baseline-coverage }}"
        TARGET="${{ inputs.target-coverage }}"
        CHART_TYPE="${{ inputs.chart-type }}"
        
        # Remove % signs
        CURRENT_NUM=$(echo "$CURRENT" | sed 's/%//')
        BASELINE_NUM=$(echo "$BASELINE" | sed 's/%//')
        TARGET_NUM=$(echo "$TARGET" | sed 's/%//')
        
        if [ "$CHART_TYPE" = "sparkline" ]; then
          # Generate simple ASCII sparkline
          CHART="Coverage Trend: "
          
          # Calculate bar length (max 20 chars)
          BAR_LENGTH=$(echo "scale=0; $CURRENT_NUM * 20 / 100" | bc)
          
          # Generate progress bar (using safe ASCII characters)
          FILLED_BLOCKS=$(printf "#%.0s" $(seq 1 $BAR_LENGTH))
          EMPTY_BLOCKS=$(printf ".%.0s" $(seq 1 $((20 - BAR_LENGTH))))
          
          CHART+="$FILLED_BLOCKS$EMPTY_BLOCKS $CURRENT% ${{ steps.analyze.outputs.trend_symbol }}"
        else
          # Generate simple bar chart
          CHART="Coverage Progress:\n"
          CHART+="\`\`\`\n"
          CHART+="Current:  [$FILLED_BLOCKS$EMPTY_BLOCKS] $CURRENT%\n"
          
          if [ "$BASELINE_NUM" != "0" ]; then
            BASELINE_BAR_LENGTH=$(echo "scale=0; $BASELINE_NUM * 20 / 100" | bc)
            BASELINE_FILLED=$(printf "#%.0s" $(seq 1 $BASELINE_BAR_LENGTH))
            BASELINE_EMPTY=$(printf ".%.0s" $(seq 1 $((20 - BASELINE_BAR_LENGTH))))
            CHART+="Baseline: [$BASELINE_FILLED$BASELINE_EMPTY] $BASELINE%\n"
          fi
          
          TARGET_BAR_LENGTH=$(echo "scale=0; $TARGET_NUM * 20 / 100" | bc)
          TARGET_FILLED=$(printf "#%.0s" $(seq 1 $TARGET_BAR_LENGTH))
          TARGET_EMPTY=$(printf ".%.0s" $(seq 1 $((20 - TARGET_BAR_LENGTH))))
          CHART+="Target:   [$TARGET_FILLED$TARGET_EMPTY] $TARGET%\n"
          CHART+="\`\`\`"
        fi
        
        echo "chart<<EOF" >> $GITHUB_OUTPUT
        echo -e "$CHART" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate package breakdown
      id: breakdown
      shell: bash
      run: |
        echo "üìã Generating package coverage breakdown..."
        
        COVERAGE_FILE="${{ inputs.coverage-files }}"
        
        if [ -f "$COVERAGE_FILE" ] && [ "${{ inputs.package-breakdown }}" = "true" ]; then
          echo "Processing coverage file: $COVERAGE_FILE"
          
          # Extract per-package coverage using go tool cover
          TABLE="| Package | Coverage | Status |\n"
          TABLE+="|---------|----------|--------|\n"
          
          # Get coverage by package
          if command -v go >/dev/null 2>&1; then
            go tool cover -func="$COVERAGE_FILE" | grep -E "^[^[:space:]].*\.go:" | \
            awk -F: '{
              # Extract package from file path
              split($1, parts, "/")
              pkg = parts[length(parts)-1]
              if (pkg == "") pkg = "main"
              
              # Extract coverage percentage
              split($2, coverage_parts, "%")
              coverage = coverage_parts[1]
              gsub(/^[[:space:]]+|[[:space:]]+$/, "", coverage) # trim
              
              if (coverage_map[pkg] == "") {
                coverage_map[pkg] = coverage
                count[pkg] = 1
              } else {
                coverage_map[pkg] += coverage
                count[pkg]++
              }
            }
            END {
              for (pkg in coverage_map) {
                avg_coverage = coverage_map[pkg] / count[pkg]
                status_emoji = (avg_coverage >= 80) ? "‚úÖ" : (avg_coverage >= 60) ? "‚ö†Ô∏è" : "‚ùå"
                printf "| %s | %.1f%% | %s |\n", pkg, avg_coverage, status_emoji
              }
            }' >> /tmp/package_coverage.txt
            
            if [ -s /tmp/package_coverage.txt ]; then
              TABLE+=$(cat /tmp/package_coverage.txt)
            else
              TABLE+="| No package data | N/A | ‚ö†Ô∏è |\n"
            fi
          else
            TABLE+="| Go tools unavailable | N/A | ‚ö†Ô∏è |\n"
          fi
        else
          TABLE="| Package | Coverage | Status |\n"
          TABLE+="|---------|----------|--------|\n"
          TABLE+="| Coverage file not found | N/A | ‚ö†Ô∏è |\n"
        fi
        
        echo "table<<EOF" >> $GITHUB_OUTPUT
        echo -e "$TABLE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create coverage summary
      shell: bash
      run: |
        echo "üìä Creating coverage summary..."
        
        cat > coverage-summary.md << EOF
        # üìä Coverage Analysis Report
        
        ## Overall Status: ${{ steps.analyze.outputs.status_emoji }} ${{ steps.analyze.outputs.status }}
        
        **Current Coverage:** ${{ inputs.current-coverage }}% ${{ steps.analyze.outputs.trend_symbol }}
        **Target Coverage:** ${{ inputs.target-coverage }}%
        
        ${{ steps.generate-chart.outputs.chart }}
        
        ## Package Breakdown
        ${{ steps.breakdown.outputs.table }}
        
        ## Recommendations
        ${{ steps.analyze.outputs.recommendations }}
        
        ---
        *Generated by Coverage Chart Action*
        EOF
        
        echo "‚úÖ Coverage analysis complete!"

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-analysis-${{ github.run_id }}
        path: coverage-summary.md
        retention-days: 7