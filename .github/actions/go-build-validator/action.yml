name: 'Go Build Validator'
description: 'Validates Go builds, formatting, and basic quality checks'
inputs:
  packages:
    description: 'Go packages to validate (space separated)'
    required: false
    default: './...'
  go-version:
    description: 'Go version to use'
    required: false
    default: '1.24'
  check-formatting:
    description: 'Check code formatting with gofmt'
    required: false
    default: 'true'
  check-imports:
    description: 'Check import formatting with goimports'
    required: false
    default: 'true'
  check-mod-tidy:
    description: 'Check if go.mod is tidy'
    required: false
    default: 'true'
  run-build:
    description: 'Run build validation'
    required: false
    default: 'true'
outputs:
  validation-result:
    description: 'Overall validation result (passed/failed)'
  issues-found:
    description: 'List of issues found'
runs:
  using: "composite"
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      shell: bash
      run: go mod download

    - name: Check go.mod tidy
      if: inputs.check-mod-tidy == 'true'
      shell: bash
      run: |
        echo "📝 Checking go mod tidy..."
        cp go.mod go.mod.bak
        cp go.sum go.sum.bak
        go mod tidy
        if ! diff -q go.mod go.mod.bak >/dev/null || ! diff -q go.sum go.sum.bak >/dev/null; then
          echo "❌ go mod tidy would make changes - dependencies are not tidy"
          echo "validation-result=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ go.mod is tidy"

    - name: Check code formatting
      if: inputs.check-formatting == 'true'
      shell: bash
      run: |
        echo "🎨 Checking code formatting..."
        unformatted=$(gofmt -s -l .)
        if [ -n "$unformatted" ]; then
          echo "❌ Code formatting issues found:"
          echo "$unformatted"
          echo "validation-result=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ Code formatting is correct"

    - name: Check import formatting
      if: inputs.check-imports == 'true'
      shell: bash
      run: |
        echo "📋 Checking import formatting..."
        go install golang.org/x/tools/cmd/goimports@latest
        goimports_output=$(goimports -l .)
        if [ -n "$goimports_output" ]; then
          echo "❌ Import formatting issues found:"
          echo "$goimports_output"
          echo "validation-result=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ Import formatting is correct"

    - name: Build validation
      if: inputs.run-build == 'true'
      shell: bash
      run: |
        echo "📦 Validating build..."
        if ! go build ${{ inputs.packages }}; then
          echo "❌ Build validation failed"
          echo "validation-result=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ Build validation passed"

    - name: Test compilation check
      shell: bash
      run: |
        echo "🧪 Checking test compilation..."
        if ! go test -run=^$ ${{ inputs.packages }}; then
          echo "❌ Test compilation failed"
          echo "validation-result=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ Tests compile successfully"

    - name: Set success result
      shell: bash
      run: |
        echo "🎉 All validation checks passed!"
        echo "validation-result=passed" >> $GITHUB_OUTPUT
