name: 'Go Test Runner'
description: 'Standardized Go test execution with coverage and race detection'
inputs:
  packages:
    description: 'Go packages to test (space separated)'
    required: false
    default: './...'
  go-version:
    description: 'Go version to use'
    required: false
    default: '1.24'
  run-race-tests:
    description: 'Run tests with race detector'
    required: false
    default: 'true'
  generate-coverage:
    description: 'Generate coverage report'
    required: false
    default: 'true'
  timeout:
    description: 'Test timeout'
    required: false
    default: '10m'
  job-suffix:
    description: 'Suffix for artifact naming'
    required: false
    default: 'default'
outputs:
  test-result:
    description: 'Test execution result (passed/failed)'
  coverage-file:
    description: 'Path to coverage file'
runs:
  using: "composite"
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      shell: bash
      run: go mod download

    - name: Run unit tests
      shell: bash
      run: |
        echo "🧪 Running unit tests for packages: ${{ inputs.packages }}"

        if [ "${{ inputs.generate-coverage }}" = "true" ]; then
          COVERAGE_FLAG="-coverprofile=coverage-${{ inputs.job-suffix }}.out -covermode=atomic"
        else
          COVERAGE_FLAG=""
        fi

        if go test -v -timeout=${{ inputs.timeout }} $COVERAGE_FLAG ${{ inputs.packages }}; then
          echo "✅ Unit tests passed"
          echo "test-result=passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Unit tests failed"
          echo "test-result=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

        if [ "${{ inputs.generate-coverage }}" = "true" ]; then
          echo "coverage-file=coverage-${{ inputs.job-suffix }}.out" >> $GITHUB_OUTPUT
        fi

    - name: Run race detector tests
      if: inputs.run-race-tests == 'true'
      shell: bash
      run: |
        echo "🏃 Running tests with race detector..."
        if go test -race -timeout=${{ inputs.timeout }} ${{ inputs.packages }}; then
          echo "✅ Race detector tests passed"
        else
          echo "❌ Race detector tests failed"
          exit 1
        fi

    - name: Upload coverage artifact
      if: inputs.generate-coverage == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ inputs.job-suffix }}-${{ github.run_id }}
        path: coverage-${{ inputs.job-suffix }}.out
        retention-days: 7
