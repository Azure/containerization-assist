name: 'RichError Boundary Compliance Audit'
description: 'Audit Go code for RichError usage in exported functions'
author: 'Container Kit Team'

inputs:
  packages:
    description: 'Space-separated list of packages to audit'
    required: false
    default: './pkg/mcp/core ./pkg/mcp/common ./pkg/mcp/internal/transport'
  fail-on-violations:
    description: 'Exit with non-zero code if violations found'
    required: false
    default: 'true'
  output-format:
    description: 'Output format (text or json)'
    required: false
    default: 'text'
  artifact-name:
    description: 'Name for uploaded artifact (if specified)'
    required: false
    default: ''

outputs:
  violations-found:
    description: 'Number of violations found'
    value: ${{ steps.audit.outputs.violations }}
  has-violations:
    description: 'Whether any violations were found (true/false)'
    value: ${{ steps.audit.outputs.has-violations }}

runs:
  using: 'composite'
  steps:
    - name: Build rich-audit tool
      shell: bash
      run: |
        echo "üî® Building rich-audit tool..."
        go build -o ${{ runner.temp }}/rich-audit ./cmd/rich-audit
        echo "‚úÖ Build completed"

    - name: Run RichError audit
      id: audit
      shell: bash
      run: |
        echo "üîç Running RichError boundary compliance audit..."

        total_violations=0
        packages="${{ inputs.packages }}"
        output_format="${{ inputs.output-format }}"
        fail_on_violations="${{ inputs.fail-on-violations }}"

        # Create results directory
        mkdir -p ${{ runner.temp }}/rich-audit-results

        for pkg in $packages; do
          if [ -d "$pkg" ]; then
            echo "üì¶ Auditing $pkg..."

            result_file="${{ runner.temp }}/rich-audit-results/$(echo $pkg | tr '/' '_').json"

            if ${{ runner.temp }}/rich-audit -package "$pkg" -json > "$result_file" 2>&1; then
              violations=$(cat "$result_file" | jq -r '.violations_found // 0')
              total_violations=$((total_violations + violations))

              # Display summary for this package
              if [ "$output_format" = "text" ]; then
                if [ "$violations" -gt 0 ]; then
                  echo "‚ùå Found $violations violation(s) in $pkg"
                  cat "$result_file" | jq -r '.results[] | "   - \(.file):\(.line) in \(.function): \(.violation)"'
                else
                  echo "‚úÖ No violations in $pkg"
                fi
              fi
            else
              echo "‚ö†Ô∏è  Warning: Failed to audit $pkg"
            fi
          else
            echo "‚ö†Ô∏è  Warning: Package $pkg not found"
          fi
        done

        # Set outputs
        echo "violations=$total_violations" >> $GITHUB_OUTPUT
        if [ "$total_violations" -gt 0 ]; then
          echo "has-violations=true" >> $GITHUB_OUTPUT
        else
          echo "has-violations=false" >> $GITHUB_OUTPUT
        fi

        # Final summary
        echo ""
        echo "üìä Total violations found: $total_violations"

        if [ "$total_violations" -eq 0 ]; then
          echo "‚úÖ All boundary functions use RichError patterns!"
        else
          echo "‚ùå Found $total_violations boundary functions using simple error patterns"
          echo ""
          echo "üí° To fix violations:"
          echo "‚Ä¢ Import: github.com/Azure/container-kit/pkg/mcp/errors"
          echo "‚Ä¢ Use errors.MissingParameterError(\"param\") for missing parameters"
          echo "‚Ä¢ Use errors.NewError().Message().WithLocation().Build() for custom errors"

          if [ "$fail_on_violations" = "true" ]; then
            exit 1
          fi
        fi

    - name: Upload audit results
      if: inputs.artifact-name != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ runner.temp }}/rich-audit-results/
        retention-days: 7
