name: 'Security Scan'
description: 'Comprehensive security scanning with GitLeaks and Trivy'
inputs:
  go-version:
    description: 'Go version to use'
    required: false
    default: '1.24'
  upload-artifacts:
    description: 'Whether to upload scan artifacts'
    required: false
    default: 'true'
  artifact-name:
    description: 'Name for uploaded artifacts'
    required: false
    default: 'security-reports'
outputs:
  secrets-detected:
    description: 'Number of secrets detected'
  vulnerabilities-found:
    description: 'Number of vulnerabilities found'
  scan-status:
    description: 'Overall scan status (pass/fail)'
runs:
  using: "composite"
  steps:
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}

    - name: Setup security tools
      uses: ./.github/actions/security-setup

    - name: Run GitLeaks (Secret Detection)
      shell: bash
      run: |
        echo "🔍 Scanning for secrets..."

        # Create gitleaks config to exclude test files and known test patterns
        cat > .gitleaks.toml << 'EOF'
        [allowlist]
          description = "Test secrets and known safe patterns"

          # Exclude test files
          files = [
            '''.*_test\.go''',
            '''.*test.*\.go''',
            '''test/.*''',
            '''.*testdata.*''',
            '''examples/.*''',
            '''repomix-output\.xml'''
          ]

          # Exclude known test patterns
          regexes = [
            '''sk-1234567890abcdef''',
            '''AKIAFAKETEST12345678''',
            '''AKIAIOSFODNN7EXAMPLE''',
            '''test-api-key-123456''',
            '''zN8BP6lnPUDpumenHCZLVwZkFcSIGPr0''',
            '''dGhpcyBpcyBhIHNlY3JldCBtZXNzYWdl''',
            '''4e1243bd22c66e76c2ba9bef8c5e8f8a''',
            '''YOUR_PRIVATE_KEY_CONTENT_HERE_REPLACE_WITH_ACTUAL_KEY''',
            '''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE''',
            '''dXNlcjpwYXNzd29yZA==''',
            '''abc123def456''',
            '''sk_test_abcdef123456'''
          ]
        EOF

        # Run gitleaks with config
        gitleaks detect --config .gitleaks.toml --report-format json --report-path gitleaks-report.json --verbose

        if [ -f gitleaks-report.json ]; then
          leak_count=$(jq '. | length' gitleaks-report.json 2>/dev/null || echo "0")
          echo "Found $leak_count potential secrets"
          echo "secrets-detected=$leak_count" >> $GITHUB_OUTPUT

          if [ "$leak_count" -gt 0 ]; then
            echo "❌ Potential secrets found!"
            jq -r '.[] | "- \(.RuleID): \(.File):\(.StartLine) - \(.Description)"' gitleaks-report.json
            echo "scan-status=fail" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ No secrets detected"
          fi
        else
          echo "✅ No secrets detected"
          echo "secrets-detected=0" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy (Vulnerability Scanning)
      shell: bash
      run: |
        echo "🛡️ Scanning for vulnerabilities..."

        # Scan filesystem for vulnerabilities
        trivy fs --format json --output trivy-fs-report.json .

        # Scan for configuration issues
        trivy config --format json --output trivy-config-report.json .

        # Process results
        fs_vulns=$(jq '.Results[]?.Vulnerabilities? // [] | length' trivy-fs-report.json | awk '{sum += $1} END {print sum+0}')
        config_issues=$(jq '.Results[]?.Misconfigurations? // [] | length' trivy-config-report.json | awk '{sum += $1} END {print sum+0}')

        echo "Found $fs_vulns filesystem vulnerabilities"
        echo "Found $config_issues configuration issues"

        # Report critical/high severity issues
        critical_vulns=$(jq '.Results[]?.Vulnerabilities? // [] | map(select(.Severity == "CRITICAL" or .Severity == "HIGH")) | length' trivy-fs-report.json | awk '{sum += $1} END {print sum+0}')
        echo "vulnerabilities-found=$critical_vulns" >> $GITHUB_OUTPUT

        if [ "$critical_vulns" -gt 0 ]; then
          echo "❌ Found $critical_vulns critical/high severity vulnerabilities!"
          jq -r '.Results[]?.Vulnerabilities? // [] | map(select(.Severity == "CRITICAL" or .Severity == "HIGH")) | .[] | "- \(.Severity): \(.VulnerabilityID) in \(.PkgName) - \(.Title)"' trivy-fs-report.json
          echo "scan-status=fail" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ No critical or high severity vulnerabilities found"
          echo "scan-status=pass" >> $GITHUB_OUTPUT
        fi

    - name: Upload security reports
      if: inputs.upload-artifacts == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: |
          gitleaks-report.json
          trivy-fs-report.json
          trivy-config-report.json
        retention-days: 30
