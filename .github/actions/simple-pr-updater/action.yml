name: 'Simple PR Comment Updater'
description: 'Simple PR comment updater that avoids complex bash scripting'

inputs:
  github-token:
    description: 'GitHub token for updating comments'
    required: true
  
  phase:
    description: 'Current CI phase'
    required: true
  
  phase-status:
    description: 'Status of current phase'
    required: true
  
  phase-details:
    description: 'Details for current phase'
    required: false
    default: ''

outputs:
  comment-id:
    description: 'ID of the created or updated comment'
    value: ${{ steps.update-comment.outputs.comment-id }}

runs:
  using: "composite"
  steps:
    - name: Update PR comment
      id: update-comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const phase = '${{ inputs.phase }}';
          const status = '${{ inputs.phase-status }}';
          const details = '${{ inputs.phase-details }}';
          
          // Create simple status mapping
          const statusEmoji = {
            'success': '✅',
            'failure': '❌',
            'in_progress': '🔄',
            'skipped': '⏭️'
          };
          
          const phaseEmoji = {
            'canary': '🚀',
            'quality': '🎯',
            'tests': '🧪',
            'security': '🔒',
            'performance': '⚡',
            'final': '🎉'
          };
          
          // Create progress indicator
          const progressMap = {
            'canary': '[#.........] 10%',
            'quality': '[###.......] 30%', 
            'tests': '[######....] 60%',
            'security': '[########..] 80%',
            'performance': '[#########.] 90%',
            'final': '[##########] 100%'
          };
          
          const timestamp = new Date().toISOString().slice(0, 19) + ' UTC';
          
          // Analyze details to provide better status
          let actualStatus = status;
          let statusMessage = status.toUpperCase();
          
          if (details && details.includes('skipped')) {
            // If details show skipped jobs, this might be intentional
            const skippedCount = (details.match(/skipped/g) || []).length;
            const totalJobs = (details.match(/:/g) || []).length;
            
            if (skippedCount === totalJobs) {
              actualStatus = 'skipped';
              statusMessage = 'SKIPPED (No relevant changes)';
            } else if (skippedCount > 0) {
              statusMessage = `MIXED (${skippedCount}/${totalJobs} skipped)`;
            }
          }

          const commentBody = `# 🚀 CI Pipeline Status

          **Last Updated:** ${timestamp}
          **Current Phase:** ${phaseEmoji[phase] || '📋'} ${phase.toUpperCase()}

          ## Progress
          \`${progressMap[phase] || '[#####.....] 50%'}\`

          ## Current Status
          ${statusEmoji[actualStatus] || '⏸️'} **${statusMessage}**

          ${details ? `**Details:** ${details}` : ''}

          ## Quick Links
          - [View Pipeline](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          - [Download Artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}#artifacts)

          ---
          🤖 Updated automatically by CI`;

          try {
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🚀 CI Pipeline Status')
            );

            let result;
            if (botComment) {
              // Update existing comment
              result = await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
              console.log(`Updated comment ${botComment.id}`);
            } else {
              // Create new comment
              result = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              console.log(`Created comment ${result.data.id}`);
            }
            
            core.setOutput('comment-id', result.data.id);
            
          } catch (error) {
            console.error('Error updating PR comment:', error);
            // Don't fail the entire workflow for comment issues
          }