name: Architecture Metrics

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write
  statuses: write

jobs:
  track-metrics:
    name: Track Architecture Metrics
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Calculate Architecture Metrics
      id: metrics
      run: |
        echo "üìä Calculating architecture metrics..."

        # Total lines of code in MCP
        TOTAL_LOC=$(find pkg/mcp -name "*.go" -exec wc -l {} + | awk '{sum+=$1} END {print sum}')
        echo "total_loc=$TOTAL_LOC" >> $GITHUB_OUTPUT

        # Adapter files count
        ADAPTER_COUNT=$(find pkg/mcp -name "*adapter*.go" 2>/dev/null | wc -l || echo "0")
        echo "adapter_count=$ADAPTER_COUNT" >> $GITHUB_OUTPUT

        # Wrapper files count (excluding docker_operation)
        WRAPPER_COUNT=$(find pkg/mcp -name "*wrapper*.go" 2>/dev/null | grep -v docker_operation | wc -l || echo "0")
        echo "wrapper_count=$WRAPPER_COUNT" >> $GITHUB_OUTPUT

        # Interface definitions count
        INTERFACE_COUNT=$(grep -r "type.*Tool.*interface" pkg/mcp/ 2>/dev/null | grep -v "//\|test" | wc -l || echo "0")
        echo "interface_count=$INTERFACE_COUNT" >> $GITHUB_OUTPUT

        # Import cycle check
        if go build -tags mcp ./pkg/mcp/... 2>&1 | grep -q "import cycle"; then
          IMPORT_CYCLES=1
        else
          IMPORT_CYCLES=0
        fi
        echo "import_cycles=$IMPORT_CYCLES" >> $GITHUB_OUTPUT

        # Test coverage (if available)
        if [ -f coverage.out ]; then
          COVERAGE=$(go tool cover -func=coverage.out | grep -E "total:|TOTAL" | tail -1 | awk '{print $3}' | sed 's/%//')
        else
          COVERAGE="N/A"
        fi
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

        # Build time
        BUILD_START=$(date +%s)
        go build -tags mcp ./pkg/mcp/... >/dev/null 2>&1
        BUILD_END=$(date +%s)
        BUILD_TIME=$((BUILD_END - BUILD_START))
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT

    - name: Display Metrics Summary
      run: |
        echo "=== üìä Architecture Metrics Summary ==="
        echo ""
        echo "**Code Volume:**"
        echo "- Total Lines of Code: ${{ steps.metrics.outputs.total_loc }}"
        echo ""
        echo "**Architecture Quality:**"
        echo "- Adapter Files: ${{ steps.metrics.outputs.adapter_count }} (target: 0) $([ "${{ steps.metrics.outputs.adapter_count }}" = "0" ] && echo "‚úÖ" || echo "‚ùå")"
        echo "- Wrapper Files: ${{ steps.metrics.outputs.wrapper_count }} (target: 0) $([ "${{ steps.metrics.outputs.wrapper_count }}" = "0" ] && echo "‚úÖ" || echo "‚ùå")"
        echo "- Tool Interfaces: ${{ steps.metrics.outputs.interface_count }} (target: 1) $([ "${{ steps.metrics.outputs.interface_count }}" = "1" ] && echo "‚úÖ" || echo "‚ö†Ô∏è")"
        echo "- Import Cycles: ${{ steps.metrics.outputs.import_cycles }} (target: 0) $([ "${{ steps.metrics.outputs.import_cycles }}" = "0" ] && echo "‚úÖ" || echo "‚ùå")"
        echo ""
        echo "**Performance:**"
        echo "- Build Time: ${{ steps.metrics.outputs.build_time }}s"
        echo "- Test Coverage: ${{ steps.metrics.outputs.coverage }}%"

    - name: Comment PR with Metrics
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const metrics = {
            loc: '${{ steps.metrics.outputs.total_loc }}',
            adapters: '${{ steps.metrics.outputs.adapter_count }}',
            wrappers: '${{ steps.metrics.outputs.wrapper_count }}',
            interfaces: '${{ steps.metrics.outputs.interface_count }}',
            cycles: '${{ steps.metrics.outputs.import_cycles }}',
            buildTime: '${{ steps.metrics.outputs.build_time }}',
            coverage: '${{ steps.metrics.outputs.coverage }}'
          };

          const comment = `## üìä Architecture Metrics Report

          ### Code Quality Indicators
          | Metric | Current | Target | Status |
          |--------|---------|--------|--------|
          | Adapter Files | ${metrics.adapters} | 0 | ${metrics.adapters === '0' ? '‚úÖ' : '‚ùå'} |
          | Wrapper Files | ${metrics.wrappers} | 0 | ${metrics.wrappers === '0' ? '‚úÖ' : '‚ùå'} |
          | Tool Interfaces | ${metrics.interfaces} | 1 | ${metrics.interfaces === '1' ? '‚úÖ' : '‚ö†Ô∏è'} |
          | Import Cycles | ${metrics.cycles} | 0 | ${metrics.cycles === '0' ? '‚úÖ' : '‚ùå'} |

          ### Performance Metrics
          - **Build Time**: ${metrics.buildTime}s
          - **Total Lines**: ${metrics.loc}
          - **Test Coverage**: ${metrics.coverage}%

          ---
          *Generated by Architecture Metrics workflow*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
