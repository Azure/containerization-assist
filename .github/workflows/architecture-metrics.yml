name: Architecture Metrics & Validation

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write
  statuses: write

jobs:
  architecture-analysis:
    name: Architecture Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Architecture validation
      id: arch-check
      uses: ./.github/actions/architecture-check
      with:
        path: 'pkg/mcp'

    - name: Architecture status
      run: |
        echo "ðŸ“Š Architecture Score: ${{ steps.arch-check.outputs.architecture-score }}/100"
        echo "Status: ${{ steps.arch-check.outputs.architecture-status }}"

    - name: Calculate additional metrics
      id: metrics
      run: |
        echo "ðŸ“Š Calculating additional architecture metrics..."

        # Total lines of code in MCP
        TOTAL_LOC=$(find pkg/mcp -name "*.go" -exec wc -l {} + | awk '{sum+=$1} END {print sum}')
        echo "total_loc=$TOTAL_LOC" >> $GITHUB_OUTPUT

        # Interface definitions count
        INTERFACE_COUNT=$(grep -r "type.*Tool.*interface" pkg/mcp/ 2>/dev/null | grep -v "//\|test" | wc -l || echo "0")
        echo "interface_count=$INTERFACE_COUNT" >> $GITHUB_OUTPUT

        # Test coverage (if available)
        if [ -f coverage.out ]; then
          COVERAGE=$(go tool cover -func=coverage.out | grep -E "total:|TOTAL" | tail -1 | awk '{print $3}' | sed 's/%//')
        else
          COVERAGE="N/A"
        fi
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

        # Build time
        BUILD_START=$(date +%s)
        go build -tags mcp ./pkg/mcp/... >/dev/null 2>&1
        BUILD_END=$(date +%s)
        BUILD_TIME=$((BUILD_END - BUILD_START))
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT

    - name: Display Metrics Summary
      run: |
        echo "=== ðŸ“Š Architecture Metrics Summary ==="
        echo ""
        echo "**Architecture Score:** ${{ steps.arch-check.outputs.architecture-score }}/100 (${{ steps.arch-check.outputs.architecture-status }})"
        echo ""
        echo "**Quality Metrics:**"
        echo "- Adapters/Wrappers/Cycles: ${{ steps.arch-check.outputs.adapter-count }}/${{ steps.arch-check.outputs.wrapper-count }}/${{ steps.arch-check.outputs.import-cycles }}"
        echo "- Large Files (>500 lines): ${{ steps.arch-check.outputs.large-files }}"
        echo "- Complex Functions (>10): ${{ steps.arch-check.outputs.complex-functions || 'N/A' }}"
        echo ""
        echo "âœ… Architecture analysis complete!"
