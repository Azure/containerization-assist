name: Architecture Metrics & Validation

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write
  statuses: write

jobs:
  architecture-analysis:
    name: Architecture Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Architecture validation
      id: arch-check
      uses: ./.github/actions/architecture-check
      with:
        path: 'pkg/mcp'

    - name: Fail if architecture violations
      if: steps.arch-check.outputs.adapter-count != '0' || steps.arch-check.outputs.wrapper-count != '0'
      run: |
        echo "❌ Architecture violations detected!"
        echo "Adapters: ${{ steps.arch-check.outputs.adapter-count }}"
        echo "Wrappers: ${{ steps.arch-check.outputs.wrapper-count }}"
        exit 1

    - name: Calculate additional metrics
      id: metrics
      run: |
        echo "📊 Calculating additional architecture metrics..."

        # Total lines of code in MCP
        TOTAL_LOC=$(find pkg/mcp -name "*.go" -exec wc -l {} + | awk '{sum+=$1} END {print sum}')
        echo "total_loc=$TOTAL_LOC" >> $GITHUB_OUTPUT

        # Interface definitions count
        INTERFACE_COUNT=$(grep -r "type.*Tool.*interface" pkg/mcp/ 2>/dev/null | grep -v "//\|test" | wc -l || echo "0")
        echo "interface_count=$INTERFACE_COUNT" >> $GITHUB_OUTPUT

        # Test coverage (if available)
        if [ -f coverage.out ]; then
          COVERAGE=$(go tool cover -func=coverage.out | grep -E "total:|TOTAL" | tail -1 | awk '{print $3}' | sed 's/%//')
        else
          COVERAGE="N/A"
        fi
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

        # Build time
        BUILD_START=$(date +%s)
        go build -tags mcp ./pkg/mcp/... >/dev/null 2>&1
        BUILD_END=$(date +%s)
        BUILD_TIME=$((BUILD_END - BUILD_START))
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT

    - name: Display Metrics Summary
      run: |
        echo "=== 📊 Architecture Metrics Summary ==="
        echo ""
        echo "**Code Volume:**"
        echo "- Total Lines of Code: ${{ steps.metrics.outputs.total_loc }}"
        echo ""
        echo "**Architecture Quality:**"
        echo "- Adapter Files: ${{ steps.arch-check.outputs.adapter-count }} (target: 0) $([ "${{ steps.arch-check.outputs.adapter-count }}" = "0" ] && echo "✅" || echo "❌")"
        echo "- Wrapper Files: ${{ steps.arch-check.outputs.wrapper-count }} (target: 0) $([ "${{ steps.arch-check.outputs.wrapper-count }}" = "0" ] && echo "✅" || echo "❌")"
        echo "- Tool Interfaces: ${{ steps.metrics.outputs.interface_count }} (target: 1) $([ "${{ steps.metrics.outputs.interface_count }}" = "1" ] && echo "✅" || echo "⚠️")"
        echo "- Import Cycles: ${{ steps.arch-check.outputs.import-cycles }} (target: 0) $([ "${{ steps.arch-check.outputs.import-cycles }}" = "0" ] && echo "✅" || echo "❌")"
        echo ""
        echo "**Performance:**"
        echo "- Build Time: ${{ steps.metrics.outputs.build_time }}s"
        echo "- Test Coverage: ${{ steps.metrics.outputs.coverage }}%"
        echo ""
        echo "✅ Architecture validation complete!"

    - name: Comment PR with Metrics
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const metrics = {
            loc: '${{ steps.metrics.outputs.total_loc }}',
            adapters: '${{ steps.arch-check.outputs.adapter-count }}',
            wrappers: '${{ steps.arch-check.outputs.wrapper-count }}',
            interfaces: '${{ steps.metrics.outputs.interface_count }}',
            cycles: '${{ steps.arch-check.outputs.import-cycles }}',
            buildTime: '${{ steps.metrics.outputs.build_time }}',
            coverage: '${{ steps.metrics.outputs.coverage }}'
          };

          const comment = `## 📊 Architecture Metrics & Validation Report

          ### Architecture Validation
          | Check | Current | Target | Status |
          |-------|---------|--------|--------|
          | Adapter Files | ${metrics.adapters} | 0 | ${metrics.adapters === '0' ? '✅ Passed' : '❌ Failed'} |
          | Wrapper Files | ${metrics.wrappers} | 0 | ${metrics.wrappers === '0' ? '✅ Passed' : '❌ Failed'} |
          | Import Cycles | ${metrics.cycles} | 0 | ${metrics.cycles === '0' ? '✅ Passed' : '❌ Failed'} |

          ### Code Quality Indicators
          | Metric | Value | Target | Status |
          |--------|-------|--------|--------|
          | Tool Interfaces | ${metrics.interfaces} | 1 | ${metrics.interfaces === '1' ? '✅ Complete' : '⚠️ In Progress'} |

          ### Performance Metrics
          - **Build Time**: ${metrics.buildTime}s
          - **Total Lines**: ${metrics.loc}
          - **Test Coverage**: ${metrics.coverage}%

          ---
          *Generated by Architecture Metrics & Validation workflow*`;

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Architecture Metrics & Validation Report')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
