name: Simple CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      test-cli: ${{ steps.detect-paths.outputs.test_cli }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for diff
        
    - name: Detect changed paths
      id: detect-paths
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Get changed files
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..HEAD)
          echo "Changed files:"
          echo "$changed_files"

          # Check for CLI changes (cmd/, pkg/ai/, pkg/pipeline/)
          cli_changes=$(echo "$changed_files" | grep -E "^(pkg/ai|pkg/pipeline|cmd/)" || true)

          # Set outputs
          echo "test_cli=$([ -n "$cli_changes" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "CLI changes: $([ -n "$cli_changes" ] && echo "yes" || echo "no")"
        else
          # For non-PR events, test everything
          echo "test_cli=true" >> $GITHUB_OUTPUT
          echo "Non-PR event: testing all packages"
        fi
        
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Build MCP Server
      run: |
        GOFLAGS=-trimpath go build -o container-kit-mcp ./cmd/mcp-server
        ./container-kit-mcp --version
        
    - name: Build Legacy CLI
      if: steps.detect-paths.outputs.test_cli == 'true'
      run: |
        GOFLAGS=-trimpath go build -o container-kit ./main.go
        ./container-kit --version
        
    - name: Unit Tests
      run: go test -race ./pkg/mcp/... ./pkg/core/...
      
    - name: Format Check
      run: |
        if [ -n "$(gofmt -s -l .)" ]; then
          echo "❌ Code needs formatting"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
        $(go env GOPATH)/bin/golangci-lint run ./pkg/mcp/... ./pkg/core/... || echo "⚠️ Lint issues found but allowing CI to continue"
    
    - name: Static Analysis (staticcheck)
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./pkg/mcp/... ./pkg/core/...
    
    - name: Security Scan (govulncheck)  
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
        
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Setup Kind
      uses: helm/kind-action@v1
      with:
        install_only: true
        
    - name: MCP Integration Tests
      run: |
        chmod +x ./test/integration/run_tests.sh
        ./test/integration/run_tests.sh
        
    - name: Upload CLI Binary
      if: steps.detect-paths.outputs.test_cli == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: container-kit-${{ runner.os }}-${{ github.run_id }}
        path: ./container-kit
        retention-days: 1

  # Legacy CLI Integration Tests (from old pipeline)
  cli-integration-tests:
    name: CLI Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.outputs.test-cli == 'true'
    strategy:
      max-parallel: 25
      matrix:
        test-repo:
          - Azure-Samples/containerize-and-deploy-Java-app-to-Azure
          - Mariemfakhreldein/e-commerce-app
          - SaiUpadhyayula/SpringAngularEcommerce
          - aws-samples/aws-codedeploy-sample-tomcat
          - chamilad/tomcat-hello-world
          - konveyor-ecosystem/coolstore
        test-number: [1, 2, 3, 4, 5]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download CLI binary
      uses: actions/download-artifact@v4
      with:
        name: container-kit-${{ runner.os }}-${{ github.run_id }}
        path: ./

    - name: Run Integration Test
      id: integration-test
      uses: ./.github/actions/integration-test-runner
      with:
        repository: ${{ matrix.test-repo }}
        test-number: ${{ matrix.test-number }}
        binary-name: container-kit
        azure-openai-key: ${{ secrets.AZURE_OPENAI_KEY }}
        azure-openai-endpoint: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        azure-openai-deployment-id: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_ID }}

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cc-run-${{ steps.integration-test.outputs.run-name }}
        path: test-repo/artifacts/
        retention-days: 14

  # Aggregate results from the matrix
  aggregate-cli-integration-results:
    name: CLI Integration Results Summary
    needs: cli-integration-tests
    runs-on: ubuntu-latest
    if: always() && needs.cli-integration-tests.result != 'skipped'
    
    steps:
    - name: Download all results
      uses: actions/download-artifact@v4
      with:
        pattern: cc-run-*
        path: results

    - name: Integration Test Results Summary
      id: aggregate_results
      run: |
        tests_per_repo=5

        github_summary_table=""
        echo "## Container-Kit CLI Integration Test Results" > $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        github_summary_table+="| Repo | Status | Success Rate | Passed | Failed | Timed Out |"
        github_summary_table+=$'\n'
        github_summary_table+="| --- | --- | --- | --- | --- | --- |"
        github_summary_table+=$'\n'

        # List repos without numbers
        export REPOS="$(ls results | grep -oP 'cc-run-\K[^#]+' | uniq)"
        echo "Repos: $REPOS"

        success_rates=()

        single_run_pass_threshold=30
        single_run_green_threshold=80

        # Loop through repos
        for repo in $REPOS; do
          echo "Processing results for $repo"

          # Count successes and failures
          success_count=0
          failure_count=0

          # Build detailed results
          passed_tests=""
          failed_tests="" # includes failed and timed out tests
          timedout_test_count=0

          # Loop through test runs
          for ((i=1; i<=$tests_per_repo; i++)); do
            if [ -f "results/cc-run-$repo#$i/result.txt" ]; then
              result=$(cat "results/cc-run-$repo#$i/result.txt")
              if [ "$result" == "success" ]; then
                success_count=$((success_count + 1))
                passed_tests+="- Test Run $i ✅\n"
              else
                if [ "$result" == "timeout" ]; then
                  timedout_test_count=$((timedout_test_count + 1))
                else
                  failure_count=$((failure_count + 1))
                  failed_tests+="- Test Run $i ❌\n"
                  echo "::warning::Test Run $i Failed"
                fi
              fi
            else
              echo "::warning::Test Run $repo#$i Result Not Found"
            fi
          done

          success_rate=$((success_count * 100 / tests_per_repo))
          completed_tests=$((success_count + failure_count))

          success_emote=""
          if [ $success_rate -ge $single_run_green_threshold ]; then
            success_emote="✅"
          elif [ $success_rate -ge $single_run_pass_threshold ]; then
            success_emote="⚠️"
          else
            success_emote="❌"
          fi

          # Show results
          echo ""
          echo "===== $repo Test Results ====="
          echo "Total tests: $tests_per_repo"
          echo "Passed: $success_count"
          echo "Failed: $failure_count"
          echo "Timed out: $timedout_test_count"
          echo "Success rate: $success_rate%"

          # Convert the repo name back to GitHub URL format (replace dots with slashes)
          repo_url=$(echo "$repo" | sed 's/\./\//g')
          repo_markdown_link="[$repo_url](https://github.com/$repo_url)"
          github_summary_table+="| $repo_markdown_link | $success_emote | $success_rate% | $success_count | $failure_count | $timedout_test_count |"
          github_summary_table+=$'\n'
          echo ""
          success_rates+=("$success_rate")
        done

        pass_threshold=50
        green_threshold=80
        average_success_rate=0
        for rate in "${success_rates[@]}"; do
          average_success_rate=$((average_success_rate + rate))
        done
        average_success_rate=$((average_success_rate / ${#success_rates[@]}))
        pass_rate_message=""
        if [ $average_success_rate -ge $green_threshold ]; then
          pass_rate_message="✅ Average success rate: $average_success_rate% >= $green_threshold%"
        elif [ $average_success_rate -ge $pass_threshold ]; then
          pass_rate_message="⚠️ Average success rate: $average_success_rate% >= $pass_threshold%"
        else
          pass_rate_message="❌ Average success rate: $average_success_rate% < $pass_threshold%"
        fi
        echo "$pass_rate_message"
        echo "" >> $GITHUB_STEP_SUMMARY # add a blank line to separate the summary from the table
        echo "$pass_rate_message" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Output the summary table
        echo "$github_summary_table" >> $GITHUB_STEP_SUMMARY

        # Last check to fail the job if the average success rate is below the threshold
        if [ $average_success_rate -lt $pass_threshold ]; then
          echo "Average success rate: $average_success_rate% < $pass_threshold%"
          exit 1
        fi