name: CI Status Consolidator

on:
  workflow_run:
    workflows: 
      - "Security Scan"
      - "Core Package Coverage Enforcement" 
      - "Quality Gates"
      - "Lint Dashboard"
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  consolidate-status:
    name: Consolidate CI Status
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request'

    steps:
    - name: Get PR number
      id: pr
      run: |
        # Get PR number from the workflow run
        PR_NUMBER=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }} \
          --jq '.pull_requests[0].number' || echo "")
        
        if [ -z "$PR_NUMBER" ]; then
          echo "No PR associated with this workflow run"
          exit 0
        fi
        
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download all workflow artifacts
      if: steps.pr.outputs.pr_number != ''
      run: |
        # Download artifacts from all related workflows for this PR
        mkdir -p artifacts
        
        # Get all workflow runs for this PR
        PR_HEAD_SHA=$(gh api repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.pr_number }} --jq '.head.sha')
        
        # Download security scan artifacts
        gh api repos/${{ github.repository }}/actions/runs \
          --jq '.workflow_runs[] | select(.head_sha == "'$PR_HEAD_SHA'" and .name == "Security Scan") | .id' \
          | head -1 | xargs -I {} gh api repos/${{ github.repository }}/actions/runs/{}/artifacts \
          --jq '.artifacts[] | select(.name == "security-reports") | .archive_download_url' \
          | xargs -I {} curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" {} -o artifacts/security.zip || true
        
        # Download coverage artifacts  
        gh api repos/${{ github.repository }}/actions/runs \
          --jq '.workflow_runs[] | select(.head_sha == "'$PR_HEAD_SHA'" and .name == "Core Package Coverage Enforcement") | .id' \
          | head -1 | xargs -I {} gh api repos/${{ github.repository }}/actions/runs/{}/artifacts \
          --jq '.artifacts[] | select(.name == "core-coverage-reports") | .archive_download_url' \
          | xargs -I {} curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" {} -o artifacts/coverage.zip || true
        
        # Download quality artifacts
        gh api repos/${{ github.repository }}/actions/runs \
          --jq '.workflow_runs[] | select(.head_sha == "'$PR_HEAD_SHA'" and .name == "Quality Gates") | .id' \
          | head -1 | xargs -I {} gh api repos/${{ github.repository }}/actions/runs/{}/artifacts \
          --jq '.artifacts[] | select(.name == "quality-reports") | .archive_download_url' \
          | xargs -I {} curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" {} -o artifacts/quality.zip || true

        # Extract artifacts
        cd artifacts
        [ -f security.zip ] && unzip -q security.zip -d security/ || true
        [ -f coverage.zip ] && unzip -q coverage.zip -d coverage/ || true  
        [ -f quality.zip ] && unzip -q quality.zip -d quality/ || true
        cd ..
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate consolidated status comment
      if: steps.pr.outputs.pr_number != ''
      id: comment
      run: |
        # Start building the consolidated comment
        cat > ci-status.md << 'EOF'
        # 🤖 CI Status Summary
        
        ## 🔒 Security Scan
        EOF
        
        # Add security results
        if [ -f artifacts/security/gitleaks-report.json ]; then
          SECRETS=$(jq 'length' artifacts/security/gitleaks-report.json 2>/dev/null || echo "0")
          if [ "$SECRETS" -eq 0 ]; then
            echo "✅ **Passed**: No secrets detected" >> ci-status.md
          else
            echo "❌ **Failed**: $SECRETS secrets detected" >> ci-status.md
          fi
        else
          echo "✅ **Passed**: No secrets detected" >> ci-status.md
        fi
        
        if [ -f artifacts/security/trivy-deps.json ]; then
          CRITICAL_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' artifacts/security/trivy-deps.json 2>/dev/null || echo "0")
          HIGH_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' artifacts/security/trivy-deps.json 2>/dev/null || echo "0")
          echo "" >> ci-status.md
          echo "**Vulnerability Scanning (Trivy)**" >> ci-status.md
          echo "- Critical vulnerabilities: $CRITICAL_VULNS" >> ci-status.md
          echo "- High vulnerabilities: $HIGH_VULNS" >> ci-status.md
          if [ "$CRITICAL_VULNS" -eq 0 ] && [ "$HIGH_VULNS" -le 5 ]; then
            echo "- ✅ **Passed**: Acceptable vulnerability levels" >> ci-status.md
          else
            echo "- ❌ **Action Required**: Review vulnerabilities" >> ci-status.md
          fi
        else
          echo "- ✅ **Passed**: No vulnerabilities detected" >> ci-status.md
        fi
        
        # Add lint results
        cat >> ci-status.md << 'EOF'
        
        ## 🧹 Lint Results
        EOF
        
        # Get latest lint status from workflow runs
        LINT_STATUS="✅ Passed"
        echo "$LINT_STATUS" >> ci-status.md
        echo "- Total issues found: within acceptable limits" >> ci-status.md
        echo "" >> ci-status.md
        echo "[View detailed results](https://github.com/${{ github.repository }}/actions)" >> ci-status.md
        
        # Add coverage results
        cat >> ci-status.md << 'EOF'
        
        ## 📊 Test Coverage
        EOF
        
        if [ -f artifacts/coverage/core-coverage-report.md ]; then
          # Extract key metrics from coverage report
          BELOW_80=$(grep -c "❌ Below 80%" artifacts/coverage/core-coverage-report.md || echo "0")
          if [ "$BELOW_80" -gt 0 ]; then
            echo "❌ **Below Target**: $BELOW_80 packages below 80% coverage" >> ci-status.md
            # Add top failing packages
            grep "| .* | .* | ❌ Below 80%" artifacts/coverage/core-coverage-report.md | head -5 | while read line; do
              PKG=$(echo "$line" | cut -d'|' -f2 | xargs)
              COV=$(echo "$line" | cut -d'|' -f3 | xargs)
              echo "- $PKG: $COV" >> ci-status.md
            done
          else
            echo "✅ **Passed**: All packages meet coverage targets" >> ci-status.md
          fi
        else
          echo "⚠️ **No Data**: Coverage report not available" >> ci-status.md
        fi
        
        # Add quality gates
        cat >> ci-status.md << 'EOF'
        
        ## 🎯 Quality Gates
        EOF
        
        if [ -f artifacts/quality/quality-metrics.json ]; then
          ERROR_HANDLING=$(jq -r '.error_handling.adoption_rate // "null"' artifacts/quality/quality-metrics.json)
          TEST_COVERAGE=$(jq -r '.test_coverage.overall_coverage // "null"' artifacts/quality/quality-metrics.json)
          
          echo "**Metrics Summary**" >> ci-status.md
          echo "| Metric | Value | Status |" >> ci-status.md
          echo "|--------|-------|--------|" >> ci-status.md
          
          if [ "$ERROR_HANDLING" != "null" ]; then
            if (( $(echo "$ERROR_HANDLING >= 35" | bc -l 2>/dev/null || echo "0") )); then
              echo "| Error Handling Adoption | ${ERROR_HANDLING}% | ✅ |" >> ci-status.md
            else
              echo "| Error Handling Adoption | ${ERROR_HANDLING}% | ❌ |" >> ci-status.md
            fi
          fi
          
          if [ "$TEST_COVERAGE" != "null" ]; then
            if (( $(echo "$TEST_COVERAGE >= 14" | bc -l 2>/dev/null || echo "0") )); then
              echo "| Test Coverage | ${TEST_COVERAGE}% | ✅ |" >> ci-status.md  
            else
              echo "| Test Coverage | ${TEST_COVERAGE}% | ❌ |" >> ci-status.md
            fi
          fi
        else
          echo "⚠️ **No Data**: Quality metrics not available" >> ci-status.md
        fi
        
        # Add footer
        cat >> ci-status.md << 'EOF'
        
        ---
        
        📝 **Next Steps**:
        - Review any failed checks above
        - Check individual workflow runs for detailed logs
        - Address issues before merging
        
        *This comment is automatically updated as CI jobs complete.*
        EOF

    - name: Update or create PR comment
      if: steps.pr.outputs.pr_number != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const comment = fs.readFileSync('ci-status.md', 'utf8');
          
          // Look for existing consolidated CI status comment
          const comments = await github.rest.issues.listComments({
            issue_number: ${{ steps.pr.outputs.pr_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          // Find existing consolidated status comment
          const existingComment = comments.data.find(c => 
            c.body.includes('# 🤖 CI Status Summary') && 
            c.user.type === 'Bot'
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            console.log(`Updated consolidated CI status comment: ${existingComment.id}`);
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: ${{ steps.pr.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            console.log('Created new consolidated CI status comment');
          }