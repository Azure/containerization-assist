name: Code Quality & Linting

on:
  pull_request:
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.golangci.yml'
      - '.github/lint-thresholds.json'
  push:
    branches: [main]
    paths:
      - '.github/lint-thresholds.json'
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Canary phase - quick validation before running expensive jobs
  canary:
    name: Canary Validation
    runs-on: ubuntu-latest
    outputs:
      should-continue: ${{ steps.canary-check.outputs.success }}
      test-mcp: ${{ steps.detect-paths.outputs.test_mcp }}
      test-core: ${{ steps.detect-paths.outputs.test_core }}
      test-cli: ${{ steps.detect-paths.outputs.test_cli }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6

    - name: Detect changed paths
      id: detect-paths
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Get changed files
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..HEAD)
          echo "Changed files:"
          echo "$changed_files"

          # Check for MCP changes
          mcp_changes=$(echo "$changed_files" | grep -E "^(pkg/mcp|cmd/mcp-server)" || true)

          # Check for Core changes
          core_changes=$(echo "$changed_files" | grep -E "^(pkg/core|pkg/utils)" || true)

          # Check for CLI changes
          cli_changes=$(echo "$changed_files" | grep -E "^(pkg/ai|pkg/pipeline|cmd/)" || true)

          # Set outputs
          echo "test_mcp=$([ -n "$mcp_changes" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "test_core=$([ -n "$core_changes" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "test_cli=$([ -n "$cli_changes" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

          echo "MCP changes: $([ -n "$mcp_changes" ] && echo "yes" || echo "no")"
          echo "Core changes: $([ -n "$core_changes" ] && echo "yes" || echo "no")"
          echo "CLI changes: $([ -n "$cli_changes" ] && echo "yes" || echo "no")"
        else
          # For non-PR events, test everything
          echo "test_mcp=true" >> $GITHUB_OUTPUT
          echo "test_core=true" >> $GITHUB_OUTPUT
          echo "test_cli=true" >> $GITHUB_OUTPUT
          echo "Non-PR event: testing all packages"
        fi

    - name: Canary validation
      id: canary-check
      run: |
        echo "🚀 Running canary validation..."

        # Test 1: Go mod tidy check
        echo "📝 Testing go mod tidy..."
        cp go.mod go.mod.bak
        cp go.sum go.sum.bak
        go mod tidy
        if ! diff -q go.mod go.mod.bak >/dev/null || ! diff -q go.sum go.sum.bak >/dev/null; then
          echo "❌ go mod tidy would make changes - dependencies are not tidy"
          echo "Run 'go mod tidy' locally and commit the changes"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ Go mod tidy passed"

        # Test 2: Format check
        echo "🎨 Testing gofmt..."
        unformatted=$(gofmt -s -l .)
        if [ -n "$unformatted" ]; then
          echo "❌ Code formatting issues found:"
          echo "$unformatted"
          echo "Run 'gofmt -s -w .' to fix formatting"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ Code formatting passed"

        # Test 3: Import formatting check
        echo "📋 Testing goimports..."
        go install golang.org/x/tools/cmd/goimports@latest
        goimports_output=$(goimports -l .)
        if [ -n "$goimports_output" ]; then
          echo "❌ Import formatting issues found:"
          echo "$goimports_output"
          echo "Run 'goimports -w .' to fix import formatting"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ Import formatting passed"

        # Test 4: Build check
        echo "📦 Testing build..."
        if ! go build ./...; then
          echo "❌ Build failed"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ Build passed"

        # Test 5: Basic lint check
        echo "🔍 Testing lint..."
        if ! golangci-lint run --timeout=5m ./...; then
          echo "❌ Lint failed"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ Lint passed"

        # Test 6: Short tests
        echo "🧪 Testing short tests..."
        if ! go test -short ./...; then
          echo "❌ Short tests failed"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ Short tests passed"

        echo "🎉 All canary checks passed!"
        echo "success=true" >> $GITHUB_OUTPUT

  # Quick format and quality checks for PRs
  format-and-quality:
    if: github.event_name == 'pull_request' && needs.canary.outputs.should-continue == 'true'
    name: Format & Code Quality Checks
    runs-on: ubuntu-latest
    needs: canary

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Check formatting
      run: |
        # Check gofmt
        unformatted=$(gofmt -s -l .)
        if [ -n "$unformatted" ]; then
          echo "⚠️ The following files need formatting:"
          echo "$unformatted"
          echo ""
          echo "Run 'make fmt' to fix formatting issues"
          echo "::warning::Files need formatting: $unformatted"
        else
          echo "✅ All files are properly formatted"
        fi

        # Check goimports
        if command -v goimports >/dev/null 2>&1; then
          goimports_output=$(goimports -l .)
          if [ -n "$goimports_output" ]; then
            echo "⚠️ The following files need import formatting:"
            echo "$goimports_output"
            echo "::warning::Files need import formatting: $goimports_output"
          else
            echo "✅ All imports are properly formatted"
          fi
        fi

    - name: Technical debt tracking
      run: |
        # Count TODO/HACK/FIXME comments in changed files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Get list of changed Go files
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..HEAD | grep '\.go$' || true)

          if [ -n "$changed_files" ]; then
            # Count technical debt comments in changed files
            debt_count=$(echo "$changed_files" | xargs grep -l 'TODO\|HACK\|FIXME' | wc -l)
            total_debt=$(echo "$changed_files" | xargs grep -c 'TODO\|HACK\|FIXME' | awk '{sum+=$1} END {print sum+0}')

            echo "Technical debt in changed files: $total_debt comments in $debt_count files"

            if [ "$total_debt" -gt 10 ]; then
              echo "❌ Too many technical debt comments added ($total_debt > 10)"
              echo "::error::Reduce technical debt comments to 10 or fewer"
              exit 1
            elif [ "$total_debt" -gt 5 ]; then
              echo "⚠️ Warning: $total_debt technical debt comments added"
              echo "::warning::Consider reducing technical debt"
            else
              echo "✅ Technical debt within acceptable limits"
            fi
          fi
        fi

    - name: Complexity check
      run: |
        # Install gocyclo for complexity checking
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Get changed Go files
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..HEAD | grep '\.go$' || true)

          if [ -n "$changed_files" ]; then
            # Check complexity of changed files
            high_complexity=$(echo "$changed_files" | xargs gocyclo -over 25 2>/dev/null || true)
            medium_complexity=$(echo "$changed_files" | xargs gocyclo -over 20 2>/dev/null | grep -v "cyclomatic complexity 2[6-9]\|3[0-9]" || true)

            if [ -n "$high_complexity" ]; then
              echo "❌ High complexity functions found:"
              echo "$high_complexity"
              echo "::error::Reduce cyclomatic complexity to 25 or below"
              exit 1
            elif [ -n "$medium_complexity" ]; then
              echo "⚠️ Medium complexity functions found:"
              echo "$medium_complexity"
              echo "::warning::Consider reducing complexity below 20"
            else
              echo "✅ Code complexity within acceptable limits"
            fi
          fi
        fi

  # Comprehensive linting with budgets
  lint-comprehensive:
    name: Comprehensive Linting
    runs-on: ubuntu-latest
    needs: canary
    if: needs.canary.outputs.should-continue == 'true'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6
        sudo apt-get update && sudo apt-get install -y jq bc

    - name: Load thresholds
      id: thresholds
      run: |
        if [ -f .github/lint-thresholds.json ]; then
          echo "mcp_error=$(jq -r '.thresholds.mcp.error' .github/lint-thresholds.json)" >> $GITHUB_OUTPUT
          echo "mcp_warning=$(jq -r '.thresholds.mcp.warning' .github/lint-thresholds.json)" >> $GITHUB_OUTPUT
          echo "core_error=$(jq -r '.thresholds.core.error' .github/lint-thresholds.json)" >> $GITHUB_OUTPUT
          echo "core_warning=$(jq -r '.thresholds.core.warning' .github/lint-thresholds.json)" >> $GITHUB_OUTPUT
        else
          # Fallback defaults
          echo "mcp_error=100" >> $GITHUB_OUTPUT
          echo "mcp_warning=50" >> $GITHUB_OUTPUT
          echo "core_error=50" >> $GITHUB_OUTPUT
          echo "core_warning=30" >> $GITHUB_OUTPUT
        fi

    - name: Run comprehensive lint analysis
      run: |
        mkdir -p lint-reports

        # Function to analyze package group
        analyze_package() {
          local name=$1
          local packages=$2
          local error_threshold=$3
          local warning_threshold=$4
          local output="lint-reports/${name}.json"

          echo "Analyzing $name packages: $packages"
          golangci-lint run --output.json.path="$output" --timeout=10m $packages || true

          # Generate statistics
          local error_count=$(jq '[.Issues[] | select(.Severity == "error")] | length' "$output" 2>/dev/null || echo "0")
          local warning_count=$(jq '[.Issues[] | select(.Severity == "warning")] | length' "$output" 2>/dev/null || echo "0")
          local total_count=$(jq '.Issues | length' "$output" 2>/dev/null || echo "0")

          echo "${name}_errors=$error_count" >> lint-stats.txt
          echo "${name}_warnings=$warning_count" >> lint-stats.txt
          echo "${name}_total=$total_count" >> lint-stats.txt

          # Determine status
          local status="✅ OK"
          if [ $error_count -gt $error_threshold ]; then
            status="❌ Over Error Limit"
          elif [ $warning_count -gt $warning_threshold ]; then
            status="⚠️ Over Warning Limit"
          fi

          # Generate report section
          echo "### $name Packages" >> lint-report.md
          echo "**Errors:** $error_count (limit: $error_threshold) | **Warnings:** $warning_count (limit: $warning_threshold) | **Status:** $status" >> lint-report.md
          echo "" >> lint-report.md

          if [ $total_count -gt 0 ]; then
            echo "#### By Linter" >> lint-report.md
            jq -r '.Issues | group_by(.FromLinter) | map("- \(.[0].FromLinter): \(length)") | .[]' "$output" >> lint-report.md
            echo "" >> lint-report.md
          fi
        }

        # Initialize report
        echo "# Lint Report - $(date +%Y-%m-%d)" > lint-report.md
        echo "" >> lint-report.md

        # Run analysis for each package group (conditionally based on changes)
        if [ "${{ needs.canary.outputs.test-mcp }}" = "true" ]; then
          echo "🔍 Analyzing MCP packages (changes detected)"
          analyze_package "MCP" "./pkg/mcp/..." ${{ steps.thresholds.outputs.mcp_error }} ${{ steps.thresholds.outputs.mcp_warning }}
        else
          echo "⏭️ Skipping MCP package analysis (no changes detected)"
          echo "MCP_errors=0" >> lint-stats.txt
          echo "MCP_warnings=0" >> lint-stats.txt
          echo "MCP_total=0" >> lint-stats.txt
        fi

        if [ "${{ needs.canary.outputs.test-core }}" = "true" ]; then
          echo "🔍 Analyzing Core packages (changes detected)"
          analyze_package "Core" "./pkg/core/... ./pkg/utils/..." ${{ steps.thresholds.outputs.core_error }} ${{ steps.thresholds.outputs.core_warning }}
        else
          echo "⏭️ Skipping Core package analysis (no changes detected)"
          echo "Core_errors=0" >> lint-stats.txt
          echo "Core_warnings=0" >> lint-stats.txt
          echo "Core_total=0" >> lint-stats.txt
        fi

        if [ "${{ needs.canary.outputs.test-cli }}" = "true" ]; then
          echo "🔍 Analyzing CLI packages (changes detected)"
          analyze_package "CLI" "./pkg/ai/... ./pkg/pipeline/... ./cmd/..." 50 30
        else
          echo "⏭️ Skipping CLI package analysis (no changes detected)"
          echo "CLI_errors=0" >> lint-stats.txt
          echo "CLI_warnings=0" >> lint-stats.txt
          echo "CLI_total=0" >> lint-stats.txt
        fi

        # Load statistics for summary
        source lint-stats.txt

        # Check for budget violations
        BUDGET_VIOLATIONS=""
        if [ $MCP_errors -gt ${{ steps.thresholds.outputs.mcp_error }} ]; then
          BUDGET_VIOLATIONS="$BUDGET_VIOLATIONS\n- MCP: $MCP_errors errors (limit: ${{ steps.thresholds.outputs.mcp_error }})"
        fi
        if [ $Core_errors -gt ${{ steps.thresholds.outputs.core_error }} ]; then
          BUDGET_VIOLATIONS="$BUDGET_VIOLATIONS\n- Core: $Core_errors errors (limit: ${{ steps.thresholds.outputs.core_error }})"
        fi

        echo "budget_violations=$BUDGET_VIOLATIONS" >> $GITHUB_OUTPUT

        # Create CI Status Summary
        echo "## 🚀 CI Status Summary" > ci-status.md
        echo "" >> ci-status.md
        echo "### Canary Validation" >> ci-status.md
        echo "✅ **go mod tidy** • ✅ **gofmt** • ✅ **goimports** • ✅ **build** • ✅ **lint** • ✅ **test -short**" >> ci-status.md
        echo "" >> ci-status.md

        echo "### Lint Analysis" >> ci-status.md
        echo "| Package Group | Errors | Warnings | Status |" >> ci-status.md
        echo "|---------------|--------|----------|--------|" >> ci-status.md

        # MCP row
        if [ "${{ needs.canary.outputs.test-mcp }}" = "true" ]; then
          echo "| MCP | $MCP_errors | $MCP_warnings | $([ $MCP_errors -gt ${{ steps.thresholds.outputs.mcp_error }} ] && echo "❌ Over Error" || echo "✅ OK") |" >> ci-status.md
        else
          echo "| MCP | - | - | ⏭️ Skipped (no changes) |" >> ci-status.md
        fi

        # Core row
        if [ "${{ needs.canary.outputs.test-core }}" = "true" ]; then
          echo "| Core | $Core_errors | $Core_warnings | $([ $Core_errors -gt ${{ steps.thresholds.outputs.core_error }} ] && echo "❌ Over Error" || echo "✅ OK") |" >> ci-status.md
        else
          echo "| Core | - | - | ⏭️ Skipped (no changes) |" >> ci-status.md
        fi

        # CLI row
        if [ "${{ needs.canary.outputs.test-cli }}" = "true" ]; then
          echo "| CLI | $CLI_errors | $CLI_warnings | $([ $CLI_errors -gt 50 ] && echo "❌ Over Error" || echo "✅ OK") |" >> ci-status.md
        else
          echo "| CLI | - | - | ⏭️ Skipped (no changes) |" >> ci-status.md
        fi
        echo "" >> ci-status.md

        # Overall status
        overall_status="✅ All checks passed"
        if [ -n "$BUDGET_VIOLATIONS" ] && [ "$BUDGET_VIOLATIONS" != "" ]; then
          overall_status="❌ Error budget violations found"
        fi
        echo "### Overall Status: $overall_status" >> ci-status.md

        # Store results for PR comment
        echo "ci_status_file=ci-status.md" >> $GITHUB_OUTPUT

        # Legacy lint report for artifact upload
        echo "## Summary" >> lint-report.md
        echo "" >> lint-report.md
        echo "| Package Group | Errors | Warnings | Status |" >> lint-report.md
        echo "|---------------|--------|----------|--------|" >> lint-report.md
        echo "| MCP | $MCP_errors | $MCP_warnings | $([ $MCP_errors -gt ${{ steps.thresholds.outputs.mcp_error }} ] && echo "❌ Over Error" || echo "✅ OK") |" >> lint-report.md
        echo "| Core | $Core_errors | $Core_warnings | $([ $Core_errors -gt ${{ steps.thresholds.outputs.core_error }} ] && echo "❌ Over Error" || echo "✅ OK") |" >> lint-report.md
        echo "| CLI | $CLI_errors | $CLI_warnings | $([ $CLI_errors -gt 50 ] && echo "❌ Over Error" || echo "✅ OK") |" >> lint-report.md

        # Fail if over error budgets
        if [ -n "$BUDGET_VIOLATIONS" ] && [ "$BUDGET_VIOLATIONS" != "" ]; then
          echo "❌ Error budget violations found"
          echo -e "$BUDGET_VIOLATIONS"
          exit 1
        fi
      id: lint_analysis

    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const ciStatus = fs.readFileSync('ci-status.md', 'utf8');

          // Look for existing CI status comments to replace
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const existingComment = comments.data.find(comment =>
            comment.body.includes('🚀 CI Status Summary') &&
            comment.user.type === 'Bot'
          );

          const commentBody = `${ciStatus}\n\n---\n*Updated automatically by Code Quality workflow*`;

          if (existingComment) {
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          }

    - name: Create issue if over threshold (scheduled runs)
      if: github.event_name == 'schedule' && steps.lint_analysis.outputs.budget_violations != ''
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('lint-report.md', 'utf8');

          // Check if there's already an open issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'lint-budget-exceeded',
            state: 'open'
          });

          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Lint Error Budget Exceeded',
              body: report + '\n\n---\n\nThis issue was automatically created because lint errors exceed the configured thresholds.',
              labels: ['lint-budget-exceeded', 'technical-debt']
            });
          }

    - name: Upload lint reports
      uses: actions/upload-artifact@v4
      with:
        name: lint-reports
        path: lint-reports/
        retention-days: 30

    - name: Update baseline (on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        source lint-stats.txt
        echo "{
          \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
          \"counts\": {
            \"mcp_errors\": $MCP_errors,
            \"mcp_warnings\": $MCP_warnings,
            \"core_errors\": $Core_errors,
            \"core_warnings\": $Core_warnings,
            \"cli_errors\": $CLI_errors,
            \"cli_warnings\": $CLI_warnings
          }
        }" > .lint-baseline.json

        if ! git diff --quiet .lint-baseline.json; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .lint-baseline.json
          git commit -m "chore: update lint baseline [skip ci]"
          git push
        fi
