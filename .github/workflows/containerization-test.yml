name: Containerization E2E Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  containerize:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Checkout coolstore
      uses: actions/checkout@v4
      with:
        repository: konveyor-ecosystem/coolstore
        path: coolstore
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3
        
    - name: Install Kind
      uses: helm/kind-action@v1
      with:
        install_only: true
        
    - name: Cache mcphost binary
      id: cache-mcphost
      uses: actions/cache@v4
      with:
        path: /tmp/mcphost-binary
        key: mcphost-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-sampling-fix
        restore-keys: |
          mcphost-${{ runner.os }}-sampling-fix
        
    - name: Build mcphost from fork
      if: steps.cache-mcphost.outputs.cache-hit != 'true'
      run: |
        # MCPHOST has a bug that does allow for sampling - will update with source repo after change is contributed to MCPHOST
        # For now my fork includes the necessary changes
        git clone --branch sampling-fix https://github.com/ReinierCC/mcphost.git /tmp/mcphost
        cd /tmp/mcphost
        
        # Build Go binary
        go build -o mcphost .
        
        # Store in cache location
        mkdir -p /tmp/mcphost-binary
        cp mcphost /tmp/mcphost-binary/
        
    - name: Install mcphost binary
      run: |
        # Install from cache or build location
        sudo cp /tmp/mcphost-binary/mcphost /usr/local/bin/mcphost
        sudo chmod +x /usr/local/bin/mcphost
        
    - name: Build MCP server
      run: |
        make
        
    - name: Run containerization
      id: containerize
      timeout-minutes: 10
      env:
        AZURE_OPENAI_DEPLOYMENT_ID: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_ID }}
        AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        # Make hooks executable
        chmod +x .github/mcphost/hooks/*.sh
        
        # Start success monitor in background
        .github/mcphost/hooks/success-terminator.sh &
        MONITOR_PID=$!
        
        # Run containerization with timeout protection
        set +e  # Don't exit on error
        timeout 300 mcphost --config .github/mcphost/ci-config.yml \
          --prompt "containerize coolstore using all the containerization-assist tools - keep going if you encounter errors, follow the suggested steps" \
          --debug --stream=true --max-steps 50 --quiet --no-exit
        MCPHOST_EXIT_CODE=$?
        set -e  # Re-enable exit on error
          
        # Kill monitor process
        kill $MONITOR_PID 2>/dev/null || true
        
        # Check for success indicators
        if grep -q "Enhanced deployment verification completed" mcp.log 2>/dev/null; then
          echo "✅ CONTAINERIZATION SUCCESS"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ CONTAINERIZATION FAILED (exit code: $MCPHOST_EXIT_CODE)"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Check deployment status
      if: always()
      run: |
        echo "=== Deployment Status ==="
        kubectl get pods || echo "No pods found"
        echo "=== Recent log entries ==="
        tail -20 mcp.log || echo "No log file found"
        
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: containerization-logs
        path: |
          mcp.log
          mcphost-termination.log
        retention-days: 7
