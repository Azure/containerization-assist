name: Coolstore Integration Test

on:
  workflow_dispatch:
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout container-copilot
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: '1.23'
      
      - name: Build container-copilot
        run: |
          go build -o container-copilot .
          
      - name: Upload binary
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: container-copilot-binary
          path: container-copilot
          retention-days: 1

  test-run:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-number: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      fail-fast: false
    
    steps:
      - name: Download container-copilot binary
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: container-copilot-binary
          path: ./
      
      - name: Make binary executable
        run: |
          chmod +x container-copilot
          sudo mv container-copilot /usr/local/bin/

      - name: Checkout Konveyor Coolstore
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: konveyor-ecosystem/coolstore
          path: coolstore

      - name: Setup Docker
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Install Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          install_only: true
      
      - name: Run Test ${{ matrix.test-number }}
        id: run_test
        env:
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_DEPLOYMENT_ID: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_ID }}
        run: |
          cd coolstore
          
          # Make sure we have a place to store logs
          mkdir -p logs
          
          # The success message we're looking for in the output
          SUCCESS_MESSAGE="Container deployment pipeline completed successfully!"
          
          # Start with a clean slate
          rm -f Dockerfile || true
          rm -rf manifests || true
          mkdir -p manifests
          
          # Run the test and save output
          echo "Running container-copilot generate for test ${{ matrix.test-number }}..."
          container-copilot generate . > "logs/run-${{ matrix.test-number }}.log" 2>&1
          
          # Check if the success message is in the log file
          if grep -q "$SUCCESS_MESSAGE" "logs/run-${{ matrix.test-number }}.log"; then
            echo "✅ Test Run ${{ matrix.test-number }}: PASSED - Found '$SUCCESS_MESSAGE'"
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Test Run ${{ matrix.test-number }}: FAILED - Did not find '$SUCCESS_MESSAGE'"
            echo "result=failure" >> $GITHUB_OUTPUT
          fi
          
          # Save the files it created for successful tests
          if [ -f "Dockerfile" ] || [ -d "manifests" ]; then
            mkdir -p artifacts
            [ -f Dockerfile ] && cp Dockerfile artifacts/ || echo "No Dockerfile created"
            [ -d manifests ] && [ "$(ls -A manifests)" ] && cp -r manifests/* artifacts/ || echo "No manifests created"
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: steps.run_test.outputs.result == 'success'
        with:
          name: container-copilot-artifacts-${{ matrix.test-number }}
          path: coolstore/artifacts/
          retention-days: 14

      - name: Upload test logs
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: container-copilot-logs-${{ matrix.test-number }}
          path: coolstore/logs/
          retention-days: 14
      
      - name: Save result
        run: echo "${{ steps.run_test.outputs.result }}" > result.txt
      
      - name: Upload test result
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: test-result-${{ matrix.test-number }}
          path: result.txt
  
  aggregate-results:
    needs: test-run
    runs-on: ubuntu-latest
    steps:
      - name: Download all results
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          pattern: test-result-*
          path: results

      - name: Aggregate Test Results
        id: aggregate_results
        run: |
          # Count successes and failures
          success_count=0
          failure_count=0
          
          # Build detailed results
          passed_tests=""
          failed_tests=""
          
          for i in {1..10}; do
            if [ -f "results/test-result-$i/result.txt" ]; then
              result=$(cat "results/test-result-$i/result.txt")
              if [ "$result" == "success" ]; then
                success_count=$((success_count + 1))
                passed_tests+="- Test Run $i ✅\n"
              else
                failure_count=$((failure_count + 1))
                failed_tests+="- Test Run $i ❌\n"
                echo "::warning::Test Run $i Failed"
              fi
            else
              echo "::warning::Test Run $i Result Not Found"
            fi
          done
          
          total_tests=$((success_count + failure_count))
          success_rate=$((success_count * 100 / total_tests))
          
          # Show results
          echo ""
          echo "===== Test Results ====="
          echo "Total tests: $total_tests"
          echo "Passed: $success_count"
          echo "Failed: $failure_count"
          echo "Success rate: $success_rate%"
          
          echo -e "Passed Tests:\n$passed_tests"
          echo -e "Failed Tests:\n$failed_tests"
          
          echo "## Container-Copilot Integration Test Results" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Tests | $total_tests |" >> $GITHUB_STEP_SUMMARY
          echo "| Passed | $success_count |" >> $GITHUB_STEP_SUMMARY
          echo "| Failed | $failure_count |" >> $GITHUB_STEP_SUMMARY
          echo "| Success Rate | $success_rate% |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Passed Tests" >> $GITHUB_STEP_SUMMARY
          if [ -n "$passed_tests" ]; then
            echo -e "$passed_tests" >> $GITHUB_STEP_SUMMARY
          else
            echo "None" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Failed Tests" >> $GITHUB_STEP_SUMMARY
          if [ -n "$failed_tests" ]; then
            echo -e "$failed_tests" >> $GITHUB_STEP_SUMMARY
          else
            echo "None" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Save values for other steps to use
          echo "success_count=$success_count" >> $GITHUB_OUTPUT
          echo "failure_count=$failure_count" >> $GITHUB_OUTPUT
          echo "success_rate=$success_rate" >> $GITHUB_OUTPUT