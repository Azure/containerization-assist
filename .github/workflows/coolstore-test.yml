name: Coolstore Integration Test

on:
  workflow_dispatch:
  pull_request:

jobs:
  test-coolstore:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout container-copilot
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      
      - name: Build container-copilot
        run: |
          go build -o container-copilot .
          sudo mv container-copilot /usr/local/bin/

      - name: Checkout Konveyor Coolstore
        uses: actions/checkout@v3
        with:
          repository: konveyor-ecosystem/coolstore
          path: coolstore

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Install Kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Run container-copilot tests
        id: container_copilot_runs
        env:
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_DEPLOYMENT_ID: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_ID }}
        run: |
          cd coolstore
          
          # Track our results
          success_count=0
          failure_count=0
          
          # Make sure we have a place to store logs
          mkdir -p logs
          
          # Run the tests multiple times
          for i in {1..5}; do
            echo "===== Starting Test Run $i of 5 ====="
            
            # Start with a clean slate
            rm -f Dockerfile || true
            rm -rf manifests || true
            mkdir -p manifests
            
            # Run the test and save output
            echo "Running container-copilot generate..."
            container-copilot generate ../coolstore > "logs/run-${i}.log" 2>&1
            
            # Check if generare returned success
            if [ $? -eq 0 ]; then
              echo "✅ Test Run $i: PASSED"
              success_count=$((success_count + 1))
              
              # Save the files it created
              mkdir -p artifacts/run-${i}
              [ -f Dockerfile ] && cp Dockerfile artifacts/run-${i}/ || echo "No Dockerfile created"
              [ -d manifests ] && [ "$(ls -A manifests)" ] && cp -r manifests/* artifacts/run-${i}/ || echo "No manifests created"
            else
              echo "❌ Test Run $i: FAILED"
              failure_count=$((failure_count + 1))
            fi
            
            # Always save the logs
            mkdir -p artifacts/run-${i}
            cp "logs/run-${i}.log" artifacts/run-${i}/
          done
          
          # Show results
          echo ""
          echo "===== Test Results ====="
          echo "Total tests: 5"
          echo "Passed: $success_count"
          echo "Failed: $failure_count"
          echo "Success rate: $((success_count * 100 / 5))%"
          
          echo "## Container-Copilot Integration Test Results" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Tests | 5 |" >> $GITHUB_STEP_SUMMARY
          echo "| Passed | $success_count |" >> $GITHUB_STEP_SUMMARY
          echo "| Failed | $failure_count |" >> $GITHUB_STEP_SUMMARY
          echo "| Success Rate | $((success_count * 100 / 5))% |" >> $GITHUB_STEP_SUMMARY
          
          # Save values for other steps to use
          echo "success_count=$success_count" >> $GITHUB_OUTPUT
          echo "failure_count=$failure_count" >> $GITHUB_OUTPUT
          echo "success_rate=$((success_count * 100 / 5))" >> $GITHUB_OUTPUT

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: container-copilot-artifacts
          path: coolstore/artifacts/
          retention-days: 14

      - name: Archive logs
        uses: actions/upload-artifact@v4
        with:
          name: container-copilot-logs
          path: coolstore/logs/
          retention-days: 14
          
      - name: Check success rate
        if: always()
        run: |
          success_count=${{ steps.container_copilot_runs.outputs.success_count }}
          
          # Fail the workflow if success rate is below 80%
          if [ $success_count -lt 4 ]; then
            echo "Success rate is below 80%, marking run as failed"
            exit 1