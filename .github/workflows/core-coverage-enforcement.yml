name: Core Package Coverage Enforcement

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  core-coverage:
    name: Core Package Coverage Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run tests with coverage for core packages
      run: |
        # Define core packages
        CORE_PACKAGES=(
          "./pkg/mcp/internal/core/..."
          "./pkg/mcp/internal/runtime/..."
          "./pkg/mcp/internal/orchestration/..."
          "./pkg/mcp/internal/session/..."
          "./pkg/mcp/internal/build/..."
          "./pkg/mcp/internal/deploy/..."
          "./pkg/mcp/internal/analyze/..."
          "./pkg/core/docker/..."
          "./pkg/core/kubernetes/..."
          "./pkg/core/git/..."
          "./pkg/core/analysis/..."
          "./pkg/pipeline/..."
          "./pkg/ai/..."
          "./pkg/clients/..."
        )

        # Run tests with coverage for each core package
        echo "## Core Package Coverage Report" > core-coverage-report.md
        echo "" >> core-coverage-report.md
        echo "| Package | Coverage | Status |" >> core-coverage-report.md
        echo "|---------|----------|--------|" >> core-coverage-report.md

        FAILED_PACKAGES=""
        for pkg in "${CORE_PACKAGES[@]}"; do
          echo "Testing package: $pkg"

          # Run test and capture coverage
          if go test -coverprofile=temp-coverage.out -covermode=atomic $pkg > /dev/null 2>&1; then
            if [ -f temp-coverage.out ]; then
              # Extract coverage percentage
              COV=$(go tool cover -func=temp-coverage.out | grep total | awk '{print $3}' | sed 's/%//')

              # Check if empty (no code)
              if [ -z "$COV" ]; then
                COV="0.0"
              fi

              # Determine status
              STATUS="❌ Below 80%"
              if (( $(echo "$COV >= 80" | bc -l) )); then
                STATUS="✅ Meets target"
              elif (( $(echo "$COV >= 60" | bc -l) )); then
                STATUS="⚠️ Below target"
              fi

              # Add to report
              PKG_NAME=$(echo $pkg | sed 's/\.\.\.//')
              echo "| $PKG_NAME | ${COV}% | $STATUS |" >> core-coverage-report.md

              # Track failures
              if (( $(echo "$COV < 80" | bc -l) )); then
                FAILED_PACKAGES="$FAILED_PACKAGES\n- $PKG_NAME: ${COV}%"
              fi
            else
              echo "| $pkg | 0.0% | ❌ No tests |" >> core-coverage-report.md
              FAILED_PACKAGES="$FAILED_PACKAGES\n- $pkg: 0.0% (no tests)"
            fi
          else
            echo "| $pkg | 0.0% | ❌ Test failed |" >> core-coverage-report.md
            FAILED_PACKAGES="$FAILED_PACKAGES\n- $pkg: 0.0% (test failed)"
          fi
        done

        # Generate combined coverage
        go test -coverprofile=combined-coverage.out -covermode=atomic ${CORE_PACKAGES[@]}
        go tool cover -html=combined-coverage.out -o core-coverage.html

        # Add summary to report
        echo "" >> core-coverage-report.md
        echo "## Summary" >> core-coverage-report.md
        echo "" >> core-coverage-report.md

        if [ -n "$FAILED_PACKAGES" ]; then
          echo "### ❌ Packages Below 80% Target:" >> core-coverage-report.md
          echo -e "$FAILED_PACKAGES" >> core-coverage-report.md
          echo "" >> core-coverage-report.md
          echo "**Action Required**: These core packages must achieve ≥80% coverage." >> core-coverage-report.md
        else
          echo "### ✅ All Core Packages Meet Coverage Target!" >> core-coverage-report.md
        fi

        # Output to step summary
        cat core-coverage-report.md >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: core-coverage-reports
        path: |
          combined-coverage.out
          core-coverage.html
          core-coverage-report.md

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('core-coverage-report.md', 'utf8');

          // Look for existing core coverage comments to replace
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          // Find existing core coverage comment
          const existingComment = comments.data.find(comment =>
            comment.body.includes('## Core Package Coverage Report') &&
            comment.user.type === 'Bot'
          );

          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
            console.log(`Updated existing core coverage comment: ${existingComment.id}`);
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
            console.log('Created new core coverage comment');
          }

    - name: Check core package coverage enforcement
      run: |
        # This will fail the job if any core package is below 80%
        # For now, we'll make it a warning since we're establishing baseline
        if grep -q "❌ Below 80%" core-coverage-report.md; then
          echo "::warning::Some core packages are below the 80% coverage target"
          echo "See the coverage report for details"
          # Uncomment the line below to enforce the check
          # exit 1
        fi
