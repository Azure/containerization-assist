name: Coverage Ratchet

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  coverage-check:
    name: Coverage Budget & Ratchet
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for ratchet comparison

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Install gocov and gocov-xml
      run: |
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest

    - name: Convert coverage to XML
      run: |
        gocov convert coverage.out | gocov-xml > coverage.xml

    - name: Generate coverage report
      run: |
        go tool cover -func=coverage.out > coverage-summary.txt
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat coverage-summary.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Check coverage thresholds
      run: |
        # Extract total coverage
        TOTAL_COV=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${TOTAL_COV}%"

        # Read minimum threshold from config
        MIN_THRESHOLD=$(cat .github/coverage-thresholds.json | jq -r '.global.line_coverage.minimum')
        TARGET_THRESHOLD=$(cat .github/coverage-thresholds.json | jq -r '.global.line_coverage.target')

        echo "Minimum threshold: ${MIN_THRESHOLD}%"
        echo "Target threshold: ${TARGET_THRESHOLD}%"

        # Check if coverage meets minimum
        if (( $(echo "$TOTAL_COV < $MIN_THRESHOLD" | bc -l) )); then
          echo "❌ Coverage ${TOTAL_COV}% is below minimum threshold ${MIN_THRESHOLD}%"
          exit 1
        fi

        # Check if coverage meets target
        if (( $(echo "$TOTAL_COV >= $TARGET_THRESHOLD" | bc -l) )); then
          echo "✅ Coverage ${TOTAL_COV}% meets target threshold ${TARGET_THRESHOLD}%"
        else
          echo "⚠️  Coverage ${TOTAL_COV}% meets minimum but is below target ${TARGET_THRESHOLD}%"
        fi

    - name: Check coverage ratchet
      if: github.event_name == 'pull_request'
      run: |
        # Get base branch coverage
        git checkout ${{ github.event.pull_request.base.sha }}
        go test -coverprofile=base-coverage.out ./... > /dev/null 2>&1 || true

        if [ -f base-coverage.out ]; then
          BASE_COV=$(go tool cover -func=base-coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          git checkout ${{ github.event.pull_request.head.sha }}
          CURRENT_COV=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')

          echo "Base coverage: ${BASE_COV}%"
          echo "Current coverage: ${CURRENT_COV}%"

          # Calculate difference
          DIFF=$(echo "$CURRENT_COV - $BASE_COV" | bc -l)
          TOLERANCE=$(cat .github/coverage-thresholds.json | jq -r '.ratchet.regression_tolerance')

          if (( $(echo "$DIFF < -$TOLERANCE" | bc -l) )); then
            echo "❌ Coverage regression detected: ${DIFF}% (tolerance: -${TOLERANCE}%)"
            echo "## Coverage Ratchet Failed ❌" >> $GITHUB_STEP_SUMMARY
            echo "Coverage decreased by ${DIFF}% which exceeds tolerance of -${TOLERANCE}%" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Coverage ratchet passed: ${DIFF}%"
            echo "## Coverage Ratchet Passed ✅" >> $GITHUB_STEP_SUMMARY
            echo "Coverage change: ${DIFF}%" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️  Could not determine base coverage, skipping ratchet check"
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html
          coverage.xml
          coverage-summary.txt

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage-summary.txt', 'utf8');

          // GitHub comment limit is 65536 characters
          const maxBodyLength = 65000; // Leave some buffer
          const maxCoverageLength = maxBodyLength - 100; // Account for markdown formatting

          let coverageText = coverage;
          let truncated = false;

          if (coverage.length > maxCoverageLength) {
            // Keep the header and tail of the coverage report
            const lines = coverage.split('\n');
            const totalLine = lines[lines.length - 1] || lines[lines.length - 2]; // Get the total line

            // Calculate how many lines we can include
            const headerLines = 20; // Show first 20 lines
            const footerLines = 5;  // Show last 5 lines including total

            const header = lines.slice(0, headerLines).join('\n');
            const footer = lines.slice(-footerLines).join('\n');

            coverageText = header + '\n\n... (truncated - showing first ' + headerLines + ' and last ' + footerLines + ' lines) ...\n\n' + footer;
            truncated = true;
          }

          let body = `## Coverage Report\n\`\`\`\n${coverageText}\n\`\`\``;

          if (truncated) {
            body += '\n\n*Note: Full coverage report was truncated due to size limits. Check the workflow artifacts for the complete report.*';
          }

          // Final safety check
          if (body.length > maxBodyLength) {
            body = '## Coverage Report\n\nThe coverage report is too large to display in a comment. Please check the workflow artifacts for the full report.';
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
