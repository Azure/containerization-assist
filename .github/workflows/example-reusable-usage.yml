name: Example - Using Reusable Go Build (DISABLED)

on:
  # workflow_dispatch:  # For manual testing
  # push:
  #   branches: [ main ]
  #   paths:
  #     - '.github/workflows/reusable-go-build.yml'
  #     - '.github/workflows/example-reusable-usage.yml'

# This workflow is disabled as it's just an example/demo
# Remove this file entirely in future cleanup

jobs:
  # Example 1: Basic MCP build and test
  mcp-build:
    name: MCP Build & Test
    uses: ./.github/workflows/reusable-go-build.yml
    with:
      go-version: '1.24'
      packages: './pkg/mcp/...'
      run-tests: true
      run-race-tests: true
      run-lint: true
      lint-args: '--timeout=5m --config=.golangci.yml'
      coverage: true
      upload-coverage: true
      coverage-flags: 'mcp'

  # Example 2: CLI build with binary output
  cli-build:
    name: CLI Build & Binary
    uses: ./.github/workflows/reusable-go-build.yml
    with:
      go-version: '1.24'
      packages: './pkg/ai/...'
      run-tests: true
      run-race-tests: true
      build-binary: true
      binary-output: 'container-kit'
      binary-main: './main.go'

  # Example 3: Core packages (no tags)
  core-build:
    name: Core Packages Build
    uses: ./.github/workflows/reusable-go-build.yml
    with:
      go-version: '1.24'
      packages: './pkg/core/... ./pkg/pipeline/... ./pkg/utils/... ./pkg/docker/... ./pkg/k8s/... ./pkg/kind/...'
      run-tests: true
      run-race-tests: true
      run-lint: false
      coverage: true

  # Example 4: MCP Server binary
  mcp-server-build:
    name: MCP Server Binary
    uses: ./.github/workflows/reusable-go-build.yml
    with:
      go-version: '1.24'
      packages: './pkg/mcp/...'
      build-binary: true
      binary-output: 'container-kit-mcp'
      binary-main: './cmd/mcp-server'
      run-tests: false  # Skip tests for binary-only build

  # Example 5: Cross-platform matrix using reusable workflow
  cross-platform:
    name: Cross-Platform ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    uses: ./.github/workflows/reusable-go-build.yml
    with:
      go-version: '1.24'
      runner-os: ${{ matrix.os }}
      packages: './cmd/...'
      build-binary: true
      binary-output: 'container-kit-${{ matrix.os }}'
      binary-main: './main.go'
      run-tests: false
      run-race-tests: false

  # Example 6: Integration tests
  integration-tests:
    name: Integration Tests
    uses: ./.github/workflows/reusable-go-build.yml
    with:
      go-version: '1.24'
      packages: './test/integration/...'
      run-tests: true
      run-race-tests: true
      coverage: true
      coverage-flags: 'integration'

  # Job that depends on the reusable workflow outputs
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [mcp-build, cli-build, core-build]
    if: always()
    steps:
      - name: Print build results
        run: |
          echo "## Build Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Build | Tests | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|-------|-------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| MCP | ${{ needs.mcp-build.outputs.build-success }} | ${{ needs.mcp-build.outputs.test-success }} | ${{ needs.mcp-build.outputs.coverage-percentage }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| CLI | ${{ needs.cli-build.outputs.build-success }} | ${{ needs.cli-build.outputs.test-success }} | N/A |" >> $GITHUB_STEP_SUMMARY
          echo "| Core | ${{ needs.core-build.outputs.build-success }} | ${{ needs.core-build.outputs.test-success }} | ${{ needs.core-build.outputs.coverage-percentage }}% |" >> $GITHUB_STEP_SUMMARY

          # Check if any builds failed
          if [ "${{ needs.mcp-build.outputs.build-success }}" != "true" ] || \
             [ "${{ needs.cli-build.outputs.build-success }}" != "true" ] || \
             [ "${{ needs.core-build.outputs.build-success }}" != "true" ]; then
            echo "❌ Some builds failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All builds succeeded!" >> $GITHUB_STEP_SUMMARY
          fi
