name: MCP Simplification Feature Branch CI

on:
  pull_request:
    branches: [ feature/mcp-simplification ]
  push:
    branches: [ feature/mcp-simplification ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick validation and path detection
  setup:
    name: Setup & Path Detection
    runs-on: ubuntu-latest
    outputs:
      test-mcp: ${{ steps.detect-paths.outputs.test_mcp }}
      go-cache-key: ${{ steps.cache-keys.outputs.go-cache-key }}
      tools-cache-key: ${{ steps.cache-keys.outputs.tools-cache-key }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect changed paths
      id: detect-paths
      run: |
        # Always test MCP for the simplification branch
        echo "test_mcp=true" >> $GITHUB_OUTPUT
        echo "Feature branch: testing all MCP packages"
        
    - name: Generate cache keys
      id: cache-keys
      run: |
        echo "go-cache-key=${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}" >> $GITHUB_OUTPUT
        echo "tools-cache-key=${{ runner.os }}-quality-tools-v3" >> $GITHUB_OUTPUT

  # Build job - fast and parallel
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
      
    - name: Build MCP Server
      run: |
        GOFLAGS=-trimpath go build -o container-kit-mcp ./cmd/mcp-server
        ./container-kit-mcp --version

  # Enhanced quality checks for simplification
  quality:
    name: Quality Analysis
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      format-status: ${{ steps.quality-checks.outputs.format-status }}
      lint-status: ${{ steps.quality-checks.outputs.lint-status }}
      static-analysis-status: ${{ steps.quality-checks.outputs.static-analysis-status }}
      security-status: ${{ steps.quality-checks.outputs.security-status }}
      architecture-score: ${{ steps.quality-checks.outputs.architecture-score }}
      architecture-status: ${{ steps.quality-checks.outputs.architecture-status }}
      file-count: ${{ steps.simplification-metrics.outputs.file-count }}
      interface-count: ${{ steps.simplification-metrics.outputs.interface-count }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
          
    - name: Cache Quality Tools
      uses: actions/cache@v4
      with:
        path: ~/go/bin
        key: ${{ needs.setup.outputs.tools-cache-key }}
        restore-keys: |
          ${{ runner.os }}-quality-tools-
        
    - name: Quality Checks
      id: quality-checks
      uses: ./.github/actions/quality-checks
      with:
        go-version: '1.24.4'
        target-paths: './pkg/mcp/... ./pkg/core/...'
        
    - name: Simplification Metrics
      id: simplification-metrics
      run: |
        # Count files in pkg/mcp
        FILE_COUNT=$(find pkg/mcp -name "*.go" -type f | wc -l)
        echo "file-count=$FILE_COUNT" >> $GITHUB_OUTPUT
        
        # Count interface definitions
        INTERFACE_COUNT=$(grep -r "^type.*interface" pkg/mcp --include="*.go" | wc -l)
        echo "interface-count=$INTERFACE_COUNT" >> $GITHUB_OUTPUT
        
        echo "üìä Simplification Metrics:"
        echo "  Files: $FILE_COUNT (target: ~120)"
        echo "  Interfaces: $INTERFACE_COUNT (target: 8-10)"
        
    - name: Upload Quality Metrics
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quality-metrics-${{ github.run_id }}
        path: |
          quality-metrics.json
          metrics-output/
        retention-days: 30

  # Unit tests with coverage tracking
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
        
    - name: Unit Tests with Race Detection
      run: |
        echo "üèÉ Running unit tests with race detection..."
        
        # Run tests with race detection and capture output
        set -o pipefail
        go test -race -coverprofile=coverage.out -v ./pkg/mcp/... ./pkg/core/... 2>&1 | tee test-output.log
        
        # Check for race conditions in test output
        if grep -q "WARNING: DATA RACE" test-output.log; then
          echo "‚ùå Data races detected in tests!"
          echo "Race condition details:"
          grep -A 10 -B 5 "WARNING: DATA RACE" test-output.log || true
          exit 1
        else
          echo "‚úÖ No data races detected"
        fi
      
    - name: Test Coverage Analysis
      run: |
        echo "üìä Analyzing test coverage..."
        
        # Generate coverage report
        go tool cover -func=coverage.out > coverage-report.txt
        go tool cover -html=coverage.out -o coverage.html
        
        # Extract overall coverage percentage
        OVERALL_COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Overall coverage: ${OVERALL_COVERAGE}%"
        
        # Check against minimum threshold (relaxed for refactoring)
        OVERALL_MINIMUM=40
        
        if (( $(echo "$OVERALL_COVERAGE < $OVERALL_MINIMUM" | bc -l 2>/dev/null || echo 0) )); then
          echo "‚ùå Coverage ${OVERALL_COVERAGE}% below minimum threshold ${OVERALL_MINIMUM}%"
          exit 1
        else
          echo "‚úÖ Coverage ${OVERALL_COVERAGE}% meets minimum threshold"
        fi
        
        # Store coverage for status reporting
        echo "COVERAGE_PERCENTAGE=${OVERALL_COVERAGE}" >> $GITHUB_ENV
        
    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.run_id }}
        path: |
          coverage.out
          coverage.html
          test-output.log
        retention-days: 30

  # MCP Integration tests
  mcp-integration:
    name: MCP Integration Tests
    runs-on: ubuntu-latest
    needs: [build, quality, setup]
    if: needs.setup.outputs.test-mcp == 'true'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Setup Kind
      uses: helm/kind-action@v1
      with:
        install_only: true
        
    - name: MCP Integration Tests
      run: |
        chmod +x ./test/integration/run_tests.sh
        ./test/integration/run_tests.sh

  # Performance benchmarks for simplification
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
      
    - name: Run Benchmarks
      run: |
        echo "‚ö° Running performance benchmarks..."
        
        # Create benchmark results directory
        mkdir -p benchmark-results
        
        # Run benchmarks for key components
        go test -bench=. -benchmem -run=^$ ./pkg/mcp/... > benchmark-results/current.txt
        
        echo "üìä Benchmark results saved to benchmark-results/current.txt"
        
    - name: Upload Benchmark Results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.run_id }}
        path: benchmark-results/
        retention-days: 30

  # Simplification progress report
  simplification-report:
    name: Simplification Progress Report
    runs-on: ubuntu-latest
    needs: [quality, test, mcp-integration, performance]
    if: always()
    steps:
    - name: Generate Progress Report
      run: |
        echo "# MCP Simplification Progress Report" > progress-report.md
        echo "" >> progress-report.md
        echo "## Metrics" >> progress-report.md
        echo "- **Files**: ${{ needs.quality.outputs.file-count }} (target: ~120)" >> progress-report.md
        echo "- **Interfaces**: ${{ needs.quality.outputs.interface-count }} (target: 8-10)" >> progress-report.md
        echo "" >> progress-report.md
        echo "## Test Status" >> progress-report.md
        echo "- Build: ${{ needs.build.result }}" >> progress-report.md
        echo "- Quality: ${{ needs.quality.result }}" >> progress-report.md
        echo "- Unit Tests: ${{ needs.test.result }}" >> progress-report.md
        echo "- Integration: ${{ needs.mcp-integration.result }}" >> progress-report.md
        echo "- Performance: ${{ needs.performance.result }}" >> progress-report.md
        echo "" >> progress-report.md
        echo "## Sprint Progress" >> progress-report.md
        echo "- [ ] Sprint 0: Planning & Preparation" >> progress-report.md
        echo "- [ ] Sprint 1: Tool Registration Consolidation" >> progress-report.md
        echo "- [ ] Sprint 2: Dependency Injection Simplification" >> progress-report.md
        echo "- [ ] Sprint 3: Layer Consolidation - Part 1" >> progress-report.md
        echo "- [ ] Sprint 4: Layer Consolidation - Part 2" >> progress-report.md
        echo "- [ ] Sprint 5: AI/ML & Session Simplification" >> progress-report.md
        echo "- [ ] Sprint 6: Finalization & Rollout" >> progress-report.md
        
    - name: Upload Progress Report
      uses: actions/upload-artifact@v4
      with:
        name: simplification-progress-${{ github.run_id }}
        path: progress-report.md
        retention-days: 30

  # Final status check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [build, quality, test, mcp-integration, performance]
    if: always()
    
    steps:
    - name: Check CI Status
      run: |
        echo "üîç Checking overall CI status..."
        echo "Build: ${{ needs.build.result }}"
        echo "Quality: ${{ needs.quality.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "MCP Integration: ${{ needs.mcp-integration.result }}"
        echo "Performance: ${{ needs.performance.result }}"
        
        # Required checks
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "‚ùå Build failed"
          exit 1
        fi
        
        if [[ "${{ needs.quality.result }}" != "success" ]]; then
          echo "‚ùå Quality checks failed"
          exit 1
        fi
        
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "‚ùå Unit tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.mcp-integration.result }}" != "success" ]]; then
          echo "‚ùå MCP integration tests failed"
          exit 1
        fi
        
        # Performance is informational only
        if [[ "${{ needs.performance.result }}" != "success" ]]; then
          echo "‚ö†Ô∏è Performance benchmarks failed (non-blocking)"
        fi
        
        echo "‚úÖ All CI checks passed!"