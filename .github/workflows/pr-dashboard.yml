name: PR Dashboard

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
  pull_request_review:
    types: [submitted, edited, dismissed]
  issue_comment:
    types: [created, edited, deleted]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  update-dashboard:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'workflow_run' && github.event.workflow_run.event == 'pull_request') ||
      (github.event_name == 'pull_request_review') ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get PR number
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            let pr_number;
            if (context.eventName === 'workflow_run') {
              // Get PR from workflow run
              const workflows = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.payload.workflow_run.id
              });
              const run = workflows.data.workflow_runs[0];
              if (run.pull_requests && run.pull_requests.length > 0) {
                pr_number = run.pull_requests[0].number;
              }
            } else if (context.eventName === 'pull_request_review') {
              pr_number = context.payload.pull_request.number;
            } else if (context.eventName === 'issue_comment') {
              pr_number = context.payload.issue.number;
            }

            if (!pr_number) {
              console.log('No PR number found');
              return;
            }

            core.setOutput('pr_number', pr_number);

            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            core.setOutput('pr_title', pr.title);
            core.setOutput('pr_author', pr.user.login);
            core.setOutput('pr_base', pr.base.ref);
            core.setOutput('pr_head', pr.head.ref);

      - name: Gather workflow results
        if: steps.pr-info.outputs.pr_number
        id: gather-results
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ steps.pr-info.outputs.pr_number }};

            // Get all check runs for the PR
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ steps.pr-info.outputs.pr_head }}',
              per_page: 100
            });

            // Get workflow runs
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: '${{ steps.pr-info.outputs.pr_head }}',
              per_page: 50
            });

            // Find CI Pipeline run
            const ciPipeline = workflowRuns.workflow_runs.find(run =>
              run.name === 'CI Pipeline' && run.head_branch === '${{ steps.pr-info.outputs.pr_head }}'
            );

            // Get quality gates results if available
            let qualityGatesResults = null;
            if (ciPipeline && ciPipeline.status === 'completed') {
              try {
                const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: ciPipeline.id
                });

                const qualityArtifact = artifacts.artifacts.find(a => a.name === 'quality-gate-results');
                if (qualityArtifact) {
                  // Note: Can't download artifacts in this context, would need separate action
                  qualityGatesResults = { found: true, id: qualityArtifact.id };
                }
              } catch (e) {
                console.log('Could not fetch artifacts:', e);
              }
            }

            // Extract key metrics
            const results = {
              ci_status: ciPipeline ? ciPipeline.conclusion || ciPipeline.status : 'pending',
              ci_run_id: ciPipeline ? ciPipeline.id : null,
              ci_run_url: ciPipeline ? ciPipeline.html_url : null,
              total_checks: checkRuns.check_runs.length,
              passed_checks: checkRuns.check_runs.filter(c => c.conclusion === 'success').length,
              failed_checks: checkRuns.check_runs.filter(c => c.conclusion === 'failure').length,
              pending_checks: checkRuns.check_runs.filter(c => c.status === 'in_progress').length,
              quality_gates_available: qualityGatesResults !== null
            };

            core.setOutput('results', JSON.stringify(results));

      - name: Generate dashboard
        if: steps.pr-info.outputs.pr_number
        id: generate-dashboard
        run: |
          RESULTS='${{ steps.gather-results.outputs.results }}'
          CI_STATUS=$(echo "$RESULTS" | jq -r '.ci_status')
          CI_RUN_URL=$(echo "$RESULTS" | jq -r '.ci_run_url')
          TOTAL_CHECKS=$(echo "$RESULTS" | jq -r '.total_checks')
          PASSED_CHECKS=$(echo "$RESULTS" | jq -r '.passed_checks')
          FAILED_CHECKS=$(echo "$RESULTS" | jq -r '.failed_checks')
          PENDING_CHECKS=$(echo "$RESULTS" | jq -r '.pending_checks')

          # Determine overall status emoji
          if [ "$CI_STATUS" = "success" ]; then
            STATUS_EMOJI="✅"
          elif [ "$CI_STATUS" = "failure" ]; then
            STATUS_EMOJI="❌"
          elif [ "$CI_STATUS" = "in_progress" ] || [ "$CI_STATUS" = "pending" ]; then
            STATUS_EMOJI="🔄"
          else
            STATUS_EMOJI="⏸️"
          fi

          # Generate dashboard
          cat > dashboard.md << EOF
          ## 📊 PR Quality Dashboard

          **Last Updated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ### Overall Status: $STATUS_EMOJI $CI_STATUS

          | Metric | Value |
          |--------|-------|
          | Total Checks | $TOTAL_CHECKS |
          | ✅ Passed | $PASSED_CHECKS |
          | ❌ Failed | $FAILED_CHECKS |
          | 🔄 Pending | $PENDING_CHECKS |

          ### 🔍 Quality Gates

          See the [CI Pipeline Run]($CI_RUN_URL) for detailed quality gate results including:
          - File length compliance
          - Cyclomatic complexity
          - Import cycle detection
          - Package depth limits
          - Constructor parameter counts
          - Documentation coverage

          ### 📋 PR Information

          - **Title:** ${{ steps.pr-info.outputs.pr_title }}
          - **Author:** @${{ steps.pr-info.outputs.pr_author }}
          - **Base:** \`${{ steps.pr-info.outputs.pr_base }}\`
          - **Head:** \`${{ steps.pr-info.outputs.pr_head }}\`

          ---
          <sub>🤖 Updated automatically by GitHub Actions</sub>
          EOF

          echo "dashboard<<EOF" >> $GITHUB_OUTPUT
          cat dashboard.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update PR comment
        if: steps.pr-info.outputs.pr_number && steps.generate-dashboard.outputs.dashboard
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ steps.pr-info.outputs.pr_number }};
            const dashboard = `${{ steps.generate-dashboard.outputs.dashboard }}`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              per_page: 100
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('📊 PR Quality Dashboard')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: dashboard
              });
              console.log(`Updated comment ${botComment.id}`);
            } else {
              // Create new comment
              const { data: newComment } = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: dashboard
              });
              console.log(`Created comment ${newComment.id}`);
            }
