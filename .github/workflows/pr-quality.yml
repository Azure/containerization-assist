name: PR Quality Check

on:
  pull_request:
    types: [opened, synchronize, edited]
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  quality-check:
    name: Quality Analysis & Report
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout PR
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run quality analysis
        id: quality
        run: |
          # Run validation
          echo "🔍 Running validation..."
          npm run validate > quality.txt 2>&1 || VALIDATION_FAILED=1

          # Extract lint warnings count
          WARNINGS=$(npm run lint 2>&1 | grep -o '[0-9]\+ warning' | head -1 | grep -o '[0-9]\+' || echo "0")

          # Check if validation passed
          if [ "${VALIDATION_FAILED:-0}" -eq 0 ]; then
            STATUS="✅ PASSING"
          else
            STATUS="❌ REQUIRES FIXES"
          fi

          echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT
          echo "overall_status=$STATUS" >> $GITHUB_OUTPUT

      - name: Run test coverage
        id: coverage
        continue-on-error: true
        run: |
          npm run test:coverage > /dev/null 2>&1 || true

          if [ -f "coverage/coverage-summary.json" ]; then
            OVERALL=$(jq -r '.total.statements.pct' coverage/coverage-summary.json 2>/dev/null || echo "0")
            BRANCHES=$(jq -r '.total.branches.pct' coverage/coverage-summary.json 2>/dev/null || echo "0")
          else
            OVERALL=0
            BRANCHES=0
          fi

          echo "overall_coverage=$OVERALL" >> $GITHUB_OUTPUT
          echo "branch_coverage=$BRANCHES" >> $GITHUB_OUTPUT

      - name: Generate PR comment
        run: |
          cat > pr_comment.md << EOF
          ## 🛡️ Code Quality Report

          **Status:** ${{ steps.quality.outputs.overall_status }}

          ### 📊 Quality Metrics

          | Metric | Value |
          |--------|-------|
          | **ESLint Warnings** | ${{ steps.quality.outputs.warnings }} |
          | **Test Coverage** | ${{ steps.coverage.outputs.overall_coverage }}% |
          | **Branch Coverage** | ${{ steps.coverage.outputs.branch_coverage }}% |

          ---
          *Generated by Quality Report Bot • Run: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*
          EOF

      - name: Find and update PR comment
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e # v3
        id: find-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '## 🛡️ Code Quality Report'

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: pr_comment.md
          edit-mode: replace