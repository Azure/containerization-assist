name: Test Containerization Capability (Distributed)

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Build MCP server image first
  build-mcp-server:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build.outputs.tag }}
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          
      - name: Build MCP Server
        id: build
        run: |
          echo "Building Container Kit MCP Server..."
          go build -tags mcp -o container-kit-mcp ./cmd/mcp-server
          
          # Create a simple Dockerfile for the MCP server
          cat > Dockerfile.mcp << 'EOF'
          FROM ubuntu:22.04
          RUN apt-get update && apt-get install -y curl ca-certificates && rm -rf /var/lib/apt/lists/*
          WORKDIR /app
          COPY container-kit-mcp /app/
          RUN chmod +x /app/container-kit-mcp
          EXPOSE 8080
          CMD ["/app/container-kit-mcp", "-transport=http", "-http-addr=0.0.0.0", "-log-level=debug"]
          EOF
          
          # Build Docker image
          IMAGE_TAG="mcp-server:pr-${{ github.event.number }}"
          docker build -f Dockerfile.mcp -t $IMAGE_TAG .
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "✅ MCP Server image built: $IMAGE_TAG"

  # Test jobs that connect to the MCP server service
  test-containerization:
    needs: build-mcp-server
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    # This is the key: use the MCP server as a service
    services:
      mcp-server:
        image: ${{ needs.build-mcp-server.outputs.image-tag }}
        ports:
          - 8080:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s
    
    strategy:
      matrix:
        test-case: 
          - name: "java-servlet"
            repo: "https://github.com/GRomR1/java-servlet-hello"
      fail-fast: false
      
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        
      - name: Cache mcphost binary
        id: cache-mcphost
        uses: actions/cache@v4
        with:
          path: ~/.local/bin/mcphost
          key: mcphost-v0.26.1-${{ runner.os }}
          
      - name: Install mcphost if not cached
        if: steps.cache-mcphost.outputs.cache-hit != 'true'
        run: |
          echo "Installing mcphost v0.26.1..."
          mkdir -p ~/.local/bin
          curl -L -o mcphost.tar.gz "https://github.com/mark3labs/mcphost/releases/download/v0.26.1/mcphost_Linux_x86_64.tar.gz"
          tar -xzf mcphost.tar.gz
          chmod +x mcphost
          mv mcphost ~/.local/bin/
          rm -f mcphost.tar.gz
          echo "✅ mcphost installed"
          
      - name: Add mcphost to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Setup test environment
        run: |
          echo "Setting up test for: ${{ matrix.test-case.name }}"
          mcphost --version
          echo "✅ mcphost ready"
          
      - name: Wait for MCP Server to be ready
        run: |
          echo "Waiting for MCP Server service to be ready..."
          for i in {1..60}; do
            if curl -s http://localhost:8080/health > /dev/null 2>&1; then
              echo "✅ MCP Server is ready!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "❌ MCP Server failed to become ready"
              exit 1
            fi
            echo "Attempt $i/60: waiting for server..."
            sleep 2
          done
          
      - name: Configure mcphost
        run: |
          echo "Creating mcphost configuration for ${{ matrix.test-case.name }}..."
          mkdir -p ~/.config
          
          # Configure mcphost to connect to the MCP server service
          cat > ~/.mcphost.yml << EOF
          mcpServers:
            container-copilot:
              type: "http" 
              url: "http://localhost:8080"
          
          model: "azure:${{ secrets.AZURE_OPENAI_DEPLOYMENT_ID }}"
          provider-api-key: "${{ secrets.AZURE_OPENAI_KEY }}"
          provider-url: "${{ secrets.AZURE_OPENAI_ENDPOINT }}"
          EOF
          
          echo "=== mcphost configuration ==="
          cat ~/.mcphost.yml
          
      - name: Test server connectivity
        run: |
          echo "Testing connectivity to MCP Server..."
          curl -v http://localhost:8080/health
          echo "✅ Server connectivity confirmed"
          
      - name: Run containerization test
        id: test
        run: |
          echo "Running containerization test for: ${{ matrix.test-case.name }}"
          echo "Repository: ${{ matrix.test-case.repo }}"
          echo "Connecting to MCP Server at: http://localhost:8080"
          
          # Capture both stdout and stderr, and don't exit on failure
          set +e
          RESULT=$(timeout 300 mcphost -p "Please containerize this repository: ${{ matrix.test-case.repo }}" 2>&1)
          EXIT_CODE=$?
          set -e
          
          echo ""
          echo "=== Test Results for ${{ matrix.test-case.name }} ==="
          echo "Exit code: $EXIT_CODE"
          echo ""
          echo "=== MCPHOST OUTPUT ==="
          echo "$RESULT"
          echo "=== END OUTPUT ==="
          echo ""
          
          # Store result for analysis
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Analyze results
          if echo "$RESULT" | grep -q "Workflow completed successfully\|finalize_result.*completed\|Step 10/10.*completed\|containerization.*successful"; then
            echo "✅ Test PASSED for ${{ matrix.test-case.name }}"
          else
            echo "❌ Test FAILED for ${{ matrix.test-case.name }}"
            echo "=== Error Analysis ==="
            echo "$RESULT" | grep -i "error\|failed\|exception" | tail -5 || echo "No specific errors found"
            exit 1
          fi

  # Summary job that runs after all tests
  test-summary:
    needs: [build-mcp-server, test-containerization]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Test Summary
        run: |
          echo "=== Containerization Test Summary ==="
          echo "MCP Server build: ${{ needs.build-mcp-server.result }}"
          echo "Test matrix results: ${{ needs.test-containerization.result }}"
          
          if [ "${{ needs.test-containerization.result }}" == "success" ]; then
            echo "✅ All containerization tests PASSED"
            echo "SUCCESS: Distributed testing with shared MCP server completed successfully"
          else
            echo "❌ Some containerization tests FAILED"
            echo "FAILURE: Check individual test job logs for details"
            exit 1
          fi
