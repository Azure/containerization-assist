name: Test Containerization Capability

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test-containerization:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      AZURE_OPENAI_DEPLOYMENT_ID: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_ID }}
      AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
      AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          
      - name: Setup Docker and Kubernetes tools
        run: |
          # Verify Docker is working
          docker --version
          docker info
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
          
          # Install kind (Kubernetes in Docker)
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind version
          
      - name: Install mcphost
        run: |
          echo "Installing mcphost binary..."
          # Use specific version v0.26.1 - download the correct Linux x86_64 archive
          VERSION="v0.26.1"
          echo "Installing mcphost version: $VERSION"
          
          # Download and extract mcphost binary from tar.gz
          curl -L -o mcphost.tar.gz "https://github.com/mark3labs/mcphost/releases/download/${VERSION}/mcphost_Linux_x86_64.tar.gz"
          tar -xzf mcphost.tar.gz
          chmod +x mcphost
          sudo mv mcphost /usr/local/bin/
          rm -f mcphost.tar.gz
          mcphost --version
          echo "✅ mcphost v0.26.1 installed successfully"
          
      - name: Build MCP Server from PR
        run: |
          echo "Building Container Kit MCP Server from PR code..."
          go build -tags mcp -o container-kit-mcp ./cmd/mcp-server
          chmod +x container-kit-mcp
          ls -la container-kit-mcp
          echo "✅ MCP Server binary ready"
          
      - name: Create mcphost configuration
        run: |
          echo "Creating mcphost configuration..."
          mkdir -p ~/.config
          
          # Copy the configuration template (mcphost will handle env var substitution)
          cp .github/workflows/mcphost/config.yml ~/.mcphost.yml
          
          echo "Configuration created successfully"
          
          # Create workspace directory
          mkdir -p /tmp/test-workspace
          
          # Show the full configuration
          echo "=== mcphost configuration ==="
          cat ~/.mcphost.yml
          
      - name: Setup mcphost hooks for monitoring
        run: |
          echo "Setting up mcphost hooks for containerization monitoring..."
          
          # Install jq for JSON parsing in hooks
          sudo apt-get update && sudo apt-get install -y jq
          
          mkdir -p .mcphost
          
          # Copy hooks configuration and scripts
          cp .github/workflows/mcphost/hooks.yml .mcphost/hooks.yml
          cp .github/workflows/mcphost/track-tool-success.sh /tmp/track-tool-success.sh
          
          # Make script executable
          chmod +x /tmp/track-tool-success.sh
          
          echo "✅ mcphost hooks configured successfully"
          echo "Hook configuration:"
          cat .mcphost/hooks.yml
          
      - name: Test MCP Server and LLM connection
        run: |
          echo "Testing MCP Server and LLM connection..."
          echo "This will verify that mcphost can communicate with the MCP server and load the containerization tools"
          echo ""
          
          # Simple test to verify MCP tools are loaded
          set +e
          HELLO_RESULT=$(mcphost --stream=false --quiet -p "What containerization tools do you have access to? Please list them." 2>&1)
          HELLO_EXIT_CODE=$?
          set -e
          
          echo "=== MCP TOOLS TEST OUTPUT ==="
          echo "$HELLO_RESULT"
          echo "=== END TOOLS TEST ==="
          echo ""
          
          if [ $HELLO_EXIT_CODE -eq 0 ]; then
            echo "✅ MCP tools test PASSED - MCP server and LLM are working"
          else
            echo "❌ MCP tools test FAILED - MCP server or LLM connection issue"
            echo "Exit code: $HELLO_EXIT_CODE"
            exit 1
          fi
          echo ""
          
      - name: Run containerization test
        id: test
        run: |
          echo "Running containerization test..."
          echo "Current working directory: $(pwd)"
          echo "MCP Server will be started by mcphost via stdio"
          echo ""
          
          # Test with a simple Java servlet application using mcphost
          # mcphost will start the MCP server via stdio and communicate directly
          echo "Starting mcphost with containerization request..."
          echo "MCP server will be started automatically by mcphost via stdio"
          echo ""
          
          # Capture both stdout and stderr, and don't exit on failure
          set +e
          RESULT=$(mcphost --stream=false --max-steps 60 -p "Please containerize this repository: https://github.com/GRomR1/java-servlet-hello. If you encounter any errors during deployment, please attempt to fix them automatically or provide specific recommendations. Do not ask for user input - proceed with reasonable defaults and complete the containerization process." 2>&1)
          EXIT_CODE=$?
          set -e
          
          echo ""
          echo "Test completed with exit code: $EXIT_CODE"
          echo ""
          echo "=== MCPHOST OUTPUT ==="
          echo "$RESULT"
          echo "=== END OUTPUT ==="
          echo ""
          
          # Use a delimiter that won't conflict with the output content
          {
            echo "result<<MCPHOST_OUTPUT_EOF"
            echo "$RESULT"
            echo "MCPHOST_OUTPUT_EOF"
          } >> $GITHUB_OUTPUT
          
      - name: Analyze results and report
        run: |
          echo "=== Test Result and Logs ==="
          # Use printf to safely output the result without shell interpretation
          printf '%s\n' '${{ steps.test.outputs.result }}'
          echo ""
          
          echo "=== Hook-Based Analysis ==="
          if [ -f "/tmp/workflow-hooks.log" ]; then
            echo "Hook execution log found. Analyzing tool success status..."
            cat /tmp/workflow-hooks.log
            echo ""
            
            # Count successful tools from hook logs
            SUCCESSFUL_TOOLS=$(grep -c "✅ Tool completed successfully" /tmp/workflow-hooks.log || echo "0")
            FAILED_TOOLS=$(grep -c "❌ Tool failed" /tmp/workflow-hooks.log || echo "0")
            
            echo "=== Hook Analysis Summary ==="
            echo "Successful tools: $SUCCESSFUL_TOOLS"
            echo "Failed tools: $FAILED_TOOLS"
            echo ""
            
            # Determine success based on hook evidence
            SUCCESS=false
            
            # Check for final milestone (highest priority)
            if grep -q "🎉 SUCCESS: Application fully containerized and deployed!" /tmp/workflow-hooks.log; then
              SUCCESS=true
              SUCCESS_REASON="Final success milestone reached"

            
            if [ "$SUCCESS" = "true" ]; then
              echo "✅ Containerization test PASSED (Hook Verification)"
              echo "SUCCESS: $SUCCESS_REASON"
              echo ""
              echo "=== Completed Milestones ==="
              grep "MILESTONE:" /tmp/workflow-hooks.log | sed 's/.*MILESTONE: /- /' || echo "No milestone details found"
              exit 0
            else
              echo "❌ Containerization test FAILED (Hook Verification)"
              echo "FAILURE: Hook logs show incomplete workflow - $SUCCESSFUL_TOOLS successful, $FAILED_TOOLS failed"
              if [ "$FAILED_TOOLS" -gt 0 ]; then
                echo ""
                echo "=== Failed Tools ==="
                grep "❌ Tool failed" /tmp/workflow-hooks.log || echo "No failed tool details found"
              fi
              exit 1
            fi
          else
            echo "❌ CRITICAL: No hook logs found - hooks are not working!"
            echo "FAILURE: Hook-based verification is required but hooks did not execute"
            echo ""
            echo "This indicates a problem with:"
            echo "- mcphost hooks configuration"
            echo "- Hook script execution permissions"
            echo "- PostToolUse hook not being triggered"
            echo ""
            echo "Please check the hook setup and mcphost configuration."
            exit 1
          fi
          
      - name: Show generated artifacts and deployment status
        if: always()
        run: |
          echo "=== POST-TEST ARTIFACTS AND STATUS ==="
          echo ""
          
          echo "=== Workflow Hook Logs ==="
          if [ -f "/tmp/workflow-hooks.log" ]; then
            echo "Hook execution log:"
            cat /tmp/workflow-hooks.log
            echo ""
            echo "Hook Summary:"
            echo "- Successful tools: $(grep -c "✅ Tool completed successfully" /tmp/workflow-hooks.log || echo "0")"
            echo "- Failed tools: $(grep -c "❌ Tool failed" /tmp/workflow-hooks.log || echo "0")"
            echo "- Milestones reached: $(grep -c "MILESTONE:" /tmp/workflow-hooks.log || echo "0")"
            echo "- Final success: $(grep -c "🎉 SUCCESS:" /tmp/workflow-hooks.log || echo "0")"
          else
            echo "No hook logs found"
          fi
          echo ""
          
          echo "=== Kubernetes Pods Status ==="
          if command -v kubectl &> /dev/null; then
            # Try to get pods from default namespace and any detected namespaces
            echo "Checking pods in default namespace:"
            kubectl get pods -o wide 2>/dev/null || echo "No pods found or kubectl not configured"
            echo ""
            
            # Check for any java-servlet or app-related pods in all namespaces
            echo "Searching for application pods across all namespaces:"
            kubectl get pods --all-namespaces | grep -i "java\|servlet\|app" 2>/dev/null || echo "No application pods found"
            echo ""
            
            # Show services as well
            echo "Services:"
            kubectl get services -o wide 2>/dev/null || echo "No services found"
            echo ""
          else
            echo "kubectl not available"
          fi
          
          echo "=== Generated Dockerfile ==="
          # Look for Dockerfile in common locations
          if [ -f "Dockerfile" ]; then
            echo "Found Dockerfile in root:"
            cat Dockerfile
          elif [ -f "/tmp/test-workspace/Dockerfile" ]; then
            echo "Found Dockerfile in test workspace:"
            cat /tmp/test-workspace/Dockerfile
          elif find /tmp -name "Dockerfile" -type f 2>/dev/null | head -1 | xargs test -f; then
            DOCKERFILE_PATH=$(find /tmp -name "Dockerfile" -type f 2>/dev/null | head -1)
            echo "Found Dockerfile at: $DOCKERFILE_PATH"
            cat "$DOCKERFILE_PATH"
          else
            echo "No Dockerfile found"
          fi
          echo ""
          
          echo "=== Generated Kubernetes Manifests ==="
          # Look for manifest files in common locations
          MANIFEST_FOUND=false
          for pattern in "*.yaml" "*.yml" "*manifest*" "*deployment*" "*service*"; do
            if find /tmp -name "$pattern" -type f 2>/dev/null | grep -v mcphost-config | head -5; then
              MANIFEST_FOUND=true
              echo ""
              find /tmp -name "$pattern" -type f 2>/dev/null | grep -v mcphost-config | head -5 | while read -r manifest; do
                echo "=== Manifest: $manifest ==="
                cat "$manifest"
                echo ""
              done
            fi
          done
          
          if [ "$MANIFEST_FOUND" = false ]; then
            echo "No Kubernetes manifest files found"
          fi
          
          echo "=== Docker Images ==="
          echo "Available Docker images:"
          docker images | head -10 || echo "Unable to list Docker images"
          echo ""
          
          echo "=== Working Directory Contents ==="
          ls -la
          echo ""
          
          echo "=== Temp Directory Structure ==="
          find /tmp -type f -name "*.yaml" -o -name "*.yml" -o -name "Dockerfile" 2>/dev/null | head -10 || echo "No relevant files found in temp"
