name: Test Containerization Capability

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test-containerization:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          
      - name: Setup Docker and Kubernetes tools
        run: |
          # Verify Docker is working
          docker --version
          docker info
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
          
          # Install kind (Kubernetes in Docker)
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind version
          
      - name: Install mcphost
        run: |
          echo "Installing mcphost binary..."
          # Use specific version v0.26.1 - download the correct Linux x86_64 archive
          VERSION="v0.26.1"
          echo "Installing mcphost version: $VERSION"
          
          # Download and extract mcphost binary from tar.gz
          curl -L -o mcphost.tar.gz "https://github.com/mark3labs/mcphost/releases/download/${VERSION}/mcphost_Linux_x86_64.tar.gz"
          tar -xzf mcphost.tar.gz
          chmod +x mcphost
          sudo mv mcphost /usr/local/bin/
          rm -f mcphost.tar.gz
          mcphost --version
          echo "✅ mcphost v0.26.1 installed successfully"
          
      # - name: Build MCP Server from PR
      #   run: |
      #     echo "Building Container Kit MCP Server from PR code..."
      #     go build -tags mcp -o container-kit-mcp ./cmd/mcp-server
      #     chmod +x container-kit-mcp
      #     ls -la container-kit-mcp
      
      - name: Download MCP Server Binary
        uses: actions/download-artifact@v4
        with:
          name: container-kit-mcp-binary
          path: ./
        continue-on-error: true
        
      - name: Build and Upload MCP Server (first time only)
        id: build-mcp
        if: ${{ hashFiles('./container-kit-mcp') == '' }}
        run: |
          echo "MCP binary not found, building and uploading for future runs..."
          go build -tags mcp -o container-kit-mcp ./cmd/mcp-server
          chmod +x container-kit-mcp
          ls -la container-kit-mcp
          echo "binary-built=true" >> $GITHUB_OUTPUT
          
      - name: Upload MCP Server Binary for future runs
        if: ${{ steps.build-mcp.outputs.binary-built == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: container-kit-mcp-binary
          path: ./container-kit-mcp
          retention-days: 1
          
      - name: Verify MCP Server binary
        run: |
          echo "Verifying MCP Server binary..."
          ls -la container-kit-mcp
          echo "✅ MCP Server binary ready"
          
          # Quick test that the binary can start (without keeping it running)
          echo "Testing binary can execute..."
          ./container-kit-mcp --help 2>/dev/null || echo "Help command not available, but binary is executable"
          
      - name: Create mcphost configuration
        run: |
          echo "Creating mcphost configuration..."
          mkdir -p ~/.config
          
          # Configure mcphost to connect to MCP server via HTTP
          cat > ~/.mcphost.yml << EOF
          mcpServers:
            container-copilot:
              type: "http"
              url: "http://localhost:9191"
          
          model: "azure:${{ secrets.AZURE_OPENAI_DEPLOYMENT_ID }}"
          provider-api-key: "${{ secrets.AZURE_OPENAI_KEY }}"
          provider-url: "${{ secrets.AZURE_OPENAI_ENDPOINT }}"
          EOF
          echo "Configuration created successfully"
          
          # Create workspace directory
          mkdir -p /tmp/test-workspace
          
          # Show the full configuration
          echo "=== mcphost configuration ==="
          cat ~/.mcphost.yml
          
      - name: Start MCP Server in HTTP mode
        run: |
          echo "Starting MCP Server in HTTP mode..."
          
          # Get the absolute path to the MCP server binary
          BINARY_PATH=$(realpath ./container-kit-mcp)
          echo "Using MCP server binary at: $BINARY_PATH"
          
          # Start MCP server in HTTP mode as background process
          export CONTAINER_KIT_LOG_LEVEL=debug
          export CONTAINER_KIT_WORKSPACE_DIR=/tmp/test-workspace
          export MCP_LOG_LEVEL=debug
          export MCP_SERVER_PORT=9191
          export CONTAINER_KIT_HTTP_PORT=9191
          
          echo "Starting server with environment:"
          echo "  CONTAINER_KIT_LOG_LEVEL=$CONTAINER_KIT_LOG_LEVEL"
          echo "  CONTAINER_KIT_WORKSPACE_DIR=$CONTAINER_KIT_WORKSPACE_DIR"
          echo "  MCP_LOG_LEVEL=$MCP_LOG_LEVEL"
          echo "  MCP_SERVER_PORT=$MCP_SERVER_PORT"
          echo "  CONTAINER_KIT_HTTP_PORT=$CONTAINER_KIT_HTTP_PORT"
          echo ""
          
          # Start server and capture PID - using explicit command line flag
          $BINARY_PATH -transport=http -http-port=9191 > mcp-server.log 2>&1 &
          SERVER_PID=$!
          echo "MCP Server started with PID: $SERVER_PID"
          echo $SERVER_PID > mcp-server.pid
          
          # Wait for server to start
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:9191/healthz > /dev/null 2>&1; then
              echo "✅ MCP Server is ready on port 9191"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Server failed to start within 30 seconds"
              cat mcp-server.log || echo "No server log available"
              exit 1
            fi
            sleep 1
          done
          
      - name: Run containerization test
        id: test
        run: |
          echo "Running containerization test..."
          echo "Current working directory: $(pwd)"
          echo "MCP Server should be running on http://localhost:9191"
          
          # Verify server is still responding
          if ! curl -s http://localhost:9191/healthz > /dev/null; then
            echo "❌ MCP Server is not responding"
            echo "=== Server Log ==="
            cat mcp-server.log || echo "No server log available"
            exit 1
          fi
          echo "✅ MCP Server is responding"
          echo ""
          
          # Start streaming server logs in background during the test
          echo "=== Starting MCP Server Log Stream ==="
          tail -f mcp-server.log &
          TAIL_PID=$!
          echo $TAIL_PID > tail.pid
          echo "Log streaming started with PID: $TAIL_PID"
          echo ""
          
          # Give a moment for log streaming to start
          sleep 1
          
          # Test with a simple Java servlet application using mcphost
          # mcphost will connect to the running HTTP server
          echo "Starting mcphost with containerization request..."
          echo "=== Server logs will appear below while mcphost runs ==="
          echo ""
          
          # Capture both stdout and stderr, and don't exit on failure
          set +e
          RESULT=$(mcphost -p "Please containerize this repository: https://github.com/GRomR1/java-servlet-hello" 2>&1)
          EXIT_CODE=$?
          set -e
          
          # Stop log streaming now that the test is complete
          if [ -f tail.pid ]; then
            TAIL_PID=$(cat tail.pid)
            kill $TAIL_PID 2>/dev/null || echo "Log streaming already stopped"
            rm -f tail.pid
          fi
          
          echo ""
          echo "=== Log streaming stopped ==="
          echo "Test completed with exit code: $EXIT_CODE"
          echo ""
          echo "=== MCPHOST OUTPUT ==="
          echo "$RESULT"
          echo "=== END OUTPUT ==="
          echo ""
          
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Stop MCP Server
        if: always()
        run: |
          echo "Stopping MCP Server..."
          
          # Stop any remaining log streaming (in case of errors)
          if [ -f tail.pid ]; then
            TAIL_PID=$(cat tail.pid)
            echo "Stopping any remaining log streaming (PID: $TAIL_PID)..."
            kill $TAIL_PID 2>/dev/null || echo "Log streaming already stopped"
            rm -f tail.pid
          fi
          
          # Stop MCP Server
          if [ -f mcp-server.pid ]; then
            SERVER_PID=$(cat mcp-server.pid)
            echo "Stopping MCP Server (PID: $SERVER_PID)..."
            kill $SERVER_PID 2>/dev/null || echo "Server already stopped"
            
            # Wait for graceful shutdown
            sleep 2
            
            # Force kill if still running
            if kill -0 $SERVER_PID 2>/dev/null; then
              echo "Force killing server..."
              kill -9 $SERVER_PID 2>/dev/null || true
            fi
            
            rm -f mcp-server.pid
          fi
          
          echo "=== Final Server Log ==="
          cat mcp-server.log 2>/dev/null || echo "No server log available"
          echo "=== End Server Log ==="
          
          echo "Cleanup completed"
          
      - name: Analyze results and report
        run: |
          echo "=== Test Result and Logs ==="
          echo "${{ steps.test.outputs.result }}"
          echo ""
          
          # Parse output for success indicators
          echo "=== Analysis ==="
          TEST_OUTPUT="${{ steps.test.outputs.result }}"
          if echo "$TEST_OUTPUT" | grep -q "Workflow completed successfully" || \
             echo "$TEST_OUTPUT" | grep -q "finalize_result.*completed" || \
             echo "$TEST_OUTPUT" | grep -q "health_probe.*completed" || \
             echo "$TEST_OUTPUT" | grep -q "Step 10/10.*completed" || \
             echo "$TEST_OUTPUT" | grep -q "containerization.*successful"; then
            echo "✅ Containerization test PASSED"
            echo "SUCCESS: The containerization workflow completed successfully"
            exit 0
          else
            echo "❌ Containerization test FAILED"
            echo ""
            echo "=== Error Analysis ==="
            echo "$TEST_OUTPUT" | grep -i "error\|failed\|exception" | tail -10 || echo "No specific errors found in output"
            echo ""
            echo "FAILURE: The containerization workflow did not complete successfully"
            exit 1
          fi
