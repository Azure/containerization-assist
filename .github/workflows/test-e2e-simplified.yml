name: E2E Containerization Test (Simplified)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      repo:
        description: 'Repository URL to containerize'
        required: false
        type: string
        default: 'https://github.com/konveyor-ecosystem/coolstore'

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      AZURE_OPENAI_DEPLOYMENT_ID: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_ID }}
      AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
      AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      CONTAINERIZE_REPO: ${{ github.event_name == 'workflow_dispatch' && inputs.repo || 'https://github.com/konveyor-ecosystem/coolstore' }}
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          
      - name: Setup Environment
        run: |
          # Verify Docker is working
          docker --version
          docker info
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
          
          # Install kind (Kubernetes in Docker)
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind version
          
          # Install mcphost
          VERSION="v0.29.0"
          curl -L -o mcphost.tar.gz "https://github.com/mark3labs/mcphost/releases/download/${VERSION}/mcphost_Linux_x86_64.tar.gz"
          tar -xzf mcphost.tar.gz
          chmod +x mcphost
          sudo mv mcphost /usr/local/bin/
          rm -f mcphost.tar.gz
          mcphost --version
          
      - name: Build MCP Server
        run: |
          echo "Building Container Kit MCP Server from PR code..."
          go build -tags mcp -o container-kit-mcp ./cmd/mcp-server
          chmod +x container-kit-mcp
          ls -la container-kit-mcp
          
      - name: Configure mcphost
        run: |
          mkdir -p ~/.config/mcphost
          cat > ~/.mcphost.yml << 'EOF'
          # MCP Host Configuration
          version: "1"
          default-model: azure
          models:
            azure:
              type: "azure"
              deployment: "${{ env.AZURE_OPENAI_DEPLOYMENT_ID }}"
              endpoint: "${{ env.AZURE_OPENAI_ENDPOINT }}"
              api-key: "${{ env.AZURE_OPENAI_KEY }}"
              api-version: "2024-08-01-preview"
          servers:
            container-kit:
              command: "./container-kit-mcp"
              args: []
              env:
                AZURE_OPENAI_DEPLOYMENT_ID: "${{ env.AZURE_OPENAI_DEPLOYMENT_ID }}"
                AZURE_OPENAI_KEY: "${{ env.AZURE_OPENAI_KEY }}"
                AZURE_OPENAI_ENDPOINT: "${{ env.AZURE_OPENAI_ENDPOINT }}"
          EOF
          
          # Create workspace and copy MCP binary
          mkdir -p /tmp/test-workspace
          cp ./container-kit-mcp /tmp/test-workspace/
          
      - name: Execute Containerization via MCP
        run: |
          echo "Starting containerization of: $CONTAINERIZE_REPO"
          cd /tmp/test-workspace
          
          # Execute containerization - don't parse output, just run it
          timeout 600s mcphost --quiet --stream=false -p "Please containerize this repository: ${CONTAINERIZE_REPO}. This is an automated test - do NOT ask for user input." > /tmp/mcp.log 2>&1 || true
          
          # Save log for debugging but don't parse it
          echo "Containerization process completed"
          
      - name: Verify Docker Image Exists
        id: verify-image
        run: |
          echo "=== Checking for Docker images ==="
          
          # List all images for debugging
          docker images
          
          # Look for the containerized image
          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(coolstore|webapp|java)" | grep -v "<none>" | head -1)
          
          if [ -z "$IMAGE_NAME" ]; then
            echo "❌ FAIL: No Docker image found"
            echo "Available images:"
            docker images
            exit 1
          fi
          
          echo "✅ SUCCESS: Found Docker image: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT
          
      - name: Test Container Locally
        run: |
          echo "=== Testing container locally ==="
          
          # Run the container
          docker run -d -p 8080:8080 --name test-app $IMAGE_NAME || {
            echo "Failed to run container, trying with different port mapping"
            docker run -d -p 8080:3000 --name test-app $IMAGE_NAME || {
              echo "Failed again, running without port mapping to check logs"
              docker run -d --name test-app $IMAGE_NAME
            }
          }
          
          # Give it time to start
          sleep 10
          
          # Check if container is running
          if ! docker ps | grep test-app; then
            echo "Container failed to start. Logs:"
            docker logs test-app
            exit 1
          fi
          
          # Try to access the application
          for port in 8080 3000 5000 80; do
            if curl -f -m 5 http://localhost:${port}/health 2>/dev/null || curl -f -m 5 http://localhost:${port}/ 2>/dev/null; then
              echo "✅ SUCCESS: Container responds on port $port"
              break
            fi
          done
          
          # Even if we can't reach it via HTTP, container running is still a success
          echo "Container is running successfully"
          
      - name: Verify Kubernetes Resources Created
        run: |
          echo "=== Checking Kubernetes resources ==="
          
          # Check if kind cluster exists
          if ! kind get clusters | grep -q .; then
            echo "No kind cluster found - checking for manifest files instead"
            
            # Look for K8s manifest files
            find /tmp -name "*.yaml" -o -name "*.yml" | grep -E "(deployment|service|manifest)" | head -5
            
            if find /tmp -name "*.yaml" -o -name "*.yml" | grep -q .; then
              echo "✅ SUCCESS: Found Kubernetes manifest files"
            else
              echo "⚠️  WARNING: No Kubernetes manifests found"
            fi
          else
            # Cluster exists, check resources
            echo "Kind cluster found, checking for deployed resources..."
            
            kubectl get all -A
            
            if kubectl get pods -A | grep -E "(coolstore|webapp|app)" | grep -v "kube-system"; then
              echo "✅ SUCCESS: Found application pods"
            else
              echo "⚠️  WARNING: No application pods found"
            fi
            
            if kubectl get services -A | grep -E "(coolstore|webapp|app)" | grep -v "kube-system"; then
              echo "✅ SUCCESS: Found application services"
            else
              echo "⚠️  WARNING: No application services found"
            fi
          fi
          
      - name: Verify Generated Artifacts
        run: |
          echo "=== Checking for generated artifacts ==="
          
          # Look for Dockerfile
          DOCKERFILE=$(find /tmp -name "Dockerfile" -type f 2>/dev/null | head -1)
          if [ -n "$DOCKERFILE" ]; then
            echo "✅ SUCCESS: Found Dockerfile at: $DOCKERFILE"
            echo "Content preview:"
            head -20 "$DOCKERFILE"
          else
            echo "⚠️  WARNING: No Dockerfile found"
          fi
          
          # Look for Kubernetes manifests
          MANIFESTS=$(find /tmp -name "*.yaml" -o -name "*.yml" 2>/dev/null | grep -E "(deployment|service|manifest)" | head -5)
          if [ -n "$MANIFESTS" ]; then
            echo "✅ SUCCESS: Found Kubernetes manifests:"
            echo "$MANIFESTS"
          else
            echo "⚠️  WARNING: No Kubernetes manifests found"
          fi
          
          # Look for docker-compose files
          COMPOSE=$(find /tmp -name "docker-compose*.yml" -o -name "docker-compose*.yaml" 2>/dev/null | head -1)
          if [ -n "$COMPOSE" ]; then
            echo "✅ SUCCESS: Found docker-compose file at: $COMPOSE"
          fi
          
      - name: Verify Security Scan Completed
        run: |
          echo "=== Checking for security scan artifacts ==="
          
          # Look for Trivy scan results
          TRIVY_RESULTS=$(find /tmp -name "*trivy*.json" -o -name "*vulnerability*.json" 2>/dev/null | head -1)
          if [ -n "$TRIVY_RESULTS" ]; then
            echo "✅ SUCCESS: Found Trivy scan results at: $TRIVY_RESULTS"
          else
            echo "ℹ️  INFO: No Trivy scan results found (may be disabled)"
          fi
          
          # Look for Hadolint results
          HADOLINT_RESULTS=$(find /tmp -name "*hadolint*.json" -o -name "*lint*.json" 2>/dev/null | head -1)
          if [ -n "$HADOLINT_RESULTS" ]; then
            echo "✅ SUCCESS: Found Hadolint results at: $HADOLINT_RESULTS"
          else
            echo "ℹ️  INFO: No Hadolint results found (may be disabled)"
          fi
          
      - name: Final E2E Validation
        id: validation
        run: |
          echo "=== Final E2E Test Validation ==="
          
          TESTS_PASSED=0
          TESTS_FAILED=0
          
          # Check 1: Docker image exists
          if docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(coolstore|webapp|java)" | grep -v "<none>" > /dev/null; then
            echo "✅ Docker image creation: PASS"
            ((TESTS_PASSED++))
          else
            echo "❌ Docker image creation: FAIL"
            ((TESTS_FAILED++))
          fi
          
          # Check 2: Container runs
          if docker ps -a | grep test-app > /dev/null; then
            echo "✅ Container execution: PASS"
            ((TESTS_PASSED++))
          else
            echo "❌ Container execution: FAIL"
            ((TESTS_FAILED++))
          fi
          
          # Check 3: Dockerfile exists
          if find /tmp -name "Dockerfile" -type f 2>/dev/null | grep -q .; then
            echo "✅ Dockerfile generation: PASS"
            ((TESTS_PASSED++))
          else
            echo "❌ Dockerfile generation: FAIL"
            ((TESTS_FAILED++))
          fi
          
          # Check 4: Kubernetes manifests exist
          if find /tmp -name "*.yaml" -o -name "*.yml" 2>/dev/null | grep -E "(deployment|service|manifest)" | grep -q .; then
            echo "✅ Kubernetes manifest generation: PASS"
            ((TESTS_PASSED++))
          else
            echo "❌ Kubernetes manifest generation: FAIL"
            ((TESTS_FAILED++))
          fi
          
          # Summary
          echo ""
          echo "=== TEST SUMMARY ==="
          echo "Tests Passed: $TESTS_PASSED"
          echo "Tests Failed: $TESTS_FAILED"
          echo "Total Tests: $((TESTS_PASSED + TESTS_FAILED))"
          
          # Set outputs
          echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
          echo "tests_failed=$TESTS_FAILED" >> $GITHUB_OUTPUT
          
          # Fail if any critical test failed
          if [ $TESTS_FAILED -gt 0 ]; then
            echo ""
            echo "❌ E2E TEST FAILED: One or more critical checks failed"
            exit 1
          else
            echo ""
            echo "✅ E2E TEST PASSED: All critical checks passed"
          fi
          
      - name: Collect E2E Test Results
        if: always()
        run: |
          mkdir -p e2e-artifacts
          
          # Copy MCP log
          cp /tmp/mcp.log e2e-artifacts/ 2>/dev/null || echo "No MCP log found"
          
          # Copy Dockerfile if exists
          find /tmp -name "Dockerfile" -type f -exec cp {} e2e-artifacts/ \; 2>/dev/null || echo "No Dockerfile found"
          
          # Copy Kubernetes manifests
          find /tmp -name "*.yaml" -o -name "*.yml" | grep -E "(deployment|service|manifest)" | xargs -I {} cp {} e2e-artifacts/ 2>/dev/null || echo "No manifests found"
          
          # Copy scan results
          find /tmp -name "*trivy*.json" -o -name "*vulnerability*.json" -o -name "*hadolint*.json" | xargs -I {} cp {} e2e-artifacts/ 2>/dev/null || echo "No scan results found"
          
          # Docker information
          docker images > e2e-artifacts/docker-images.txt
          docker ps -a > e2e-artifacts/docker-containers.txt
          
          # List artifacts
          echo "=== Collected Artifacts ==="
          ls -la e2e-artifacts/
          
      - name: Upload E2E Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-artifacts
          path: e2e-artifacts/
          retention-days: 7
          
      - name: Write Job Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # E2E Containerization Test Results
          
          ## Test Summary
          - **Tests Passed**: ${{ steps.validation.outputs.tests_passed || '0' }}
          - **Tests Failed**: ${{ steps.validation.outputs.tests_failed || '0' }}
          - **Repository Tested**: ${{ env.CONTAINERIZE_REPO }}
          
          ## Key Outcomes
          - Docker Image: ${{ env.IMAGE_NAME || 'Not found' }}
          - Container Status: ${{ steps.verify-image.outcome == 'success' && '✅ Created' || '❌ Failed' }}
          - Kubernetes Manifests: Generated
          
          ## Artifacts
          Check the uploaded artifacts for:
          - MCP execution log
          - Generated Dockerfile
          - Kubernetes manifests
          - Security scan results
          
          EOF
