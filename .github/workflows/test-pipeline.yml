name: Test Pipeline

on:
  push:
    branches: [ main, develop, 'feat/**', 'fix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Single test job with all essential validations
  test:
    name: Tests & Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore build cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            dist
            dist-cjs
            .tsbuildinfo
            node_modules/.cache
          key: build-${{ runner.os }}-${{ hashFiles('src/**/*.ts', 'tsconfig*.json', 'package-lock.json') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Install OPA CLI
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static
          chmod +x opa
          mkdir -p node_modules/.bin
          mv opa node_modules/.bin/opa
          node_modules/.bin/opa version

      - name: Build project
        run: npm run build

      - name: Validate examples compile
        run: node scripts/validate-examples.js

      - name: Run lint and cache output
        run: npm run lint 2>&1 | tee eslint-output.txt || true

      - name: Run tests with coverage
        run: npm run test:coverage -- --passWithNoTests
        env:
          DOCKER_AVAILABLE: true

      - name: Extract coverage metrics
        continue-on-error: true
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            OVERALL=$(jq -r '.total.statements.pct // "N/A"' coverage/coverage-summary.json)
            BRANCHES=$(jq -r '.total.branches.pct // "N/A"' coverage/coverage-summary.json)
            echo "✅ Coverage: ${OVERALL}% statements, ${BRANCHES}% branches"

            # Save for summary
            echo "COVERAGE_OVERALL=${OVERALL}" >> $GITHUB_ENV
            echo "COVERAGE_BRANCHES=${BRANCHES}" >> $GITHUB_ENV
          else
            echo "⚠️ Coverage data not available"
            echo "COVERAGE_OVERALL=N/A" >> $GITHUB_ENV
            echo "COVERAGE_BRANCHES=N/A" >> $GITHUB_ENV
          fi

      - name: Verify build artifacts
        run: |
          test -f dist/src/index.js || { echo "❌ ESM index.js missing"; exit 1; }
          test -f dist/src/index.d.ts || { echo "❌ ESM index.d.ts missing"; exit 1; }
          test -x dist/src/cli/cli.js || { echo "❌ CLI not executable"; exit 1; }
          test -f dist-cjs/src/index.js || { echo "❌ CJS index.js missing"; exit 1; }
          test -f dist-cjs/src/index.d.ts || { echo "❌ CJS index.d.ts missing"; exit 1; }

          if grep -r "from ['\"]\.\.\/[^'\"]*['\"]" dist/src --include="*.js" | grep -v "\.js['\"]"; then
            echo "❌ Found ESM imports without .js extensions"
            exit 1
          fi

          echo "✅ Build artifacts verified"

      - name: Run quality gates
        run: |
          UPDATE_BASELINES=true npm run quality:gates 2>&1 | tee quality-gates.txt || true

          # Save gate status for summary
          if grep -q "✅" quality-gates.txt; then
            echo "QUALITY_STATUS=✅ Passed" >> $GITHUB_ENV
          elif grep -q "⚠️" quality-gates.txt; then
            echo "QUALITY_STATUS=⚠️ Warning" >> $GITHUB_ENV
          else
            echo "QUALITY_STATUS=❌ Failed" >> $GITHUB_ENV
          fi

      - name: Generate workflow summary
        if: always()
        run: |
          echo "# 🛡️ Test Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Quality Gates** | ${QUALITY_STATUS:-⚠️ Unknown} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Coverage (Statements)** | ${COVERAGE_OVERALL:-N/A}% |" >> $GITHUB_STEP_SUMMARY
          echo "| **Coverage (Branches)** | ${COVERAGE_BRANCHES:-N/A}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "quality-gates.txt" ]; then
            echo "## 📋 Quality Gates Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat quality-gates.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Artifacts:** Download \`quality-gates.txt\` for full quality report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Coverage:** Download \`coverage/\` for detailed HTML report" >> $GITHUB_STEP_SUMMARY

      # Upload all artifacts in single step
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: build-and-quality-${{ github.run_id }}
          path: |
            dist/
            dist-cjs/
            quality-gates.txt
            eslint-output.txt
            coverage/
          retention-days: 7

  # Optional security scan (reuses build from test job)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: build-and-quality-${{ github.run_id }}
          path: .

      - name: Install dependencies (for audit)
        run: npm ci

      - name: Dependency audit
        run: npm audit --audit-level moderate || true

      - name: CodeQL Analysis
        uses: github/codeql-action/init@f443b600d91635bebf5b0d9ebc620189c0d6fba5 # v3
        with:
          languages: typescript
          queries: security-and-quality
          config-file: ./.github/workflows/codeql/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@f443b600d91635bebf5b0d9ebc620189c0d6fba5 # v3