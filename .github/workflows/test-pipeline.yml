name: Test Pipeline

on:
  push:
    branches: [ main, develop, 'feat/**', 'fix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Single test job with all essential validations
  test:
    name: Tests & Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore build cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            dist
            dist-cjs
            .tsbuildinfo
          key: build-${{ runner.os }}-${{ hashFiles('src/**/*.ts', 'tsconfig*.json', 'package-lock.json') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run validation pipeline
        id: validation
        run: npm run validate
        env:
          DOCKER_AVAILABLE: true

      - name: Run all tests
        id: npmtest
        run: npm test

      - name: Generate coverage report
        id: coverage-gen
        continue-on-error: true
        run: npm run test:coverage -- --passWithNoTests 2>/dev/null || npm test -- --coverage --passWithNoTests

      - name: Verify build artifacts
        run: |
          echo "Verifying ESM build artifacts..."
          test -f dist/src/index.js || { echo "❌ ESM index.js missing"; exit 1; }
          test -f dist/src/index.d.ts || { echo "❌ ESM index.d.ts missing"; exit 1; }
          test -x dist/src/cli/cli.js || { echo "❌ CLI not executable"; exit 1; }

          echo "Verifying CJS build artifacts..."
          test -f dist-cjs/src/index.js || { echo "❌ CJS index.js missing"; exit 1; }
          test -f dist-cjs/src/index.d.ts || { echo "❌ CJS index.d.ts missing"; exit 1; }

          echo "Verifying ESM imports have .js extensions..."
          if grep -r "from ['\"]\.\.\/[^'\"]*['\"]" dist/src --include="*.js" | grep -v "\.js['\"]"; then
            echo "❌ Found ESM imports without .js extensions"
            exit 1
          fi

          echo "✅ Build artifact verification passed"

      - name: Run quality gates
        id: quality
        run: |
          # Run quality gates (non-blocking for reporting) with baseline updates
          UPDATE_BASELINES=true npm run quality:gates > quality-gates.txt 2>&1 || true

          # Extract metrics from quality-gates.txt output
          # Parse summary section for current values: "ESLint Warnings: 123 (threshold: 400)"
          CURRENT_WARNINGS=$(grep "^ESLint Warnings:" quality-gates.txt | sed 's/ESLint Warnings: \([0-9][0-9]*\).*/\1/' | head -1 | tr -cd '0-9' || echo "0")
          UNUSED_EXPORTS=$(grep "^Unused Exports:" quality-gates.txt | sed 's/Unused Exports: \([0-9][0-9]*\).*/\1/' | head -1 | tr -cd '0-9' || echo "0")

          # Extract baseline and reduction from gate output messages
          # Look for patterns like: "Warnings reduced by 10 (5.0%) - 100 ≤ 110" or "Warning count maintained at baseline (100)"
          BASELINE_WARNINGS=$(grep -E "Warnings reduced by|Warning count maintained|Warning count increased by" quality-gates.txt | sed -n 's/.*≤ \([0-9][0-9]*\).*/\1/p; s/.*maintained at baseline (\([0-9][0-9]*\)).*/\1/p; s/.*> \([0-9][0-9]*\).*/\1/p' | head -1 | tr -cd '0-9' || echo "$CURRENT_WARNINGS")
          REDUCTION=$(grep "Warnings reduced by" quality-gates.txt | sed 's/.*reduced by \([0-9][0-9]*\).*/\1/' | head -1 | tr -cd '0-9' || echo "0")
          PERCENTAGE=$(grep "Warnings reduced by" quality-gates.txt | sed 's/.*(\([0-9][0-9]*\.[0-9][0-9]*\)%).*/\1/' | head -1 | tr -cd '0-9.' || echo "0")

          # Dead code baseline and reduction
          DEADCODE_BASELINE=$(grep -E "Unused exports reduced by|Unused exports maintained|Unused exports increased by" quality-gates.txt | sed -n 's/.*≤ \([0-9][0-9]*\).*/\1/p; s/.*maintained at baseline (\([0-9][0-9]*\)).*/\1/p; s/.*> \([0-9][0-9]*\).*/\1/p' | head -1 | tr -cd '0-9' || echo "$UNUSED_EXPORTS")
          DEADCODE_REDUCTION=$(grep "Unused exports reduced by" quality-gates.txt | sed 's/.*reduced by \([0-9][0-9]*\).*/\1/' | head -1 | tr -cd '0-9' || echo "0")

          # Quality gates status - count exact matches excluding summary messages
          GATES_PASSED=$(grep "✅ PASS:" quality-gates.txt 2>/dev/null | grep -v "All quality gates passed" | wc -l | tr -cd '0-9' || echo "0")
          GATES_FAILED=$(grep "❌ FAIL:" quality-gates.txt 2>/dev/null | grep -v "Some quality gates failed" | wc -l | tr -cd '0-9' || echo "0")
          GATES_WARNINGS=$(grep "⚠️  WARN:" quality-gates.txt 2>/dev/null | grep -v "^⚠️  WARN:" | wc -l | tr -cd '0-9' || echo "0")

          # Validate all values are proper integers
          for var in CURRENT_WARNINGS BASELINE_WARNINGS REDUCTION UNUSED_EXPORTS DEADCODE_BASELINE DEADCODE_REDUCTION GATES_PASSED GATES_FAILED GATES_WARNINGS; do
            value=$(eval echo \$$var)
            if ! [[ "$value" =~ ^[0-9]+$ ]]; then
              echo "Warning: $var has invalid value '$value', setting to 0"
              eval "$var=0"
            fi
          done

          # Validate percentage is a number (can have decimal)
          if ! [[ "$PERCENTAGE" =~ ^[0-9]+\.?[0-9]*$ ]] && [ "$PERCENTAGE" != "N/A" ]; then
            echo "Warning: PERCENTAGE has invalid value '$PERCENTAGE', setting to 0"
            PERCENTAGE="0"
          fi

          # Determine status
          if [ "$GATES_FAILED" -eq 0 ] && [ "$CURRENT_WARNINGS" -le "$BASELINE_WARNINGS" ]; then
            STATUS="✅ EXCELLENT"
          elif [ "$GATES_FAILED" -eq 0 ]; then
            STATUS="✅ PASSING"
          elif [ "$GATES_FAILED" -le 2 ]; then
            STATUS="⚠️ NEEDS ATTENTION"
          else
            STATUS="❌ REQUIRES FIXES"
          fi

          # Set outputs
          echo "current_warnings=${CURRENT_WARNINGS}" >> $GITHUB_OUTPUT
          echo "baseline_warnings=${BASELINE_WARNINGS}" >> $GITHUB_OUTPUT
          echo "warning_reduction=${REDUCTION}" >> $GITHUB_OUTPUT
          echo "warning_percentage=${PERCENTAGE}" >> $GITHUB_OUTPUT
          echo "unused_exports=${UNUSED_EXPORTS}" >> $GITHUB_OUTPUT
          echo "deadcode_baseline=${DEADCODE_BASELINE}" >> $GITHUB_OUTPUT
          echo "deadcode_reduction=${DEADCODE_REDUCTION}" >> $GITHUB_OUTPUT
          echo "gates_passed=${GATES_PASSED}" >> $GITHUB_OUTPUT
          echo "gates_failed=${GATES_FAILED}" >> $GITHUB_OUTPUT
          echo "gates_warnings=${GATES_WARNINGS}" >> $GITHUB_OUTPUT
          echo "overall_status=${STATUS}" >> $GITHUB_OUTPUT

      - name: Extract top warning types
        id: warnings
        run: |
          # Run ESLint to get warning details
          if npm run lint 2>&1 | tee eslint-output.txt; then
            TOP_WARNINGS="No ESLint warnings found"
          else
            # Extract unique warning rule IDs and count them
            TOP_WARNINGS=$(grep -o "\[.*\]" eslint-output.txt 2>/dev/null | sort | uniq -c | sort -rn | head -n 5 | sed 's/^[[:space:]]*//' || echo "No warning details available")
          fi
          echo "top_warnings<<EOF" >> $GITHUB_OUTPUT
          echo "$TOP_WARNINGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract failed gates
        id: failed_gates
        run: |
          # Extract failed and warning gates with their messages
          FAILED_GATES=$(grep "❌ FAIL:" quality-gates.txt 2>/dev/null | grep -v "Some quality gates failed" | sed 's/❌ FAIL: //' || echo "")
          WARNING_GATES=$(grep "⚠️  WARN:" quality-gates.txt 2>/dev/null | sed 's/⚠️  WARN: //' || echo "")

          echo "failed_gates<<EOF" >> $GITHUB_OUTPUT
          echo "$FAILED_GATES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "warning_gates<<EOF" >> $GITHUB_OUTPUT
          echo "$WARNING_GATES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract coverage metrics
        id: coverage
        continue-on-error: true
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            OVERALL=$(jq -r '.total.statements.pct' coverage/coverage-summary.json 2>/dev/null || echo "0")
            BRANCHES=$(jq -r '.total.branches.pct' coverage/coverage-summary.json 2>/dev/null || echo "0")
          else
            OVERALL=0
            BRANCHES=0
          fi
          echo "overall_coverage=$OVERALL" >> $GITHUB_OUTPUT
          echo "branch_coverage=$BRANCHES" >> $GITHUB_OUTPUT

      - name: Upload build artifacts for reuse
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: build-${{ github.run_id }}
          path: |
            dist/
            dist-cjs/
          retention-days: 1

      - name: Upload node_modules for security scan
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: node-modules-${{ github.run_id }}
          path: node_modules/
          retention-days: 1

      - name: Upload quality artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: always()
        with:
          name: quality-report-${{ github.run_id }}
          path: |
            quality-gates.txt
            eslint-output.txt
            coverage/
          retention-days: 7

      # Generate and post PR comment for pull requests only
      - name: Generate PR quality comment
        if: github.event_name == 'pull_request'
        run: |
          # Calculate total gates dynamically
          GATES_PASSED="${{ steps.quality.outputs.gates_passed }}"
          GATES_FAILED="${{ steps.quality.outputs.gates_failed }}"
          GATES_WARNINGS="${{ steps.quality.outputs.gates_warnings }}"
          TOTAL_GATES=$(( ${GATES_PASSED:-0} + ${GATES_FAILED:-0} + ${GATES_WARNINGS:-0} ))

          cat > pr_comment.md << EOF
          ## 🛡️ Code Quality Report

          **Status:** ${{ steps.quality.outputs.overall_status }}

          ### 📊 Quality Metrics Summary

          | Metric | Current | Baseline | Progress |
          |--------|---------|----------|-----------|
          | **ESLint Warnings** | ${{ steps.quality.outputs.current_warnings }} | ${{ steps.quality.outputs.baseline_warnings }} | $(if [ "${{ steps.quality.outputs.warning_reduction }}" -gt 0 ]; then echo "✅ -${{ steps.quality.outputs.warning_reduction }} (-${{ steps.quality.outputs.warning_percentage }}%)"; else echo "➖ No change"; fi) |
          | **Dead Code** | ${{ steps.quality.outputs.unused_exports }} | ${{ steps.quality.outputs.deadcode_baseline }} | $(if [ "${{ steps.quality.outputs.deadcode_reduction }}" -gt 0 ]; then echo "✅ -${{ steps.quality.outputs.deadcode_reduction }}"; else echo "➖ No change"; fi) |
          | **Quality Gates** | ${{ steps.quality.outputs.gates_passed }}/${TOTAL_GATES} passed | - | $(if [ "${{ steps.quality.outputs.gates_failed }}" -eq 0 ]; then echo "✅ All passing"; else echo "❌ ${{ steps.quality.outputs.gates_failed }} failed"; fi) |

          ### 🎯 Coverage Highlights
          - **Overall Coverage:** ${{ steps.coverage.outputs.overall_coverage }}%
          - **Branch Coverage:** ${{ steps.coverage.outputs.branch_coverage }}%

          $(if [ "${{ steps.quality.outputs.gates_failed }}" -gt 0 ] || [ "${{ steps.quality.outputs.gates_warnings }}" -gt 0 ]; then
            echo "### ⚠️ Quality Gate Issues"
            echo ""
            if [ -n "${{ steps.failed_gates.outputs.failed_gates }}" ]; then
              echo "**Failed Gates:**"
              echo "\`\`\`"
              echo "${{ steps.failed_gates.outputs.failed_gates }}"
              echo "\`\`\`"
              echo ""
            fi
            if [ -n "${{ steps.failed_gates.outputs.warning_gates }}" ]; then
              echo "**Warnings:**"
              echo "\`\`\`"
              echo "${{ steps.failed_gates.outputs.warning_gates }}"
              echo "\`\`\`"
              echo ""
            fi
          fi)

          ### 💡 Top Warning Categories
          \`\`\`
          ${{ steps.warnings.outputs.top_warnings }}
          \`\`\`

          ### 🚀 Next Steps
          $(if [ "${{ steps.quality.outputs.gates_failed }}" -gt 0 ]; then
            echo "- **Action Required:** Fix the failing quality gate(s) listed above"
          fi)
          $(if [ "${{ steps.quality.outputs.current_warnings }}" -gt 400 ]; then
            echo "- Consider reducing ESLint warnings toward <400 target"
          fi)
          $(if [ "${{ steps.quality.outputs.unused_exports }}" -gt 200 ]; then
            echo "- Consider cleaning up unused exports toward <200 target"
          fi)
          $(if [ "${{ steps.quality.outputs.gates_failed }}" -eq 0 ] && [ "${{ steps.quality.outputs.current_warnings }}" -le 400 ]; then
            echo "🎉 Excellent work! This PR meets all quality standards."
          fi)

          ---
          *Generated by Quality Report Bot • Run: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) • Commit: \`${{ github.sha }}\`*
          EOF

      - name: Find existing PR comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e # v3
        id: find-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '## 🛡️ Code Quality Report'

      - name: Create or update PR comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@e8674b075228eee787fea43ef493e45ece1004c9 # v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: pr_comment.md
          edit-mode: replace

  # Optional security scan (reuses build from test job)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Dependency audit
        run: npm audit --audit-level moderate || true

      - name: CodeQL Analysis
        uses: github/codeql-action/init@f443b600d91635bebf5b0d9ebc620189c0d6fba5 # v3
        with:
          languages: typescript
          queries: security-and-quality
          config-file: ./.github/workflows/codeql/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@f443b600d91635bebf5b0d9ebc620189c0d6fba5 # v3