name: Testing Progress Dashboard

on:
  push:
    branches: [ main, testing ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  testing-dashboard:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod tidy

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: v1.55.2
        skip-cache: true
        skip-pkg-cache: true
        skip-build-cache: true
        args: --version

    - name: Make scripts executable
      run: chmod +x scripts/generate-testing-report.sh

    - name: Clean up old comments and generate consolidated dashboard
      env:
        CI: true
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_PR_NUMBER: ${{ github.event.number }}
      run: |
        # Ensure we have all required tools
        which go
        which golangci-lint

        # Install gh CLI if not present
        if ! command -v gh &> /dev/null; then
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
        fi

        # Run the consolidated testing dashboard generator
        ./scripts/generate-testing-report.sh

    - name: Upload test coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          /tmp/coverage-*.out
          coverage.out
        retention-days: 7

    - name: Upload testing report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: testing-report
        path: /tmp/testing-report.md
        retention-days: 30

  # Separate job for coverage enforcement on main and testing branches
  coverage-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/testing')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Run coverage enforcement
      run: |
        if [ -f scripts/coverage.sh ]; then
          chmod +x scripts/coverage.sh
          ./scripts/coverage.sh
        else
          echo "Coverage script not found, skipping coverage check"
        fi

    - name: Run tests with race detection
      run: |
        go test -race ./pkg/mcp/internal/core/... || true
        go test -race ./pkg/mcp/internal/build/... || true
        go test -race ./pkg/mcp/internal/deploy/... || true

  # Job to run full test suite and quality checks
  quality-gates:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod tidy

    # Lint step removed - now handled by code-quality.yml workflow to avoid redundancy
    # - name: Run golangci-lint
    #   uses: golangci/golangci-lint-action@v4
    #   with:
    #     version: v1.55.2
    #     args: --timeout=5m --disable=typecheck

    - name: Run all tests
      run: |
        go test -v ./... -coverprofile=coverage.out

    - name: Check test coverage
      run: |
        go tool cover -func=coverage.out

    - name: Verify go fmt
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "The following files are not formatted:"
          gofmt -l .
          exit 1
        fi

    - name: Verify go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum
