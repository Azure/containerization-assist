# Quality checks and metrics Makefile
# Include this in your main Makefile: include Makefile.quality

.PHONY: quality quality-dashboard quality-interfaces quality-report quality-watch quality-gates install-hooks

# Run all quality checks
quality: quality-interfaces quality-dashboard quality-gates
	@echo "‚úÖ All quality checks completed"

# Run interface validation with metrics
quality-interfaces:
	@echo "üîç Validating interfaces..."
	@go run tools/validate-interfaces/main.go --metrics --metrics-output interface-metrics.json
	@echo "üìä Interface metrics saved to interface-metrics.json"

# Generate quality dashboard
quality-dashboard:
	@echo "üìä Generating quality dashboard..."
	@go run tools/quality-dashboard/main.go -format json -output quality-metrics.json
	@go run tools/quality-dashboard/main.go -format html -output quality-dashboard.html
	@go run tools/quality-dashboard/main.go -format text -output -

# Generate comprehensive quality report
quality-report: quality-interfaces quality-dashboard
	@echo "üìÑ Generating comprehensive quality report..."
	@mkdir -p reports
	@cp quality-metrics.json reports/
	@cp interface-metrics.json reports/
	@cp quality-dashboard.html reports/
	@echo "<!DOCTYPE html><html><head><title>Quality Report Index</title></head><body>" > reports/index.html
	@echo "<h1>MCP Quality Report</h1>" >> reports/index.html
	@echo "<p>Generated: $$(date)</p>" >> reports/index.html
	@echo "<ul>" >> reports/index.html
	@echo "<li><a href='quality-dashboard.html'>Quality Dashboard</a></li>" >> reports/index.html
	@echo "<li><a href='quality-metrics.json'>Quality Metrics (JSON)</a></li>" >> reports/index.html
	@echo "<li><a href='interface-metrics.json'>Interface Metrics (JSON)</a></li>" >> reports/index.html
	@echo "</ul></body></html>" >> reports/index.html
	@echo "üìÅ Reports available in reports/ directory"

# Watch mode for continuous monitoring
quality-watch:
	@echo "üëÄ Starting quality watch mode..."
	@go run tools/quality-dashboard/main.go -watch -interval 5m -format text -output -

# Check quality gates (for CI)
quality-gates: quality-interfaces quality-dashboard
	@echo "üö¶ Checking quality gates..."
	@bash -c 'set -e; \
	ERROR_RATE=$$(jq ".error_handling.adoption_rate" quality-metrics.json); \
	COVERAGE=$$(jq ".test_coverage.overall_coverage" quality-metrics.json); \
	INTERFACE_ERRORS=$$(jq ".compliance_report.interface_errors | length" interface-metrics.json); \
	echo "Error Handling Adoption: $$ERROR_RATE%"; \
	echo "Test Coverage: $$COVERAGE%"; \
	echo "Interface Errors: $$INTERFACE_ERRORS"; \
	if [ "$$INTERFACE_ERRORS" -gt 0 ]; then \
		echo "‚ùå Interface validation failed"; \
		exit 1; \
	fi; \
	if (( $$(echo "$$ERROR_RATE < 20" | bc -l) )); then \
		echo "‚ùå Error handling adoption too low"; \
		exit 1; \
	fi; \
	if (( $$(echo "$$COVERAGE < 10" | bc -l) )); then \
		echo "‚ùå Test coverage too low"; \
		exit 1; \
	fi; \
	echo "‚úÖ All quality gates passed"'

# Install git hooks
install-hooks:
	@echo "ü™ù Installing quality pre-commit hooks..."
	@bash scripts/install-hooks.sh

# Clean quality artifacts
clean-quality:
	@rm -f quality-metrics.json interface-metrics.json quality-dashboard.html
	@rm -f detailed_interface_metrics.json quality-summary.txt
	@rm -rf reports/
	@echo "üßπ Quality artifacts cleaned"

# Quality improvement targets
improve-errors:
	@echo "üîß Finding files to improve error handling..."
	@jq -r '.error_handling.top_files_to_migrate[] | "\(.path): \(.standard_errors) standard errors"' quality-metrics.json 2>/dev/null || echo "Run 'make quality-dashboard' first"

improve-coverage:
	@echo "üîß Finding packages with low coverage..."
	@jq -r '.test_coverage.bottom_coverage[] | "\(.package): \(.coverage)%"' quality-metrics.json 2>/dev/null || echo "Run 'make quality-dashboard' first"

improve-interfaces:
	@echo "üîß Finding interface compliance issues..."
	@jq -r '.compliance_report.non_compliant_tools[] | "\(.tool): missing \(.missing_interfaces | join(", "))"' interface-metrics.json 2>/dev/null || echo "Run 'make quality-interfaces' first"

# Help target
quality-help:
	@echo "Quality Targets:"
	@echo "  make quality              - Run all quality checks"
	@echo "  make quality-dashboard    - Generate quality metrics dashboard"
	@echo "  make quality-interfaces   - Validate interface compliance"
	@echo "  make quality-report       - Generate comprehensive HTML report"
	@echo "  make quality-watch        - Start continuous monitoring"
	@echo "  make quality-gates        - Check CI quality gates"
	@echo "  make install-hooks        - Install git pre-commit hooks"
	@echo ""
	@echo "Improvement Targets:"
	@echo "  make improve-errors       - Show files needing error handling updates"
	@echo "  make improve-coverage     - Show packages with low test coverage"
	@echo "  make improve-interfaces   - Show interface compliance issues"
	@echo ""
	@echo "Cleanup:"
	@echo "  make clean-quality        - Remove quality artifacts"