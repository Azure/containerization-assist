pkg/mcp/client_factory.go:				f.aiClient = &aiAnalyzerAdapter{client: azClient}
pkg/mcp/client_factory.go:// aiAnalyzerAdapter adapts the ai.LLMClient to mcptypes.AIAnalyzer interface
pkg/mcp/client_factory.go:type aiAnalyzerAdapter struct {
pkg/mcp/client_factory.go:func (a *aiAnalyzerAdapter) Analyze(ctx context.Context, prompt string) (string, error) {
pkg/mcp/client_factory.go:func (a *aiAnalyzerAdapter) AnalyzeWithFileTools(ctx context.Context, prompt, baseDir string) (string, error) {
pkg/mcp/client_factory.go:func (a *aiAnalyzerAdapter) AnalyzeWithFormat(ctx context.Context, promptTemplate string, args ...interface{}) (string, error) {
pkg/mcp/client_factory.go:func (a *aiAnalyzerAdapter) GetTokenUsage() mcptypes.TokenUsage {
pkg/mcp/client_factory.go:func (a *aiAnalyzerAdapter) ResetTokenUsage() {
pkg/mcp/internal/core/server_conversation.go:		callerAnalyzer := analyze.NewCallerAnalyzerAdapter(adapter, analyze.CallerAnalyzerOpts{
pkg/mcp/internal/core/gomcp_tools.go:			// Check if it's a CallerAnalyzerAdapter with access to core analyzer
pkg/mcp/internal/core/gomcp_tools.go:// sessionLabelManagerWrapper adapts session.SessionManager to runtime.SessionLabelManager interface
pkg/mcp/internal/core/gomcp_tools.go:type sessionLabelManagerWrapper struct {
pkg/mcp/internal/core/gomcp_tools.go:func (w *sessionLabelManagerWrapper) AddSessionLabel(sessionID, label string) error {
pkg/mcp/internal/core/gomcp_tools.go:func (w *sessionLabelManagerWrapper) RemoveSessionLabel(sessionID, label string) error {
pkg/mcp/internal/core/gomcp_tools.go:func (w *sessionLabelManagerWrapper) SetSessionLabels(sessionID string, labels []string) error {
pkg/mcp/internal/core/gomcp_tools.go:func (w *sessionLabelManagerWrapper) GetAllLabels() []string {
pkg/mcp/internal/core/gomcp_tools.go:func (w *sessionLabelManagerWrapper) GetSession(sessionID string) (sessiontypes.SessionLabelData, error) {
pkg/mcp/internal/core/gomcp_tools.go:func (w *sessionLabelManagerWrapper) ListSessions() []sessiontypes.SessionLabelData {
pkg/mcp/internal/analyze/analyzer.go:// CallerAnalyzerAdapter adapts CallerAnalyzer to types.AIAnalyzer interface
pkg/mcp/internal/analyze/analyzer.go:type CallerAnalyzerAdapter struct {
pkg/mcp/internal/analyze/analyzer.go:// NewCallerAnalyzerAdapter creates an adapter that implements types.AIAnalyzer
pkg/mcp/internal/analyze/analyzer.go:func NewCallerAnalyzerAdapter(transport LLMTransport, opts CallerAnalyzerOpts) *CallerAnalyzerAdapter {
pkg/mcp/internal/analyze/analyzer.go:	return &CallerAnalyzerAdapter{
pkg/mcp/internal/analyze/analyzer.go:func (a *CallerAnalyzerAdapter) GetTokenUsage() types.TokenUsage {
pkg/mcp/internal/analyze/analyzer.go:func (a *CallerAnalyzerAdapter) GetCoreAnalyzer() core.AIAnalyzer {
