@startuml Container Kit - Simplified Clean Architecture
!theme plain
title Container Kit MCP Server - Simplified Four-Layer Architecture\nTool-Driven Architecture with Direct Dependency Injection

' Define layer colors
!define COMPOSITION_COLOR #FFEBEE
!define API_COLOR #E8F5E9
!define APP_COLOR #E3F2FD  
!define DOMAIN_COLOR #F3E5F5
!define INFRA_COLOR #FFF3E0

package "External Clients" {
  [Claude Desktop] as Client
  [MCP CLI] as CLI
  [HTTP Clients] as HTTP
}

package "Transport Layer" {
  [MCP Protocol] as Protocol
  [HTTP Transport] as HTTPTransport
  [Stdio Transport] as StdioTransport
}

rectangle "**Service Layer**" APP_COLOR {
  package "Direct Dependency Injection" {
    [Server Factory] as ServerFactory
    [Dependencies Struct] as Dependencies
    [Direct Initialization] as DirectInit
  }
  note right of ServerFactory : Simple dependency management\nDirect initialization order\nNo code generation

rectangle "**API Layer**" API_COLOR {
  package "Interfaces Only" {
    [MCP Tool Interface] as ToolAPI
    [Orchestrator Interface] as OrchAPI
    [Session Interface] as SessionAPI
    [Event Interface] as EventAPI
  }
  note right of ToolAPI : Pure interfaces\nNo implementations\nStable contracts
}

  package "MCP Server" {
    [Server Core] as Server
    [Transport Manager] as TransportMgr
    [Session Service] as SessionSvc
  }
  
  package "Tool Registry" {
    [Tool Registry] as ToolRegistry
    [15 Individual Tools] as Tools
    [Chain Hints] as ChainHints
  }
  
  package "Configuration" {
    [Config Service] as Config
    [Environment Loader] as EnvLoader
  }
  
  note right of ToolRegistry : 15 tools (10 workflow, 2 orchestration, 3 utility)\nTable-driven configuration\nTool chaining with hints

rectangle "**Domain Layer**" DOMAIN_COLOR {
  package "Workflow Core" {
    [Workflow Orchestrator] as WorkflowOrch
    [Step Factory] as StepFactory
    [Workflow Types] as WorkflowTypes
  }
  
  package "Error Handling" {
    [Workflow Error] as WorkflowError
    [Simple Error Context] as ErrorContext
  }
  
  package "Domain Events" {
    [Event Publisher] as EventPub
    [Workflow Events] as WorkflowEvents
    [Saga Coordinator] as SagaCoord
  }
  
  package "Progress Domain" {
    [Progress Tracker] as ProgressTracker
    [Progress Emitter] as ProgressEmitter
  }
  
  note right of WorkflowOrch : Direct orchestration\nStep-based execution\nSimple error handling
}

rectangle "**Infrastructure Layer**" INFRA_COLOR {
  package "Workflow Steps" {
    [analyze_repository] as Step1
    [generate_dockerfile] as Step2
    [build_image] as Step3
    [scan_image] as Step4
    [tag_image] as Step5
    [push_image] as Step6
    [generate_k8s_manifests] as Step7
    [prepare_cluster] as Step8
    [deploy_application] as Step9
    [verify_deployment] as Step10
  }
  
  package "AI/ML Integration" {
    [Azure OpenAI Client] as AIClient
    [Prompt Manager] as PromptMgr
    [ML Build Optimizer] as MLOptimizer
    [Domain Sampler Adapter] as SamplerAdapter
  }
  
  package "Container & K8s" {
    [Docker Manager] as DockerMgr
    [K8s Deployment Manager] as K8sMgr
    [Registry Client] as RegClient
    [Security Scanner] as Scanner
  }
  
  package "Persistence" {
    [BoltDB Session Store] as BoltStore
    [File State Store] as FileStore
  }
  
  package "Unified Messaging" {
    [Event Publisher] as EventPubImpl
    [Progress Emitter] as ProgressEmitter
    [CLI Direct] as CLIDirect
    [MCP Direct] as MCPDirect
  }
  
  package "Unified Observability" {
    [Monitor] as Monitor
    [Tracing Config] as TracingConfig
    [Tracing Integration] as TracingIntegration
  }
  
  note bottom of Step1 : Each step is independent\nTable-driven registration\nSession state persistence
}

' External Systems
cloud "External Services" {
  [Azure OpenAI] as AzureAI
  [Docker Engine] as Docker
  [Kubernetes API] as K8s
  [Container Registry] as Registry
  [Trivy/Grype] as SecurityTools
}

' Layer Dependencies (Clean Architecture)
API_COLOR -[hidden]down-> APP_COLOR
APP_COLOR -[hidden]down-> DOMAIN_COLOR  
DOMAIN_COLOR -[hidden]down-> INFRA_COLOR

' Direct dependency injection
ServerFactory --> Dependencies
Dependencies --> DirectInit
DirectInit --> Server : creates
DirectInit --> WorkflowOrch : creates
DirectInit --> ToolRegistry : creates

' Client connections
Client --> Protocol
CLI --> Protocol
HTTP --> HTTPTransport
Protocol --> Server

' Application layer flow
Server --> TransportMgr
Server --> ToolReg
Server --> SessionSvc
Server --> ToolRegistry
ToolRegistry --> Tools
Tools --> WorkflowOrch

' Domain layer flow
WorkflowOrch --> StepFactory
WorkflowOrch --> WorkflowError
WorkflowError --> ErrorContext
WorkflowOrch --> EventPub

' Progress tracking
WorkflowOrch --> ProgressTracker
ProgressTracker --> ProgressEmitter
ProgressEmitter --> MCPDirect
ProgressEmitter --> CLIDirect

' Infrastructure implementations
WorkflowOrch --> Step1
Step1 --> Step2
Step2 --> Step3
Step3 --> Step4
Step4 --> Step5
Step5 --> Step6
Step6 --> Step7
Step7 --> Step8
Step8 --> Step9
Step9 --> Step10

' AI/ML connections
Step2 --> AIClient : Dockerfile generation
Step3 --> MLOptimizer : Build optimization
ErrorContext --> AIClient : Error recovery
AIClient --> PromptMgr
SamplerAdapter --> AIClient

' Container operations
Step3 --> DockerMgr
Step4 --> Scanner
Step5 --> RegClient
Step6 --> RegClient
Step8 --> K8sMgr
Step9 --> K8sMgr
Step10 --> K8sMgr

' External connections
AIClient --> AzureAI
DockerMgr --> Docker
K8sMgr --> K8s
RegClient --> Registry
Scanner --> SecurityTools

' Persistence
SessionSvc --> BoltStore
BaseOrch --> FileStore

' Observability
WorkflowOrch --> TracingIntegration
Server --> Monitor
Server --> TracingConfig

' Key architectural notes
note top of ServerFactory : **Direct Dependency Injection**\n• Simple Dependencies struct\n• No code generation needed\n• Clear initialization order

note top of ToolRegistry : **Tool Registry Pattern**\n• Table-driven configuration\n• 15 individual tools\n• Tool chaining with hints

note top of WorkflowError : **Simple Workflow Errors**\n• Step name + attempt number\n• Standard error wrapping\n• Lightweight design

note bottom of Step10 : **Individual Tools**\n• 15 focused tools\n• Session state persistence\n• AI-assisted error recovery

@enduml