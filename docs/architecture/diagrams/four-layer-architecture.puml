@startuml Container Kit MCP - Four-Layer Clean Architecture
!theme plain
title Container Kit MCP Server - Four-Layer Clean Architecture\nPhases 1-6 Complete: Wire DI, Quality Gates, Documentation

' Define layer colors
!define API_COLOR #E8F5E9
!define APP_COLOR #E3F2FD  
!define DOMAIN_COLOR #F3E5F5
!define INFRA_COLOR #FFF3E0

package "External Clients" {
  [Claude Desktop] as Client
  [CLI Tools] as CLI
  [HTTP Clients] as HTTP
}

package "Transport Layer" {
  [MCP Protocol] as Protocol
  [HTTP Transport] as HTTPTransport
  [Stdio Transport] as StdioTransport
}

rectangle "**API Layer**" API_COLOR {
  package "Essential Interfaces" {
    [Tool Interface] as ToolAPI
    [Server Interface] as ServerAPI
    [Workflow Interface] as WorkflowAPI
    [Session Interface] as SessionAPI
  }
  note right of ToolAPI : Pure interfaces only\nNo implementation code\nStable contracts
}

rectangle "**Application Layer**" APP_COLOR {
  package "Service Orchestration" {
    [MCP Server] as Server
    [Transport Manager] as TransportMgr
    [Resource Registrar] as ResourceReg
    [Tool Registrar] as ToolReg
  }
  
  package "Configuration" {
    [Config Manager] as Config
    [Environment Loader] as EnvLoader
  }
  
  package "Session Management" {
    [Session Service] as SessionSvc
    [Workspace Manager] as WorkspaceManager
  }
  
  note right of Server : Orchestrates domain services\nHandles MCP protocol\nWire DI integration
}

rectangle "**Domain Layer**" DOMAIN_COLOR {
  package "Core Business Logic" {
    [Workflow Orchestrator] as Orchestrator
    [Progress Tracker] as ProgressTracker
    [Error Recovery] as ErrorRecovery
    [Elicitation Engine] as Elicitation
  }
  
  package "Domain Events" {
    [Event Publisher] as EventPub
    [Event Handlers] as EventHandlers
    [Saga Coordinator] as SagaCoord
  }
  
  package "Domain Types" {
    [Workflow Types] as WorkflowTypes
    [Progress Types] as ProgressTypes
    [Sampling Types] as SamplingTypes
  }
  
  note right of Orchestrator : Pure business logic\nNo infrastructure dependencies\nOpenTelemetry tracing
}

rectangle "**Infrastructure Layer**" INFRA_COLOR {
  package "Workflow Implementation" {
    [Analyze Step] as AnalyzeStep
    [Build Step] as BuildStep
    [Deploy Step] as DeployStep
    [Scan Step] as ScanStep
  }
  
  package "AI Integration" {
    [Azure OpenAI Client] as AIClient
    [Prompt Manager] as PromptMgr
    [Sampling Engine] as SamplingEngine
  }
  
  package "Data Persistence" {
    [BoltDB Session Store] as BoltStore
    [File System Utils] as FileUtils
    [Repository Analyzer] as RepoAnalyzer
  }
  
  package "External Systems" {
    [Docker Client] as DockerClient
    [Kubernetes Client] as K8sClient
    [Security Scanner] as SecurityScanner
  }
  
  package "Quality & Observability" {
    [OpenTelemetry Tracer] as Tracer
    [Health Monitor] as HealthMonitor
    [Metrics Collector] as MetricsCollector
    [Wire DI Providers] as WireProviders
  }
  
  note right of WireProviders : Wire dependency injection\nCompile-time safety\nAutomatic wiring
}

' External Systems
cloud "External Dependencies" {
  [Azure OpenAI] as AzureAI
  [Docker Engine] as Docker
  [Kubernetes Cluster] as K8s
  [Container Registry] as Registry
  [Security Scanners] as Scanners
}

' Layer Dependencies (Clean Architecture)
API_COLOR -[hidden]down-> APP_COLOR
APP_COLOR -[hidden]down-> DOMAIN_COLOR  
DOMAIN_COLOR -[hidden]down-> INFRA_COLOR

' Client connections
Client --> Protocol
CLI --> Protocol
HTTP --> HTTPTransport
Protocol --> Server

' Transport connections
HTTPTransport --> Server
StdioTransport --> Server

' Application layer dependencies
Server --> Config
Server --> TransportMgr
Server --> ResourceReg
Server --> ToolReg
Server --> SessionSvc
TransportMgr --> HTTPTransport
TransportMgr --> StdioTransport

' Domain layer dependencies  
Server --> Orchestrator
SessionSvc --> WorkspaceManager
Orchestrator --> ProgressTracker
Orchestrator --> ErrorRecovery
Orchestrator --> Elicitation
Orchestrator --> EventPub
EventPub --> EventHandlers
EventHandlers --> SagaCoord

' Infrastructure layer dependencies
Orchestrator --> AnalyzeStep
Orchestrator --> BuildStep  
Orchestrator --> DeployStep
Orchestrator --> ScanStep
AnalyzeStep --> RepoAnalyzer
BuildStep --> DockerClient
DeployStep --> K8sClient
ScanStep --> SecurityScanner
SamplingEngine --> AIClient
SamplingEngine --> PromptMgr
SessionSvc --> BoltStore
ProgressTracker --> Tracer
Server --> HealthMonitor
Server --> MetricsCollector

' Wire DI connections
WireProviders --> AIClient
WireProviders --> BoltStore
WireProviders --> Orchestrator
WireProviders --> Server

' External system connections
AIClient --> AzureAI
DockerClient --> Docker
K8sClient --> K8s
DockerClient --> Registry
SecurityScanner --> Scanners

' Quality annotations
note top of Orchestrator : **Phase 5 Complete**\n• OpenTelemetry tracing\n• Retry logic with exponential backoff\n• Comprehensive error handling

note top of WireProviders : **Phase 1 Complete**\n• Wire dependency injection\n• Compile-time safety\n• Provider sets by layer

note top of HTTPTransport : **Phase 3 Complete**\n• HTTP/JSON-RPC bridge\n• Health endpoints (/healthz)\n• Metrics endpoints (/metrics)\n• CORS middleware

note top of HealthMonitor : **Phase 5 Complete**\n• Automated quality gates\n• Coverage thresholds (≥70%)\n• Race detection enabled\n• Component budgets

@enduml