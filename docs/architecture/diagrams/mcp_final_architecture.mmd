graph TD
    %% Container Kit MCP - Three-Layer Architecture
    %% Updated to reflect actual codebase structure per ADR-001

    Client[MCP Client] --> Transport[infra/transport/]
    Transport --> Server[application/core/]
    Server --> API[application/api/]

    subgraph "Domain Layer (Business Logic)"
        Domain[domain/]

        subgraph "Domain Packages"
            Config[domain/config/<br/>Configuration Rules]
            Containerization[domain/containerization/<br/>analyze/, build/, deploy/, scan/]
            Errors[domain/errors/<br/>Rich Error System]
            Security[domain/security/<br/>Validation & Policies]
            Session[domain/session/<br/>Session Rules]
            Types[domain/types/<br/>Core Types]
            Workflow[domain/workflow/<br/>Workflow Logic]
            Internal[domain/internal/<br/>common/, utils/, types/]
        end

        Domain --> Config
        Domain --> Containerization
        Domain --> Errors
        Domain --> Security
        Domain --> Session
        Domain --> Types
        Domain --> Workflow
        Domain --> Internal
    end

    subgraph "Application Layer (Use Cases & Orchestration)"
        Application[application/]

        subgraph "Application Packages"
            API[application/api/<br/>Canonical Interfaces<br/>Single Source of Truth]
            Commands[application/commands/<br/>Command Implementations]
            Core[application/core/<br/>Server & Registry]
            Conversation[application/conversation/<br/>Chat & Auto-fix]
            Knowledge[application/knowledge/<br/>Knowledge Base]
            Orchestration[application/orchestration/<br/>Pipeline & Workflow]
            Services[application/services/<br/>Service Interfaces]
            State[application/state/<br/>State Management]
            Tools[application/tools/<br/>Tool Implementations]
            Workflows[application/workflows/<br/>Workflow Engine]
            AppInternal[application/internal/<br/>conversation/, runtime/, retry/]
        end

        Application --> API
        Application --> Commands
        Application --> Core
        Application --> Conversation
        Application --> Knowledge
        Application --> Orchestration
        Application --> Services
        Application --> State
        Application --> Tools
        Application --> Workflows
        Application --> AppInternal
    end

    subgraph "Infrastructure Layer (External Integrations)"
        Infrastructure[infra/]

        subgraph "Infrastructure Components"
            Persistence[infra/persistence/<br/>BoltDB Storage]
            Templates[infra/templates/<br/>YAML Templates with go:embed]
            Transport[infra/transport/<br/>MCP Protocol]
            Retry[infra/retry/<br/>Retry Coordination]
            DockerInfra[infra/docker_*.go<br/>Docker Integration]
            K8sInfra[infra/k8s_*.go<br/>Kubernetes Integration]
            InfraInternal[infra/internal/<br/>logging/, migration/]
        end

        Infrastructure --> Persistence
        Infrastructure --> Templates
        Infrastructure --> Transport
        Infrastructure --> Retry
        Infrastructure --> DockerInfra
        Infrastructure --> K8sInfra
        Infrastructure --> InfraInternal
    end

    %% Dependency Rules (per ADR-001)
    %% Application can depend on Domain
    API --> Domain
    Commands --> Domain
    Core --> Domain
    Conversation --> Domain
    Knowledge --> Domain
    Orchestration --> Domain
    Services --> Domain
    State --> Domain
    Tools --> Domain
    Workflows --> Domain
    AppInternal --> Domain

    %% Infrastructure can depend on Application and Domain
    Persistence --> Application
    Templates --> Application
    Transport --> Application
    Retry --> Application
    DockerInfra --> Application
    K8sInfra --> Application
    InfraInternal --> Domain

    %% Service Container Pattern (ADR-006)
    subgraph "Service Container (Dependency Injection)"
        ServiceContainer[ServiceContainer]
        SessionStore[SessionStore]
        SessionState[SessionState]
        BuildExecutor[BuildExecutor]
        ToolRegistry[ToolRegistry]
        WorkflowExecutor[WorkflowExecutor]
        Scanner[Scanner]
        ConfigValidator[ConfigValidator]
        ErrorReporter[ErrorReporter]
    end

    Core --> ServiceContainer
    ServiceContainer --> SessionStore
    ServiceContainer --> SessionState
    ServiceContainer --> BuildExecutor
    ServiceContainer --> ToolRegistry
    ServiceContainer --> WorkflowExecutor
    ServiceContainer --> Scanner
    ServiceContainer --> ConfigValidator
    ServiceContainer --> ErrorReporter

    %% External Systems Integration
    DockerInfra --> DockerEngine[Docker Engine]
    K8sInfra --> KubernetesAPI[Kubernetes API]
    Persistence --> BoltDB[BoltDB Files]
    Scanner --> Trivy[Trivy Scanner]
    Scanner --> Grype[Grype Scanner]

    %% Architecture Validation
    %% - Domain depends on nothing
    %% - Application depends only on Domain
    %% - Infrastructure depends on Application and Domain

    classDef domainLayer fill:#e8f5e9,stroke:#2e7d32,stroke-width:3px
    classDef applicationLayer fill:#e3f2fd,stroke:#1565c0,stroke-width:3px
    classDef infraLayer fill:#fff3e0,stroke:#ef6c00,stroke-width:3px
    classDef serviceLayer fill:#e8eaf6,stroke:#3f51b5,stroke-width:2px
    classDef externalSys fill:#eceff1,stroke:#455a64,stroke-width:1px,stroke-dasharray: 5 5

    class Domain,Config,Containerization,Errors,Security,Session,Types,Workflow,Internal domainLayer
    class Application,API,Commands,Core,Conversation,Knowledge,Orchestration,Services,State,Tools,Workflows,AppInternal applicationLayer
    class Infrastructure,Persistence,Templates,Transport,Retry,DockerInfra,K8sInfra,InfraInternal infraLayer
    class ServiceContainer,SessionStore,SessionState,BuildExecutor,ToolRegistry,WorkflowExecutor,Scanner,ConfigValidator,ErrorReporter serviceLayer
    class DockerEngine,KubernetesAPI,BoltDB,Trivy,Grype externalSys
