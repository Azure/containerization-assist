pkg/mcp/app/registry/registry_test.go:	var _ *Registry = NewTypedToolRegistry()
pkg/mcp/app/registry/registry_test.go:	var _ *Registry = NewFederatedRegistry()
pkg/mcp/app/registry/registry_test.go:	var _ *Registry = NewToolRegistry()
pkg/mcp/app/registry/registry_test.go:	var _ *Registry = NewMemoryRegistry()
pkg/mcp/app/registry/registry_test.go:	var _ *Registry = NewMemoryToolRegistry()
pkg/mcp/infra/registry/docker_helper.go:	for _, variation := range dockerHubVariations {
pkg/mcp/infra/registry/docker_helper.go:		if strings.Contains(target, variation) || target == variation {
pkg/mcp/infra/registry/docker_helper.go:		if strings.Contains(config, variation) || config == variation {
pkg/mcp/infra/resource_management_test.go:var _ = config.DefaultWorkerPoolSize
pkg/mcp/infra/benchmark_test.go:var ErrInvalidInput = errors.New("invalid input parameters")
pkg/mcp/infra/transport/llm_stdio.go:var _ types.LLMTransport = (*StdioLLMTransport)(nil)
pkg/mcp/infra/transport/llm_http.go:var _ types.LLMTransport = (*HTTPLLMTransport)(nil)
pkg/mcp/infra/logging/logging.go:var New = logging.NewLogger
pkg/mcp/domain/errors/boundary_compliance_test.go:	var _ error = err
pkg/mcp/domain/containerization/analyze/template_selector.go:var languageCompatibilityMap = map[string][]string{
pkg/mcp/domain/containerization/analyze/template_selector.go:var configFileScores = map[string]map[string]int{
pkg/mcp/domain/containerization/analyze/configuration_analyzer_test.go:	var engine AnalysisEngine = NewConfigurationAnalyzer(logger)
pkg/mcp/domain/containerization/build/enhanced_build_analyzer.go:var failurePatterns = map[string][]string{
pkg/mcp/domain/containerization/build/fixer_types.go:var buildFailureClassifiers = map[string][]string{
pkg/mcp/domain/containerization/build/fixer_types.go:var buildStageClassifiers = map[string][]string{
pkg/mcp/domain/containerization/database_detectors/common_detector.go:				vars, err := parseEnvFile(path, varPrefixes)
pkg/mcp/domain/containerization/database_detectors/common_detector.go:			vars, err := parseDockerComposeEnvVars(path, varPrefixes)
pkg/mcp/domain/containerization/deploy/health_tool.go:	var progress interface{} = nil
pkg/mcp/domain/types/clients_test.go:	var analyzer AIAnalyzer = &stubAnalyzer{}
pkg/mcp/domain/types/tools/schema.go:var ChatInputSchema = ObjectSchemaTyped(map[string]*TypedSchemaProperty{
pkg/mcp/domain/types/tools/schema.go:var ConversationHistoryInputSchema = ObjectSchemaTyped(map[string]*TypedSchemaProperty{
pkg/mcp/domain/types/tools/schema.go:var WorkflowExecuteInputSchema = ObjectSchemaTyped(map[string]*TypedSchemaProperty{
pkg/mcp/domain/types/tools/schema.go:var WorkflowListInputSchema = ObjectSchemaTyped(map[string]*TypedSchemaProperty{
pkg/mcp/domain/types/tools/schema.go:var WorkflowStatusInputSchema = ObjectSchemaTyped(map[string]*TypedSchemaProperty{
pkg/mcp/domain/types/core.go:var KnownRegistries = []string{
pkg/mcp/domain/types/validation_test.go:	var _ *ValidationResult = result
pkg/mcp/domain/logging/logger.go:	var output io.Writer = config.Output
pkg/mcp/application/orchestration/registry/type_safe_registry.go:var NewTypedToolRegistry = NewToolRegistry
pkg/mcp/application/orchestration/workflow/engine.go:	variables := make(map[string]interface{})
pkg/mcp/application/orchestration/workflow/engine.go:			variables[k] = v
pkg/mcp/application/orchestration/execution/dependency_resolver.go:			node.Properties["variables"] = stage.Variables
pkg/mcp/application/api/tool_contract_test.go:	var _ Tool = tool
pkg/mcp/application/api/tool_contract_test.go:			var _ Tool = tool
pkg/mcp/application/api/validation_test.go:	var _ validation.Validator = validator
pkg/mcp/application/internal/runtime/conversation/deploy_stage.go:		params["env_vars"] = envVars
pkg/mcp/application/internal/runtime/conversation/conversation_handler.go:	var userPrefs types.UserPreferences = types.UserPreferences{
pkg/mcp/application/internal/runtime/conversation/prompt_manager_preflight.go:	var result interface{} = nil
pkg/mcp/application/internal/runtime/conversation/prompt_manager_preflight.go:	var err error = nil
pkg/mcp/application/internal/runtime/validator.go:var DefaultRuntimeRegistry = NewRuntimeValidatorRegistry()
pkg/mcp/application/internal/server/tool_manager.go:	variables := make(map[string]string)
pkg/mcp/application/internal/server/tool_manager.go:	if vars, ok := args["variables"].(map[string]interface{}); ok {
pkg/mcp/application/internal/server/tool_manager.go:				variables[k] = strVal
pkg/mcp/application/internal/server/core.go:	var unifiedSessionMgr session.UnifiedSessionManager = srv.sessionManager
pkg/mcp/application/internal/logging/logger.go:	var output io.Writer = config.Output
