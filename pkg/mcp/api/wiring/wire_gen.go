// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/Azure/container-kit/pkg/mcp/api"
	"github.com/Azure/container-kit/pkg/mcp/application"
	"github.com/Azure/container-kit/pkg/mcp/domain/saga"
	"github.com/Azure/container-kit/pkg/mcp/domain/workflow"
	"github.com/Azure/container-kit/pkg/mcp/infrastructure/events"
	"github.com/Azure/container-kit/pkg/mcp/infrastructure/tracing"
	"log/slog"
)

// Injectors from wire.go:

// InitializeDefaultServer creates a fully wired MCP server with default configuration
func InitializeDefaultServer(logger *slog.Logger) (api.MCPServer, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	serverConfig := ProvideServerConfigFromUnified(config)
	optimizedSessionManager := ProvideSessionManager(serverConfig, logger)
	store := ProvideResourceStore(logger)
	sinkFactory := ProvideProgressFactory(logger)
	publisher := events.NewPublisher(logger)
	sagaCoordinator := saga.NewSagaCoordinator(logger, publisher)
	stepProvider := ProvideStepProvider(logger)
	client, err := ProvideSamplingClient(config, logger)
	if err != nil {
		return nil, err
	}
	domainAdapter := provideDomainSampler(client)
	optimizedBuildStep := ProvideMLOptimizedBuildStep(domainAdapter, logger)
	step := ProvideOptimizedBuildStep(optimizedBuildStep)
	stepFactory := ProvideStepFactory(stepProvider, step, logger)
	tracer := tracing.NewTracerAdapter()
	baseOrchestrator := ProvideBaseOrchestrator(stepFactory, sinkFactory, logger, tracer)
	workflowOrchestrator := ProvideWorkflowOrchestrator(baseOrchestrator)
	eventAwareOrchestrator := ProvideEventOrchestrator(baseOrchestrator, publisher)
	commandRunner := ProvideCommandRunner()
	containerManager := ProvideContainerManager(commandRunner, logger)
	deploymentManager := ProvideDeploymentManager(commandRunner, logger)
	sagaAwareOrchestrator := ProvideSagaOrchestrator(eventAwareOrchestrator, sagaCoordinator, containerManager, deploymentManager, logger)
	errorPatternRecognizer := ProvideErrorPatternRecognizer(domainAdapter, logger)
	enhancedErrorHandler := ProvideEnhancedErrorHandler(domainAdapter, publisher, logger)
	stepEnhancer := ProvideStepEnhancer(enhancedErrorHandler, logger)
	manager, err := ProvidePromptManager(config, logger)
	if err != nil {
		return nil, err
	}
	dependencies := &application.Dependencies{
		Logger:                 logger,
		Config:                 serverConfig,
		SessionManager:         optimizedSessionManager,
		ResourceStore:          store,
		ProgressFactory:        sinkFactory,
		EventPublisher:         publisher,
		SagaCoordinator:        sagaCoordinator,
		WorkflowOrchestrator:   workflowOrchestrator,
		EventAwareOrchestrator: eventAwareOrchestrator,
		SagaAwareOrchestrator:  sagaAwareOrchestrator,
		ErrorPatternRecognizer: errorPatternRecognizer,
		EnhancedErrorHandler:   enhancedErrorHandler,
		StepEnhancer:           stepEnhancer,
		SamplingClient:         domainAdapter,
		PromptManager:          manager,
	}
	mcpServer := ProvideServer(dependencies)
	return mcpServer, nil
}

// InitializeServerWithConfig creates a fully wired MCP server with custom configuration
func InitializeServerWithConfig(logger *slog.Logger, config workflow.ServerConfig) (api.MCPServer, error) {
	optimizedSessionManager := ProvideSessionManager(config, logger)
	store := ProvideResourceStore(logger)
	sinkFactory := ProvideProgressFactory(logger)
	publisher := events.NewPublisher(logger)
	sagaCoordinator := saga.NewSagaCoordinator(logger, publisher)
	stepProvider := ProvideStepProvider(logger)
	configConfig := ProvideConfigFromServerConfig(config)
	client, err := ProvideSamplingClient(configConfig, logger)
	if err != nil {
		return nil, err
	}
	domainAdapter := provideDomainSampler(client)
	optimizedBuildStep := ProvideMLOptimizedBuildStep(domainAdapter, logger)
	step := ProvideOptimizedBuildStep(optimizedBuildStep)
	stepFactory := ProvideStepFactory(stepProvider, step, logger)
	tracer := tracing.NewTracerAdapter()
	baseOrchestrator := ProvideBaseOrchestrator(stepFactory, sinkFactory, logger, tracer)
	workflowOrchestrator := ProvideWorkflowOrchestrator(baseOrchestrator)
	eventAwareOrchestrator := ProvideEventOrchestrator(baseOrchestrator, publisher)
	commandRunner := ProvideCommandRunner()
	containerManager := ProvideContainerManager(commandRunner, logger)
	deploymentManager := ProvideDeploymentManager(commandRunner, logger)
	sagaAwareOrchestrator := ProvideSagaOrchestrator(eventAwareOrchestrator, sagaCoordinator, containerManager, deploymentManager, logger)
	errorPatternRecognizer := ProvideErrorPatternRecognizer(domainAdapter, logger)
	enhancedErrorHandler := ProvideEnhancedErrorHandler(domainAdapter, publisher, logger)
	stepEnhancer := ProvideStepEnhancer(enhancedErrorHandler, logger)
	manager, err := ProvidePromptManager(configConfig, logger)
	if err != nil {
		return nil, err
	}
	dependencies := &application.Dependencies{
		Logger:                 logger,
		Config:                 config,
		SessionManager:         optimizedSessionManager,
		ResourceStore:          store,
		ProgressFactory:        sinkFactory,
		EventPublisher:         publisher,
		SagaCoordinator:        sagaCoordinator,
		WorkflowOrchestrator:   workflowOrchestrator,
		EventAwareOrchestrator: eventAwareOrchestrator,
		SagaAwareOrchestrator:  sagaAwareOrchestrator,
		ErrorPatternRecognizer: errorPatternRecognizer,
		EnhancedErrorHandler:   enhancedErrorHandler,
		StepEnhancer:           stepEnhancer,
		SamplingClient:         domainAdapter,
		PromptManager:          manager,
	}
	mcpServer := ProvideServer(dependencies)
	return mcpServer, nil
}

// InitializeBasicServer creates a server without ML capabilities for testing
func InitializeBasicServer(logger *slog.Logger) (api.MCPServer, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	serverConfig := ProvideServerConfigFromUnified(config)
	optimizedSessionManager := ProvideSessionManager(serverConfig, logger)
	store := ProvideResourceStore(logger)
	sinkFactory := ProvideProgressFactory(logger)
	publisher := events.NewPublisher(logger)
	sagaCoordinator := saga.NewSagaCoordinator(logger, publisher)
	stepProvider := ProvideStepProvider(logger)
	client, err := ProvideSamplingClient(config, logger)
	if err != nil {
		return nil, err
	}
	domainAdapter := provideDomainSampler(client)
	optimizedBuildStep := ProvideMLOptimizedBuildStep(domainAdapter, logger)
	step := ProvideOptimizedBuildStep(optimizedBuildStep)
	stepFactory := ProvideStepFactory(stepProvider, step, logger)
	tracer := tracing.NewTracerAdapter()
	baseOrchestrator := ProvideBaseOrchestrator(stepFactory, sinkFactory, logger, tracer)
	workflowOrchestrator := ProvideWorkflowOrchestrator(baseOrchestrator)
	eventAwareOrchestrator := ProvideEventOrchestrator(baseOrchestrator, publisher)
	commandRunner := ProvideCommandRunner()
	containerManager := ProvideContainerManager(commandRunner, logger)
	deploymentManager := ProvideDeploymentManager(commandRunner, logger)
	sagaAwareOrchestrator := ProvideSagaOrchestrator(eventAwareOrchestrator, sagaCoordinator, containerManager, deploymentManager, logger)
	errorPatternRecognizer := ProvideErrorPatternRecognizer(domainAdapter, logger)
	enhancedErrorHandler := ProvideEnhancedErrorHandler(domainAdapter, publisher, logger)
	stepEnhancer := ProvideStepEnhancer(enhancedErrorHandler, logger)
	manager, err := ProvidePromptManager(config, logger)
	if err != nil {
		return nil, err
	}
	dependencies := &application.Dependencies{
		Logger:                 logger,
		Config:                 serverConfig,
		SessionManager:         optimizedSessionManager,
		ResourceStore:          store,
		ProgressFactory:        sinkFactory,
		EventPublisher:         publisher,
		SagaCoordinator:        sagaCoordinator,
		WorkflowOrchestrator:   workflowOrchestrator,
		EventAwareOrchestrator: eventAwareOrchestrator,
		SagaAwareOrchestrator:  sagaAwareOrchestrator,
		ErrorPatternRecognizer: errorPatternRecognizer,
		EnhancedErrorHandler:   enhancedErrorHandler,
		StepEnhancer:           stepEnhancer,
		SamplingClient:         domainAdapter,
		PromptManager:          manager,
	}
	mcpServer := ProvideServer(dependencies)
	return mcpServer, nil
}

// InitializeWorkflowOrchestrator creates just the workflow orchestrator for testing
func InitializeWorkflowOrchestrator(logger *slog.Logger) (workflow.WorkflowOrchestrator, error) {
	stepProvider := ProvideStepProvider(logger)
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	client, err := ProvideSamplingClient(config, logger)
	if err != nil {
		return nil, err
	}
	domainAdapter := provideDomainSampler(client)
	optimizedBuildStep := ProvideMLOptimizedBuildStep(domainAdapter, logger)
	step := ProvideOptimizedBuildStep(optimizedBuildStep)
	stepFactory := ProvideStepFactory(stepProvider, step, logger)
	sinkFactory := ProvideProgressFactory(logger)
	tracer := tracing.NewTracerAdapter()
	baseOrchestrator := ProvideBaseOrchestrator(stepFactory, sinkFactory, logger, tracer)
	workflowOrchestrator := ProvideWorkflowOrchestrator(baseOrchestrator)
	return workflowOrchestrator, nil
}

// InitializeTestDependencies creates application dependencies for testing
func InitializeTestDependencies(logger *slog.Logger, config workflow.ServerConfig) (*application.Dependencies, error) {
	optimizedSessionManager := ProvideSessionManager(config, logger)
	store := ProvideResourceStore(logger)
	sinkFactory := ProvideProgressFactory(logger)
	publisher := events.NewPublisher(logger)
	sagaCoordinator := saga.NewSagaCoordinator(logger, publisher)
	stepProvider := ProvideStepProvider(logger)
	configConfig := ProvideConfigFromServerConfig(config)
	client, err := ProvideSamplingClient(configConfig, logger)
	if err != nil {
		return nil, err
	}
	domainAdapter := provideDomainSampler(client)
	optimizedBuildStep := ProvideMLOptimizedBuildStep(domainAdapter, logger)
	step := ProvideOptimizedBuildStep(optimizedBuildStep)
	stepFactory := ProvideStepFactory(stepProvider, step, logger)
	tracer := tracing.NewTracerAdapter()
	baseOrchestrator := ProvideBaseOrchestrator(stepFactory, sinkFactory, logger, tracer)
	workflowOrchestrator := ProvideWorkflowOrchestrator(baseOrchestrator)
	eventAwareOrchestrator := ProvideEventOrchestrator(baseOrchestrator, publisher)
	commandRunner := ProvideCommandRunner()
	containerManager := ProvideContainerManager(commandRunner, logger)
	deploymentManager := ProvideDeploymentManager(commandRunner, logger)
	sagaAwareOrchestrator := ProvideSagaOrchestrator(eventAwareOrchestrator, sagaCoordinator, containerManager, deploymentManager, logger)
	errorPatternRecognizer := ProvideErrorPatternRecognizer(domainAdapter, logger)
	enhancedErrorHandler := ProvideEnhancedErrorHandler(domainAdapter, publisher, logger)
	stepEnhancer := ProvideStepEnhancer(enhancedErrorHandler, logger)
	manager, err := ProvidePromptManager(configConfig, logger)
	if err != nil {
		return nil, err
	}
	dependencies := &application.Dependencies{
		Logger:                 logger,
		Config:                 config,
		SessionManager:         optimizedSessionManager,
		ResourceStore:          store,
		ProgressFactory:        sinkFactory,
		EventPublisher:         publisher,
		SagaCoordinator:        sagaCoordinator,
		WorkflowOrchestrator:   workflowOrchestrator,
		EventAwareOrchestrator: eventAwareOrchestrator,
		SagaAwareOrchestrator:  sagaAwareOrchestrator,
		ErrorPatternRecognizer: errorPatternRecognizer,
		EnhancedErrorHandler:   enhancedErrorHandler,
		StepEnhancer:           stepEnhancer,
		SamplingClient:         domainAdapter,
		PromptManager:          manager,
	}
	return dependencies, nil
}
