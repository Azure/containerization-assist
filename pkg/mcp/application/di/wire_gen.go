// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/Azure/container-kit/pkg/mcp/application/api"
	"github.com/Azure/container-kit/pkg/mcp/application/services"
)

// Injectors from wire.go:

// InitializeContainer creates a fully wired container with all dependencies
func InitializeContainer() (*Container, error) {
	toolRegistry := NewToolRegistry()
	sessionStore := NewSessionStore()
	sessionState := NewSessionState()
	buildExecutor := NewBuildExecutor()
	servicesToolRegistry := NewToolRegistryService(toolRegistry)
	workflowExecutor := NewWorkflowExecutor(toolRegistry)
	scanner := NewScanner()
	configValidator := NewConfigValidator()
	errorReporter := NewErrorReporter()
	container := &Container{
		ToolRegistry:        toolRegistry,
		SessionStore:        sessionStore,
		SessionState:        sessionState,
		BuildExecutor:       buildExecutor,
		ToolRegistryService: servicesToolRegistry,
		WorkflowExecutor:    workflowExecutor,
		Scanner:             scanner,
		ConfigValidator:     configValidator,
		ErrorReporter:       errorReporter,
	}
	return container, nil
}

// wire.go:

// Container holds all application services with dependency injection
type Container struct {
	ToolRegistry        api.ToolRegistry
	SessionStore        services.SessionStore
	SessionState        services.SessionState
	BuildExecutor       services.BuildExecutor
	ToolRegistryService services.ToolRegistry
	WorkflowExecutor    services.WorkflowExecutor
	Scanner             services.Scanner
	ConfigValidator     services.ConfigValidator
	ErrorReporter       services.ErrorReporter
}
