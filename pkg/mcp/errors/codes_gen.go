// Code generated by go generate; DO NOT EDIT.
// This file was generated from codes.yaml

package errors

// Error codes - generated from codes.yaml
const (
	CodeUnknown Code = "UNKNOWN" // Unknown error occurred
	CodeInternalError Code = "INTERNAL_ERROR" // Internal system error
	CodeValidationFailed Code = "VALIDATION_FAILED" // Input validation failed
	CodeInvalidParameter Code = "INVALID_PARAMETER" // Invalid parameter provided
	CodeMissingParameter Code = "MISSING_PARAMETER" // Required parameter missing
	CodeTypeConversionFailed Code = "TYPE_CONVERSION_FAILED" // Type conversion failed
	CodeNetworkTimeout Code = "NETWORK_TIMEOUT" // Network operation timed out
	CodeIoError Code = "IO_ERROR" // Input/output operation failed
	CodeFileNotFound Code = "FILE_NOT_FOUND" // File not found
	CodePermissionDenied Code = "PERMISSION_DENIED" // Permission denied
	CodeResourceNotFound Code = "RESOURCE_NOT_FOUND" // Resource not found
	CodeResourceAlreadyExists Code = "RESOURCE_ALREADY_EXISTS" // Resource already exists
	CodeResourceExhausted Code = "RESOURCE_EXHAUSTED" // Resource exhausted
	CodeDockerfileSyntaxError Code = "DOCKERFILE_SYNTAX_ERROR" // Dockerfile syntax error
	CodeImageBuildFailed Code = "IMAGE_BUILD_FAILED" // Image build failed
	CodeImagePushFailed Code = "IMAGE_PUSH_FAILED" // Image push failed
	CodeImagePullFailed Code = "IMAGE_PULL_FAILED" // Image pull failed
	CodeContainerStartFailed Code = "CONTAINER_START_FAILED" // Container start failed
	CodeKubernetesApiError Code = "KUBERNETES_API_ERROR" // Kubernetes API error
	CodeManifestInvalid Code = "MANIFEST_INVALID" // Kubernetes manifest invalid
	CodeDeploymentFailed Code = "DEPLOYMENT_FAILED" // Deployment failed
	CodeNamespaceNotFound Code = "NAMESPACE_NOT_FOUND" // Kubernetes namespace not found
	CodeToolNotFound Code = "TOOL_NOT_FOUND" // Tool not found
	CodeToolExecutionFailed Code = "TOOL_EXECUTION_FAILED" // Tool execution failed
	CodeToolAlreadyRegistered Code = "TOOL_ALREADY_REGISTERED" // Tool already registered
	CodeVersionMismatch Code = "VERSION_MISMATCH" // Version mismatch
	CodeConfigurationInvalid Code = "CONFIGURATION_INVALID" // Configuration invalid
	CodeNetworkError Code = "NETWORK_ERROR" // Network error
	CodeOperationFailed Code = "OPERATION_FAILED" // Operation failed
	CodeTimeoutError Code = "TIMEOUT_ERROR" // Timeout error
	CodeTypeMismatch Code = "TYPE_MISMATCH" // Type mismatch
	CodeSecurityError Code = "SECURITY_ERROR" // Security error
	CodeValidationError Code = "VALIDATION_ERROR" // Validation error
	CodeSecurityViolation Code = "SECURITY_VIOLATION" // Security violation
	CodeVulnerabilityFound Code = "VULNERABILITY_FOUND" // Vulnerability found
	CodeNotImplemented Code = "NOT_IMPLEMENTED" // Not implemented
	CodeAlreadyExists Code = "ALREADY_EXISTS" // Already exists
	CodeInvalidState Code = "INVALID_STATE" // Invalid state
	CodeNotFound Code = "NOT_FOUND" // Not found
	CodeDisabled Code = "DISABLED" // Disabled
	CodeInternal Code = "INTERNAL" // Internal error
	CodeInvalidType Code = "INVALID_TYPE" // Invalid type
)

// Error code metadata
var codeMetadata = map[Code]struct {
	Description string
	Severity    Severity
	Retryable   bool
}{
	CodeUnknown: {
		Description: "Unknown error occurred",
		Severity:    SeverityLow,
		Retryable:   false,
	},
	CodeInternalError: {
		Description: "Internal system error",
		Severity:    SeverityCritical,
		Retryable:   false,
	},
	CodeValidationFailed: {
		Description: "Input validation failed",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeInvalidParameter: {
		Description: "Invalid parameter provided",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeMissingParameter: {
		Description: "Required parameter missing",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeTypeConversionFailed: {
		Description: "Type conversion failed",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeNetworkTimeout: {
		Description: "Network operation timed out",
		Severity:    SeverityHigh,
		Retryable:   true,
	},
	CodeIoError: {
		Description: "Input/output operation failed",
		Severity:    SeverityHigh,
		Retryable:   false,
	},
	CodeFileNotFound: {
		Description: "File not found",
		Severity:    SeverityHigh,
		Retryable:   false,
	},
	CodePermissionDenied: {
		Description: "Permission denied",
		Severity:    SeverityHigh,
		Retryable:   false,
	},
	CodeResourceNotFound: {
		Description: "Resource not found",
		Severity:    SeverityHigh,
		Retryable:   false,
	},
	CodeResourceAlreadyExists: {
		Description: "Resource already exists",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeResourceExhausted: {
		Description: "Resource exhausted",
		Severity:    SeverityHigh,
		Retryable:   true,
	},
	CodeDockerfileSyntaxError: {
		Description: "Dockerfile syntax error",
		Severity:    SeverityHigh,
		Retryable:   false,
	},
	CodeImageBuildFailed: {
		Description: "Image build failed",
		Severity:    SeverityHigh,
		Retryable:   true,
	},
	CodeImagePushFailed: {
		Description: "Image push failed",
		Severity:    SeverityHigh,
		Retryable:   true,
	},
	CodeImagePullFailed: {
		Description: "Image pull failed",
		Severity:    SeverityHigh,
		Retryable:   true,
	},
	CodeContainerStartFailed: {
		Description: "Container start failed",
		Severity:    SeverityHigh,
		Retryable:   true,
	},
	CodeKubernetesApiError: {
		Description: "Kubernetes API error",
		Severity:    SeverityHigh,
		Retryable:   true,
	},
	CodeManifestInvalid: {
		Description: "Kubernetes manifest invalid",
		Severity:    SeverityHigh,
		Retryable:   false,
	},
	CodeDeploymentFailed: {
		Description: "Deployment failed",
		Severity:    SeverityHigh,
		Retryable:   true,
	},
	CodeNamespaceNotFound: {
		Description: "Kubernetes namespace not found",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeToolNotFound: {
		Description: "Tool not found",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeToolExecutionFailed: {
		Description: "Tool execution failed",
		Severity:    SeverityHigh,
		Retryable:   false,
	},
	CodeToolAlreadyRegistered: {
		Description: "Tool already registered",
		Severity:    SeverityLow,
		Retryable:   false,
	},
	CodeVersionMismatch: {
		Description: "Version mismatch",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeConfigurationInvalid: {
		Description: "Configuration invalid",
		Severity:    SeverityHigh,
		Retryable:   false,
	},
	CodeNetworkError: {
		Description: "Network error",
		Severity:    SeverityHigh,
		Retryable:   true,
	},
	CodeOperationFailed: {
		Description: "Operation failed",
		Severity:    SeverityHigh,
		Retryable:   false,
	},
	CodeTimeoutError: {
		Description: "Timeout error",
		Severity:    SeverityHigh,
		Retryable:   true,
	},
	CodeTypeMismatch: {
		Description: "Type mismatch",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeSecurityError: {
		Description: "Security error",
		Severity:    SeverityCritical,
		Retryable:   false,
	},
	CodeValidationError: {
		Description: "Validation error",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeSecurityViolation: {
		Description: "Security violation",
		Severity:    SeverityCritical,
		Retryable:   false,
	},
	CodeVulnerabilityFound: {
		Description: "Vulnerability found",
		Severity:    SeverityHigh,
		Retryable:   false,
	},
	CodeNotImplemented: {
		Description: "Not implemented",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeAlreadyExists: {
		Description: "Already exists",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeInvalidState: {
		Description: "Invalid state",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeNotFound: {
		Description: "Not found",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
	CodeDisabled: {
		Description: "Disabled",
		Severity:    SeverityLow,
		Retryable:   false,
	},
	CodeInternal: {
		Description: "Internal error",
		Severity:    SeverityCritical,
		Retryable:   false,
	},
	CodeInvalidType: {
		Description: "Invalid type",
		Severity:    SeverityMedium,
		Retryable:   false,
	},
}

// GetCodeMetadata returns metadata for an error code
func GetCodeMetadata(code Code) (description string, severity Severity, retryable bool, exists bool) {
	if meta, ok := codeMetadata[code]; ok {
		return meta.Description, meta.Severity, meta.Retryable, true
	}
	return "", SeverityUnknown, false, false
}

// IsRetryableCode returns true if the given error code is retryable
func IsRetryableCode(code Code) bool {
	if meta, ok := codeMetadata[code]; ok {
		return meta.Retryable
	}
	return false
}
