// Code generated by tools/register-tools. DO NOT EDIT.
// Generated at: Auto-generated at build time

package runtime

import (
	"fmt"

	"github.com/Azure/container-kit/pkg/mcp/core/session"
	"github.com/Azure/container-kit/pkg/mcp/internal/analyze"
	"github.com/Azure/container-kit/pkg/mcp/internal/build"
	"github.com/Azure/container-kit/pkg/mcp/internal/conversation"
	"github.com/Azure/container-kit/pkg/mcp/internal/deploy"
	"github.com/Azure/container-kit/pkg/mcp/internal/scan"
	"github.com/Azure/container-kit/pkg/mcp/internal/server"
)

// Auto-generated tool registry
// Uses interface{} to avoid import cycles - the actual tools implement mcptypes.Tool
var generatedToolRegistry = map[string]func() interface{}{
	"build_image":                 func() interface{} { return &build.BuildImageTool{} },
	"atomic_build_image":          func() interface{} { return &build.AtomicBuildImageTool{} },
	"atomic_pull_image":           func() interface{} { return &build.AtomicPullImageTool{} },
	"push_image":                  func() interface{} { return &build.PushImageTool{} },
	"atomic_push_image":           func() interface{} { return &build.AtomicPushImageTool{} },
	"atomic_tag_image":            func() interface{} { return &build.AtomicTagImageTool{} },
	"atomic_check_health":         func() interface{} { return &deploy.AtomicCheckHealthTool{} },
	"atomic_deploy_kubernetes":    func() interface{} { return &deploy.AtomicDeployKubernetesTool{} },
	"generate_manifests":          func() interface{} { return &deploy.GenerateManifestsTool{} },
	"atomic_generate_manifests":   func() interface{} { return &deploy.AtomicGenerateManifestsTool{} },
	"validate_deployment":         func() interface{} { return &deploy.AtomicValidateDeploymentTool{} },
	"atomic_scan_image_security":  func() interface{} { return &scan.AtomicScanImageSecurityTool{} },
	"atomic_scan_secrets":         func() interface{} { return &scan.AtomicScanSecretsTool{} },
	"analyze_repository_redirect": func() interface{} { return &analyze.AnalyzeRepositoryRedirectTool{} },
	"atomic_analyze_repository":   func() interface{} { return &analyze.AtomicAnalyzeRepositoryTool{} },
	"analyze_repository":          func() interface{} { return &analyze.AnalyzeRepositoryTool{} },
	"generate_dockerfile":         func() interface{} { return &analyze.AtomicGenerateDockerfileTool{} },
	"atomic_validate_dockerfile":  func() interface{} { return &analyze.AtomicValidateDockerfileTool{} },
	"delete_session":              func() interface{} { return &session.DeleteSessionTool{} },
	"list_sessions":               func() interface{} { return &session.ListSessionsTool{} },
	"add_session_label":           func() interface{} { return &session.AddSessionLabelTool{} },
	"remove_session_label":        func() interface{} { return &session.RemoveSessionLabelTool{} },
	"update_session_labels":       func() interface{} { return &session.UpdateSessionLabelsTool{} },
	"list_session_labels":         func() interface{} { return &session.ListSessionLabelsTool{} },
	"check_registry_health":       func() interface{} { return &server.CheckRegistryHealthTool{} },
	"get_job_status":              func() interface{} { return &server.GetJobStatusTool{} },
	"get_logs":                    func() interface{} { return &server.GetLogsTool{} },
	"get_telemetry_metrics":       func() interface{} { return &server.GetTelemetryMetricsTool{} },
	"chat":                        func() interface{} { return &conversation.ChatTool{} },
}

// RegisterAllTools registers all discovered tools with the given registry
func RegisterAllTools(registry interface{}) error {
	// Use type assertion to work with the actual registry type
	if reg, ok := registry.(interface {
		Register(name string, factory func() interface{}) error
	}); ok {
		for name, factory := range generatedToolRegistry {
			tool := factory()
			if err := reg.Register(name, func() interface{} { return tool }); err != nil {
				return fmt.Errorf("failed to register tool %s: %w", name, err)
			}
		}
		return nil
	}
	return fmt.Errorf("registry does not implement required Register method")
}

// GetAllToolNames returns a list of all registered tool names
func GetAllToolNames() []string {
	names := make([]string, 0, len(generatedToolRegistry))
	for name := range generatedToolRegistry {
		names = append(names, name)
	}
	return names
}

// GetToolCount returns the number of registered tools
func GetToolCount() int {
	return len(generatedToolRegistry)
}
