name: "containerKit.analyze"
version: "1.0.0"
description: "Analyze a repository for containerization readiness and provide recommendations"
category: "analysis"
parameters:
  repo_path:
    type: "string"
    description: "Repository path or URL"
    default: "./"
    examples: ["./", "/path/to/repo", "https://github.com/user/repo"]
  depth:
    type: "string"
    description: "Analysis depth level"
    default: "standard"
    options: ["quick", "standard", "deep", "comprehensive"]
  focus_areas:
    type: "array"
    description: "Specific areas to focus analysis on"
    default: ["dependencies", "security", "performance"]
    options: ["dependencies", "security", "performance", "architecture", "deployment"]
  include_recommendations:
    type: "boolean"
    description: "Include improvement recommendations"
    default: true

template: |
  I'll analyze this repository for containerization readiness and provide comprehensive insights.
  
  ## Analysis Configuration
  - **Repository**: {{.repo_path}}
  - **Depth**: {{.depth}}
  - **Focus Areas**: {{range $index, $area := .focus_areas}}{{if $index}}, {{end}}{{$area}}{{end}}
  - **Include Recommendations**: {{.include_recommendations}}
  
  ## Analysis Framework
  Please provide a detailed analysis covering:
  
  ### üèóÔ∏è Technology Stack Assessment
  - **Language/Runtime**: Identify primary and secondary technologies
  - **Framework Detection**: Web frameworks, libraries, and tools in use
  - **Dependency Analysis**: Package managers, dependency files, and versions
  - **Build System**: Build tools, scripts, and configuration files
  
  ### üìÅ Project Structure Analysis
  - **Directory Layout**: Assess organization and standard compliance
  - **Configuration Files**: Docker, CI/CD, deployment configurations
  - **Documentation**: README, deployment guides, and API docs
  - **Entry Points**: Main applications, services, and executables
  
  {{if contains .focus_areas "dependencies"}}
  ### üì¶ Dependency Assessment
  - **Package Management**: Dependency lock files and version constraints
  - **Vulnerability Scan**: Known security issues in dependencies
  - **License Compliance**: License compatibility and legal considerations
  - **Update Strategy**: Outdated packages and upgrade recommendations
  {{end}}
  
  {{if contains .focus_areas "security"}}
  ### üîí Security Analysis
  - **Secret Detection**: Hardcoded credentials, API keys, certificates
  - **Configuration Security**: Secure defaults and sensitive data handling
  - **Runtime Security**: User permissions, file system access, network policies
  - **Supply Chain**: Dependency integrity and trusted sources
  {{end}}
  
  {{if contains .focus_areas "performance"}}
  ### ‚ö° Performance Considerations
  - **Resource Requirements**: CPU, memory, and storage needs
  - **Startup Time**: Application boot performance optimization
  - **Image Size**: Base image selection and layer optimization
  - **Runtime Efficiency**: Process management and resource utilization
  {{end}}
  
  {{if contains .focus_areas "architecture"}}
  ### üèõÔ∏è Architecture Evaluation
  - **Service Design**: Microservices vs monolith considerations
  - **Data Management**: Database connections and data persistence
  - **External Dependencies**: APIs, services, and integration points
  - **Scalability**: Horizontal and vertical scaling capabilities
  {{end}}
  
  {{if contains .focus_areas "deployment"}}
  ### üöÄ Deployment Readiness
  - **Environment Configuration**: Configuration management strategy
  - **Health Checks**: Readiness and liveness probe requirements
  - **Service Discovery**: Network and service communication
  - **Monitoring**: Logging, metrics, and observability setup
  {{end}}
  
  ## Containerization Readiness Score
  Provide an overall score (1-10) and breakdown:
  - **Ready**: Can be containerized immediately
  - **Minor Issues**: Small fixes needed
  - **Major Issues**: Significant changes required
  - **Not Ready**: Substantial refactoring needed
  
  {{if .include_recommendations}}
  ## üí° Recommendations
  
  ### High Priority
  - Critical issues that must be addressed
  - Security vulnerabilities and fixes
  - Blocking containerization problems
  
  ### Medium Priority  
  - Performance optimizations
  - Best practice implementations
  - Configuration improvements
  
  ### Low Priority
  - Nice-to-have enhancements
  - Future considerations
  - Optional optimizations
  
  ### üõ†Ô∏è Implementation Steps
  1. **Immediate Actions**: Quick wins and critical fixes
  2. **Short-term Goals**: 1-2 week improvements
  3. **Long-term Planning**: Strategic architectural changes
  {{end}}
  
  ## Next Steps
  Based on this analysis, I recommend:
  1. Addressing any critical security or compatibility issues
  2. Implementing suggested configuration changes
  3. Proceeding with containerization using the `containerKit.deploy` workflow
  
  Please analyze the repository and provide this comprehensive assessment.

metadata:
  tags: ["analysis", "assessment", "readiness", "recommendations", "best-practices"]
  complexity: "advanced"
  estimated_tokens: 1500
  last_updated: "2025-01-12"
  author: "container-kit"