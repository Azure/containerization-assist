I'll generate production-ready Kubernetes manifests for your application.

## Deployment Configuration
- **Application**: my-app
- **Image**: nginx:latest
- **Namespace**: default
- **Replicas**: 1
- **Port**: 80
- **Service Type**: ClusterIP
- **Environment**: development

## Resource Requirements
```yaml
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 512Mi
```

## Required Kubernetes Manifests
Please generate the following manifests with production-ready configurations:

### 1. üì¶ Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
  namespace: default
  labels:
    app: my-app
    environment: development
    version: "1.0.0"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
        environment: development
    spec:
      containers:
      - name: my-app
        image: nginx:latest
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        # Add appropriate health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
```

### 2. üåê Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
  namespace: default
  labels:
    app: my-app
    environment: development
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: my-app
```

### 3. üîí ServiceAccount
```yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-app-sa
  namespace: default
  labels:
    app: my-app
    environment: development
automountServiceAccountToken: false
```

### 4. üìù ConfigMap (if needed)
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-app-config
  namespace: default
  labels:
    app: my-app
    environment: development
data:
  # Add your application configuration here
  app.env: "development"
  log.level: "info"
```



### 6. üõ°Ô∏è NetworkPolicy (Security)
```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-app-netpol
  namespace: default
  labels:
    app: my-app
    environment: development
spec:
  podSelector:
    matchLabels:
      app: my-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: default
    ports:
    - protocol: TCP
      port: 80
  egress:
  - {} # Allow all egress (customize as needed)
```

## Best Practices Included
‚úÖ **Security**: Non-root user, read-only filesystem, dropped capabilities
‚úÖ **Reliability**: Rolling updates, health checks, resource limits
‚úÖ **Observability**: Proper labels and metadata
‚úÖ **Scalability**: HPA for production environments
‚úÖ **Network Security**: NetworkPolicy for traffic control

## Deployment Commands
```bash
# Apply all manifests
kubectl apply -f deployment.yaml
kubectl apply -f service.yaml
kubectl apply -f serviceaccount.yaml
kubectl apply -f configmap.yaml

kubectl apply -f networkpolicy.yaml

# Verify deployment
kubectl get pods -n default -l app=my-app
kubectl get svc -n default -l app=my-app

# Check rollout status
kubectl rollout status deployment/my-app -n default
```

## Customization Notes
- Adjust health check paths based on your application endpoints
- Modify resource requests/limits based on actual usage
- Update security contexts based on application requirements
- Add environment-specific configurations to ConfigMap
- Configure ingress if external access is needed

Please generate complete, production-ready Kubernetes manifests based on this template.
