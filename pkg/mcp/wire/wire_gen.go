// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/Azure/container-kit/pkg/mcp/api"
	"github.com/Azure/container-kit/pkg/mcp/application"
	"github.com/Azure/container-kit/pkg/mcp/application/session"
	"github.com/Azure/container-kit/pkg/mcp/domain/workflow"
	"github.com/Azure/container-kit/pkg/mcp/infrastructure/progress"
	"github.com/Azure/container-kit/pkg/mcp/infrastructure/prompts"
	"github.com/Azure/container-kit/pkg/mcp/infrastructure/resources"
	"github.com/Azure/container-kit/pkg/mcp/infrastructure/sampling"
	"github.com/google/wire"
	"log/slog"
	"time"
)

// Injectors from wire.go:

// InitializeServer creates a fully wired MCP server
func InitializeServer(logger *slog.Logger, config workflow.ServerConfig) (api.MCPServer, error) {
	duration := provideDefaultTTL()
	int2 := provideMaxSessions(config)
	sessionManager := session.NewMemorySessionManager(logger, duration, int2)
	store := resources.NewStore(logger)
	sinkFactory := progress.NewSinkFactory(logger)
	client := provideSamplingClient(logger)
	managerConfig := providePromptManagerConfig(config)
	manager, err := prompts.NewManager(logger, managerConfig)
	if err != nil {
		return nil, err
	}
	dependencies := provideDependencies(logger, config, sessionManager, store, sinkFactory, client, manager)
	mcpServer := provideServer(dependencies)
	return mcpServer, nil
}

// wire.go:

// ProviderSet contains all the providers for the MCP server
var ProviderSet = wire.NewSet(

	provideServer, session.NewMemorySessionManager, provideDefaultTTL,
	provideMaxSessions, resources.NewStore, provideSamplingClient, prompts.NewManager, providePromptManagerConfig, progress.NewSinkFactory, provideDependencies,
)

// provideDependencies creates the Dependencies struct with all wired components
func provideDependencies(
	logger *slog.Logger,
	config workflow.ServerConfig,
	sessionManager session.SessionManager,
	resourceStore *resources.Store,
	progressFactory *progress.SinkFactory,
	samplingClient *sampling.Client,
	promptManager *prompts.Manager,
) *application.Dependencies {
	return &application.Dependencies{
		Logger:          logger,
		Config:          config,
		SessionManager:  sessionManager,
		ResourceStore:   resourceStore,
		ProgressFactory: progressFactory,
		SamplingClient:  samplingClient,
		PromptManager:   promptManager,
	}
}

// providePromptManagerConfig creates the config for the prompt manager
func providePromptManagerConfig(config workflow.ServerConfig) prompts.ManagerConfig {
	return prompts.ManagerConfig{
		TemplateDir:     "",
		EnableHotReload: false,
		AllowOverride:   false,
	}
}

// provideDefaultTTL provides the default session TTL
func provideDefaultTTL() time.Duration {
	return 24 * time.Hour
}

// provideMaxSessions extracts max sessions from config
func provideMaxSessions(config workflow.ServerConfig) int {
	return config.MaxSessions
}

// provideServer creates the MCP server with dependencies
func provideServer(deps *application.Dependencies) api.MCPServer {
	return application.NewServer(application.WithDependencies(deps))
}

// provideSamplingClient creates the sampling client without options
func provideSamplingClient(logger *slog.Logger) *sampling.Client {
	return sampling.NewClient(logger)
}
