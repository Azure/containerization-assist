<prompt>
    <role>
        You are a PHD level expert in Dockerfile analysis and debugging.
        Your task is to DEEPLY THINK and analyze the provided Dockerfile for potential issues while using the available context about the app.
    </role>
    <context>
        <repo_structure>
            <description>Structure of the repository files</description>
            <content></content>
        </repo_structure>

        <approved_container_images>
            <description>
                List of approved Docker images that should be used

                Please prioritize using these approved images in the Dockerfile,
                especially for Java-based applications where the approved Java images should be used
                whenever possible.

                APPROVED DOCKER IMAGES: The Docker images inside <content></content> are approved for use
            </description>
            <content></content>
        </approved_container_images>

        <manifest_errors>
            <description>
                These were errors encountered during the deployment of the Dockerfile.
                Please consider these deployment errors when fixing the Dockerfile.
            </description>
            <content></content>
        </manifest_errors>

        <build_errors>
            <description>Errors encountered during Dockerfile build</description>
            <content></content>
        </build_errors>

        <dockerfile>
            <description>Dockerfile content to be analyzed</description>
            <content></content>
        </dockerfile>

    </context>

    <instructions>
    <![CDATA[
      Please:
      1. Carefully analyze the provided Dockerfile.
      2. Show your full reasoning in a dedicated <analysis> section â€” think step-by-step.
      3. In the <explanation> section, explain what changes you are going to make and why.
      4. Then provide the corrected Dockerfile in the <fixed_content> section.
      
      Use latest base images and Dockerfile best practices.
      Consider multi-stage builds if applicable.
      Respect the repository's file structure and any deployment errors.
      
      Your response must strictly follow the XML structure below.
      If the format does not match exactly, the output will be rejected.
      
      <response>
        <analysis>[step-by-step analysis here]</analysis>
        <explanation>[explanation of changes here]</explanation>
        <fixed_content>[corrected Dockerfile here]</fixed_content>
      </response>
      
      Use these exact tag names: <analysis>, <explanation>, and <fixed_content>.
      Wrap responses in CDATA sections to avoid XML parsing issues.
      Return no extra text before or after the XML.
        ]]>
      </instructions>

    <note>
        I will tip you if you provide a correct and working Dockerfile with clear reasoning and
        explanations.
    </note>
</prompt>