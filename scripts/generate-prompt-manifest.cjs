#!/usr/bin/env node
/**
 * Generate prompt manifest and selective embedding
 * Part of Sprint 2: Implement Prompt Manifest System
 *
 * This replaces the old generate-prompt-index.cjs with a more efficient approach:
 * - Creates a manifest.json with metadata for all prompts
 * - Only embeds critical prompts (dockerfile-generation, k8s-manifests, etc.)
 * - Reduces bundle size by ~90%
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const yaml = require('js-yaml');

const PROMPTS_DIR = path.join(__dirname, '../src/prompts');
const MANIFEST_FILE = path.join(__dirname, '../src/prompts/manifest.json');
const EMBEDDED_FILE = path.join(__dirname, '../src/prompts/embedded-prompts.generated.ts');

// Critical prompts that must be embedded for offline operation
const MUST_EMBED_IDS = new Set([
  'dockerfile-generation',
  'k8s-generation',
  'generate-k8s-manifests',
  'fix-dockerfile',
  'repository-analysis',
  'build-image'
]);

/**
 * Find all YAML files recursively
 */
function findYamlFiles(dir, files = []) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      findYamlFiles(fullPath, files);
    } else if (entry.name.endsWith('.yaml')) {
      files.push(fullPath);
    }
  }

  return files;
}

/**
 * Generate SHA256 hash for content
 */
function hashContent(content) {
  return crypto.createHash('sha256').update(content, 'utf8').digest('hex');
}

/**
 * Derive prompt ID from file path or YAML content
 */
function deriveIdFromFile(filePath, yamlContent) {
  // First try to get ID from YAML content
  if (yamlContent && yamlContent.id) {
    return yamlContent.id;
  }

  // Fallback: derive from filename
  const baseName = path.basename(filePath, '.yaml');
  return baseName;
}

/**
 * Get relative path from prompts directory
 */
function getRelativePath(filePath) {
  return path.relative(PROMPTS_DIR, filePath);
}

/**
 * Generate manifest and embedded prompts
 */
function generateManifest() {
  console.log('üìù Generating prompt manifest and selective embedding...');

  const yamlFiles = findYamlFiles(PROMPTS_DIR);
  const manifest = [];
  const embedded = {};
  const embeddedIds = [];

  for (const file of yamlFiles) {
    try {
      const content = fs.readFileSync(file, 'utf-8');
      const parsed = yaml.load(content);

      const id = deriveIdFromFile(file, parsed);
      const relativePath = getRelativePath(file);
      const sha256 = hashContent(content);

      // Create manifest entry
      const manifestEntry = {
        id,
        path: relativePath,
        sha256,
        category: parsed?.category || 'unknown',
        version: parsed?.version || '1.0.0'
      };

      manifest.push(manifestEntry);

      // Embed critical prompts
      if (MUST_EMBED_IDS.has(id)) {
        embedded[id] = content;
        embeddedIds.push(id);
        console.log(`üîí Embedding critical prompt: ${id}`);
      } else {
        console.log(`üìÑ Adding to manifest: ${id}`);
      }

    } catch (error) {
      console.warn(`‚ö†Ô∏è  Failed to process ${file}:`, error.message);
    }
  }

  // Write manifest.json
  const manifestData = {
    prompts: manifest,
    embedded: embeddedIds,
    generatedAt: new Date().toISOString()
  };

  fs.writeFileSync(MANIFEST_FILE, JSON.stringify(manifestData, null, 2));
  console.log(`‚úÖ Generated manifest: ${MANIFEST_FILE}`);

  // Write embedded prompts TypeScript file
  const embeddedTsContent = `/**
 * Embedded prompts for critical functionality
 * Generated at: ${new Date().toISOString()}
 * DO NOT EDIT - This file is generated by scripts/generate-prompt-manifest.cjs
 */

// Only critical prompts are embedded to reduce bundle size
const EMBEDDED_PROMPTS: Record<string, string> = ${JSON.stringify(embedded, null, 2)};

export default EMBEDDED_PROMPTS;

/**
 * Check if a prompt is embedded
 */
export function isEmbedded(id: string): boolean {
  return id in EMBEDDED_PROMPTS;
}

/**
 * Get embedded prompt content
 */
export function getEmbedded(id: string): string | undefined {
  return EMBEDDED_PROMPTS[id];
}

/**
 * Get all embedded prompt IDs
 */
export function getEmbeddedIds(): string[] {
  return Object.keys(EMBEDDED_PROMPTS);
}
`;

  fs.writeFileSync(EMBEDDED_FILE, embeddedTsContent);
  console.log(`‚úÖ Generated embedded prompts: ${EMBEDDED_FILE}`);

  // Summary
  console.log('\nüìä Summary:');
  console.log(`   Total prompts: ${manifest.length}`);
  console.log(`   Embedded prompts: ${embeddedIds.length}`);
  console.log(`   Lazy-loaded prompts: ${manifest.length - embeddedIds.length}`);

  // Calculate size reduction (estimated)
  const newSize = fs.statSync(EMBEDDED_FILE).size;
  const estimatedOldSize = 120000; // Approximate size of old generated-index.ts
  const reduction = ((estimatedOldSize - newSize) / estimatedOldSize * 100).toFixed(1);

  console.log(`   Bundle size reduction: ~${reduction}% (~${estimatedOldSize} ‚Üí ${newSize} bytes)`);
}

// Run the generator
generateManifest();