[
  {
    "id": "aca-cpu-memory-combinations",
    "category": "kubernetes",
    "pattern": "resources:",
    "recommendation": "Use valid CPU/memory combinations for Azure Container Apps",
    "example": "resources:\n  cpu: 0.5\n  memory: \"1Gi\"\n# Valid combinations: 0.25vCPU/0.5Gi, 0.5vCPU/1Gi, 0.75vCPU/1.5Gi, 1vCPU/2Gi, 1.25vCPU/2.5Gi, 1.5vCPU/3Gi, 1.75vCPU/3.5Gi, 2vCPU/4Gi",
    "severity": "high",
    "tags": ["azure-container-apps", "resources", "sizing", "cpu", "memory"],
    "description": "Azure Container Apps requires specific CPU and memory combinations for proper resource allocation"
  },
  {
    "id": "aca-scale-to-zero",
    "category": "kubernetes",
    "pattern": "scale:",
    "recommendation": "Enable scale-to-zero for cost-effective serverless operation",
    "example": "scale:\n  minReplicas: 0\n  maxReplicas: 10\n  rules:\n    - name: http-rule\n      http:\n        metadata:\n          concurrentRequests: \"10\"",
    "severity": "medium",
    "tags": ["azure-container-apps", "scaling", "serverless", "cost-optimization"],
    "description": "Setting minReplicas to 0 allows the app to scale down completely when not in use, reducing costs"
  },
  {
    "id": "aca-health-probes",
    "category": "kubernetes",
    "pattern": "probes:",
    "recommendation": "Configure health probes for production reliability",
    "example": "probes:\n  - type: liveness\n    httpGet:\n      path: /health\n      port: 8080\n    initialDelaySeconds: 30\n    periodSeconds: 30\n  - type: readiness\n    httpGet:\n      path: /ready\n      port: 8080\n    initialDelaySeconds: 5\n    periodSeconds: 10",
    "severity": "high",
    "tags": ["azure-container-apps", "health", "reliability", "probes"],
    "description": "Health probes ensure Container Apps can detect and recover from application failures"
  },
  {
    "id": "aca-ingress-configuration",
    "category": "kubernetes",
    "pattern": "ingress:",
    "recommendation": "Configure ingress properly for external or internal access",
    "example": "ingress:\n  external: true\n  targetPort: 8080\n  transport: \"http\"\n  allowInsecure: false\n  traffic:\n    - latestRevision: true\n      weight: 100",
    "severity": "high",
    "tags": ["azure-container-apps", "ingress", "networking", "traffic"],
    "description": "Proper ingress configuration ensures your app is accessible as intended"
  },
  {
    "id": "aca-managed-identity",
    "category": "kubernetes",
    "pattern": "identity:",
    "recommendation": "Use managed identities for secure Azure resource access",
    "example": "identity:\n  type: \"SystemAssigned\"\n# Or for user-assigned:\nidentity:\n  type: \"UserAssigned\"\n  userAssignedIdentities:\n    \"/subscriptions/{sub-id}/resourcegroups/{rg}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identity-name}\": {}",
    "severity": "high",
    "tags": ["azure-container-apps", "security", "managed-identity", "authentication"],
    "description": "Managed identities provide secure, credential-free access to Azure resources"
  },
  {
    "id": "aca-dapr-integration",
    "category": "kubernetes",
    "pattern": "dapr:",
    "recommendation": "Enable Dapr for microservices capabilities",
    "example": "dapr:\n  enabled: true\n  appId: \"my-app\"\n  appPort: 8080\n  appProtocol: \"http\"\n  enableApiLogging: true",
    "severity": "medium",
    "tags": ["azure-container-apps", "dapr", "microservices", "distributed"],
    "description": "Dapr provides building blocks for resilient, distributed applications"
  },
  {
    "id": "aca-secrets-management",
    "category": "kubernetes",
    "pattern": "secrets:",
    "recommendation": "Use secrets for sensitive configuration data",
    "example": "secrets:\n  - name: \"connection-string\"\n    value: \"Server=tcp:...\"\n# Reference in env vars:\nenv:\n  - name: \"DB_CONNECTION\"\n    secretRef: \"connection-string\"",
    "severity": "high",
    "tags": ["azure-container-apps", "security", "secrets", "configuration"],
    "description": "Secrets provide secure storage for sensitive configuration like connection strings and API keys"
  },
  {
    "id": "aca-volume-mounts",
    "category": "kubernetes",
    "pattern": "volumes:",
    "recommendation": "Use Azure Files for persistent storage needs",
    "example": "volumes:\n  - name: \"azure-files-volume\"\n    storageType: \"AzureFile\"\n    storageName: \"myazurefiles\"\n# Mount in container:\nvolumeMounts:\n  - volumeName: \"azure-files-volume\"\n    mountPath: \"/data\"",
    "severity": "medium",
    "tags": ["azure-container-apps", "storage", "volumes", "persistence"],
    "description": "Volume mounts provide persistent storage for stateful applications"
  },
  {
    "id": "aca-custom-domains",
    "category": "kubernetes",
    "pattern": "customDomains:",
    "recommendation": "Configure custom domains with managed certificates",
    "example": "customDomains:\n  - name: \"www.example.com\"\n    certificateId: \"/subscriptions/{sub-id}/resourceGroups/{rg}/providers/Microsoft.App/managedEnvironments/{env}/certificates/{cert-name}\"\n    bindingType: \"SniEnabled\"",
    "severity": "medium",
    "tags": ["azure-container-apps", "domains", "tls", "certificates"],
    "description": "Custom domains with TLS certificates provide professional, secure endpoints"
  },
  {
    "id": "aca-revision-management",
    "category": "kubernetes",
    "pattern": "activeRevisionsMode:",
    "recommendation": "Use multiple revisions for blue-green deployments",
    "example": "activeRevisionsMode: \"multiple\"\n# Traffic splitting:\ntraffic:\n  - revisionName: \"myapp--revision1\"\n    weight: 80\n  - revisionName: \"myapp--revision2\"\n    weight: 20",
    "severity": "medium",
    "tags": ["azure-container-apps", "deployments", "revisions", "traffic-splitting"],
    "description": "Multiple active revisions enable safe deployments with traffic splitting"
  },
  {
    "id": "aca-cors-configuration",
    "category": "kubernetes",
    "pattern": "cors:",
    "recommendation": "Configure CORS for web applications",
    "example": "cors:\n  allowedOrigins:\n    - \"https://www.example.com\"\n    - \"https://app.example.com\"\n  allowedMethods:\n    - \"GET\"\n    - \"POST\"\n  allowedHeaders:\n    - \"*\"\n  allowCredentials: true",
    "severity": "medium",
    "tags": ["azure-container-apps", "cors", "web", "security"],
    "description": "CORS configuration enables secure cross-origin requests for web applications"
  },
  {
    "id": "aca-ip-restrictions",
    "category": "kubernetes",
    "pattern": "ipSecurityRestrictions:",
    "recommendation": "Implement IP restrictions for enhanced security",
    "example": "ipSecurityRestrictions:\n  - name: \"Allow-Office\"\n    ipAddressRange: \"203.0.113.0/24\"\n    action: \"Allow\"\n    description: \"Allow office network\"",
    "severity": "medium",
    "tags": ["azure-container-apps", "security", "ip-restrictions", "access-control"],
    "description": "IP restrictions provide network-level access control"
  },
  {
    "id": "aca-session-affinity",
    "category": "kubernetes",
    "pattern": "affinity:",
    "recommendation": "Enable session affinity for stateful applications",
    "example": "ingress:\n  stickySession:\n    affinity: \"sticky\"",
    "severity": "low",
    "tags": ["azure-container-apps", "session", "affinity", "stateful"],
    "description": "Session affinity ensures requests from the same client go to the same container instance"
  },
  {
    "id": "aca-environment-variables",
    "category": "kubernetes",
    "pattern": "env:",
    "recommendation": "Use environment variables for configuration",
    "example": "env:\n  - name: \"APP_ENV\"\n    value: \"production\"\n  - name: \"LOG_LEVEL\"\n    value: \"info\"\n  - name: \"API_KEY\"\n    secretRef: \"api-key-secret\"",
    "severity": "medium",
    "tags": ["azure-container-apps", "configuration", "environment-variables"],
    "description": "Environment variables provide flexible configuration without rebuilding images"
  },
  {
    "id": "aca-registry-credentials",
    "category": "kubernetes",
    "pattern": "registries:",
    "recommendation": "Configure registry credentials for private images",
    "example": "registries:\n  - server: \"myregistry.azurecr.io\"\n    username: \"myregistry\"\n    passwordSecretRef: \"registry-password\"\n# Or with managed identity:\n  - server: \"myregistry.azurecr.io\"\n    identity: \"system\"",
    "severity": "high",
    "tags": ["azure-container-apps", "registry", "authentication", "acr"],
    "description": "Registry credentials enable pulling images from private container registries"
  },
  {
    "id": "aca-tcp-ingress",
    "category": "kubernetes",
    "pattern": "transport: tcp",
    "recommendation": "Use TCP ingress for non-HTTP protocols",
    "example": "ingress:\n  external: true\n  targetPort: 5432\n  transport: \"tcp\"\n  exposedPort: 5432",
    "severity": "medium",
    "tags": ["azure-container-apps", "tcp", "ingress", "protocols"],
    "description": "TCP ingress enables exposing non-HTTP services like databases"
  },
  {
    "id": "aca-container-resources",
    "category": "kubernetes",
    "pattern": "containers:",
    "recommendation": "Define resource requirements for each container",
    "example": "containers:\n  - name: \"main-app\"\n    image: \"myapp:latest\"\n    resources:\n      cpu: 0.5\n      memory: \"1Gi\"\n    command: [\"/bin/sh\"]\n    args: [\"-c\", \"node server.js\"]",
    "severity": "high",
    "tags": ["azure-container-apps", "containers", "resources"],
    "description": "Proper container configuration ensures optimal performance and resource usage"
  },
  {
    "id": "aca-init-containers",
    "category": "kubernetes",
    "pattern": "initContainers:",
    "recommendation": "Use init containers for setup tasks",
    "example": "initContainers:\n  - name: \"db-migration\"\n    image: \"migrate:latest\"\n    command: [\"/migrate\"]\n    env:\n      - name: \"DB_URL\"\n        secretRef: \"db-connection\"",
    "severity": "low",
    "tags": ["azure-container-apps", "init-containers", "initialization"],
    "description": "Init containers run before main containers to perform setup tasks"
  },
  {
    "id": "aca-scale-rules",
    "category": "kubernetes",
    "pattern": "rules:",
    "recommendation": "Configure appropriate scaling rules",
    "example": "scale:\n  rules:\n    - name: \"cpu-rule\"\n      custom:\n        type: \"cpu\"\n        metadata:\n          type: \"utilization\"\n          value: \"70\"\n    - name: \"queue-rule\"\n      azureQueue:\n        queueName: \"myqueue\"\n        queueLength: 5\n        auth:\n          secretRef: \"queue-connection\"",
    "severity": "medium",
    "tags": ["azure-container-apps", "scaling", "autoscale", "rules"],
    "description": "Scaling rules enable automatic scaling based on various metrics"
  },
  {
    "id": "aca-timeout-settings",
    "category": "kubernetes",
    "pattern": "timeout:",
    "recommendation": "Configure appropriate timeout settings",
    "example": "ingress:\n  transport: \"http\"\n  readTimeoutSeconds: 240\n  # For long-running requests, increase timeout",
    "severity": "low",
    "tags": ["azure-container-apps", "timeout", "performance"],
    "description": "Timeout settings prevent hung connections and improve reliability"
  }
]