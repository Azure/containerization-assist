[
  {
    "id": "python-requirements-cache",
    "category": "dockerfile",
    "pattern": "COPY requirements\\.txt",
    "recommendation": "Copy requirements.txt first and install dependencies for better Docker layer caching",
    "example": "COPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .",
    "severity": "medium",
    "tags": ["python", "pip", "caching", "optimization"],
    "description": "Separate dependency installation improves build performance"
  },
  {
    "id": "python-pip-no-cache",
    "category": "dockerfile",
    "pattern": "pip install",
    "recommendation": "Use --no-cache-dir flag with pip to reduce image size",
    "example": "RUN pip install --no-cache-dir -r requirements.txt",
    "severity": "medium",
    "tags": ["python", "pip", "size", "cleanup"],
    "description": "pip cache can add significant size to container images"
  },
  {
    "id": "python-slim-base",
    "category": "dockerfile",
    "pattern": "FROM python:(?!.*slim|.*alpine)",
    "recommendation": "Use python:slim images for production to reduce size and attack surface",
    "example": "FROM python:3.11-slim",
    "severity": "high",
    "tags": ["python", "slim", "production", "security"],
    "description": "Slim images exclude unnecessary packages while maintaining compatibility"
  },
  {
    "id": "python-compile-bytecode",
    "category": "dockerfile",
    "pattern": "FROM python:",
    "recommendation": "Set PYTHONUNBUFFERED and compile bytecode for better performance",
    "example": "ENV PYTHONUNBUFFERED=1 PYTHONDONTWRITEBYTECODE=1\nRUN python -m compileall .",
    "severity": "low",
    "tags": ["python", "performance", "bytecode"],
    "description": "Environment variables optimize Python runtime in containers"
  },
  {
    "id": "django-collectstatic",
    "category": "dockerfile",
    "pattern": "django",
    "recommendation": "Run Django collectstatic during build for static files serving",
    "example": "RUN python manage.py collectstatic --noinput",
    "severity": "medium",
    "tags": ["django", "static", "build"],
    "description": "Collecting static files during build improves runtime performance"
  },
  {
    "id": "python-wheel-packages",
    "category": "dockerfile",
    "pattern": "pip install.*requirements",
    "recommendation": "Install wheel package for faster pip installations",
    "example": "RUN pip install --no-cache-dir wheel && pip install --no-cache-dir -r requirements.txt",
    "severity": "low",
    "tags": ["python", "pip", "wheel", "performance"],
    "description": "wheel enables faster installation of Python packages"
  },
  {
    "id": "python-multi-stage-build",
    "category": "dockerfile",
    "pattern": "pip install.*build",
    "recommendation": "Use multi-stage builds to separate build dependencies from runtime",
    "example": "FROM python:3.11-slim as build\nRUN pip install build-tools\nFROM python:3.11-slim as runtime\nCOPY --from=build /app .",
    "severity": "medium",
    "tags": ["python", "multistage", "optimization"],
    "description": "Exclude build tools and dev dependencies from final image"
  },
  {
    "id": "python-virtual-env",
    "category": "dockerfile",
    "pattern": "pip install",
    "recommendation": "Consider using virtual environments even in containers for dependency isolation",
    "example": "RUN python -m venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\nRUN pip install -r requirements.txt",
    "severity": "low",
    "tags": ["python", "venv", "isolation"],
    "description": "Virtual environments provide additional dependency isolation"
  },
  {
    "id": "python-health-check",
    "category": "dockerfile",
    "pattern": "EXPOSE (8000|5000)",
    "recommendation": "Add health check for Python web applications",
    "example": "HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:8000/health || exit 1",
    "severity": "medium",
    "tags": ["python", "health", "monitoring"],
    "description": "Health checks enable better container orchestration"
  },
  {
    "id": "python-gunicorn-workers",
    "category": "dockerfile",
    "pattern": "gunicorn",
    "recommendation": "Configure Gunicorn workers based on CPU cores for optimal performance",
    "example": "CMD [\"gunicorn\", \"--workers=4\", \"--bind=0.0.0.0:8000\", \"app:app\"]",
    "severity": "medium",
    "tags": ["python", "gunicorn", "performance"],
    "description": "Worker count should match available CPU cores"
  },
  {
    "id": "flask-production-server",
    "category": "dockerfile",
    "pattern": "flask run",
    "recommendation": "Use production WSGI server like Gunicorn instead of Flask development server",
    "example": "RUN pip install gunicorn\nCMD [\"gunicorn\", \"--bind=0.0.0.0:5000\", \"app:app\"]",
    "severity": "high",
    "tags": ["flask", "production", "gunicorn"],
    "description": "Flask development server is not suitable for production use"
  },
  {
    "id": "python-security-user",
    "category": "security",
    "pattern": "FROM python:",
    "recommendation": "Create and use a non-root user for Python applications",
    "example": "RUN groupadd -r python && useradd -r -g python python\nUSER python",
    "severity": "high",
    "tags": ["python", "security", "user"],
    "description": "Running as non-root reduces security attack surface"
  },
  {
    "id": "python-pip-security",
    "category": "security",
    "pattern": "pip install",
    "recommendation": "Use pip-audit or safety to check for vulnerable dependencies",
    "example": "RUN pip install pip-audit && pip-audit",
    "severity": "medium",
    "tags": ["python", "security", "dependencies"],
    "description": "Regularly audit dependencies for known security vulnerabilities"
  },
  {
    "id": "python-fastapi-docs",
    "category": "dockerfile",
    "pattern": "fastapi",
    "recommendation": "Disable automatic docs in production FastAPI applications",
    "example": "# In app code: app = FastAPI(docs_url=None, redoc_url=None)",
    "severity": "low",
    "tags": ["fastapi", "security", "production"],
    "description": "Automatic docs can expose API structure in production"
  },
  {
    "id": "python-poetry-install",
    "category": "dockerfile",
    "pattern": "poetry install",
    "recommendation": "Use poetry install --no-dev for production builds",
    "example": "COPY pyproject.toml poetry.lock ./\nRUN poetry install --no-dev --no-interaction",
    "severity": "medium",
    "tags": ["python", "poetry", "production"],
    "description": "Exclude development dependencies in production containers"
  },
  {
    "id": "python-pandas-memory",
    "category": "dockerfile",
    "pattern": "pandas|numpy",
    "recommendation": "Consider using pandas with appropriate memory settings for data processing",
    "example": "ENV PANDAS_COPY_ON_WRITE=1",
    "severity": "low",
    "tags": ["python", "pandas", "memory"],
    "description": "Pandas memory optimizations can improve container performance"
  },
  {
    "id": "python-logging-config",
    "category": "dockerfile",
    "pattern": "FROM python:",
    "recommendation": "Configure Python logging to use JSON format for structured logging",
    "example": "ENV PYTHONUNBUFFERED=1\n# Configure JSON logging in application",
    "severity": "medium",
    "tags": ["python", "logging", "structured"],
    "description": "Structured logging improves observability in container environments"
  },
  {
    "id": "python-timezone-handling",
    "category": "dockerfile",
    "pattern": "FROM python:",
    "recommendation": "Set explicit timezone for consistent datetime handling",
    "example": "ENV TZ=UTC\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime",
    "severity": "low",
    "tags": ["python", "timezone", "datetime"],
    "description": "Explicit timezone prevents datetime-related bugs"
  },
  {
    "id": "celery-worker-config",
    "category": "dockerfile",
    "pattern": "celery",
    "recommendation": "Configure Celery workers with appropriate concurrency and memory limits",
    "example": "CMD [\"celery\", \"worker\", \"-A\", \"app\", \"--concurrency=4\", \"--max-memory-per-child=200000\"]",
    "severity": "medium",
    "tags": ["celery", "workers", "performance"],
    "description": "Proper Celery configuration prevents memory leaks and improves performance"
  },
  {
    "id": "python-requirements-pin",
    "category": "security",
    "pattern": "requirements\\.txt",
    "recommendation": "Pin exact versions in requirements.txt for reproducible builds",
    "example": "# Use pip freeze > requirements.txt or pip-tools",
    "severity": "medium",
    "tags": ["python", "dependencies", "reproducible"],
    "description": "Pinned versions ensure consistent builds across environments"
  }
]