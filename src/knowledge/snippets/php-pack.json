[
  {
    "id": "php-composer-cache",
    "category": "dockerfile",
    "pattern": "COPY composer\\.json",
    "recommendation": "Copy composer files first and install dependencies for better caching",
    "example": "COPY composer.json composer.lock ./\nRUN composer install --no-scripts --no-dev --optimize-autoloader\nCOPY . .\nRUN composer dump-autoload --optimize",
    "severity": "medium",
    "tags": ["php", "composer", "caching", "optimization"],
    "description": "Separate dependency installation improves Docker build cache"
  },
  {
    "id": "php-fpm-optimization",
    "category": "dockerfile",
    "pattern": "php-fpm",
    "recommendation": "Configure PHP-FPM for container environments",
    "example": "RUN sed -i 's/;pm.max_children = 5/pm.max_children = 20/' /usr/local/etc/php-fpm.d/www.conf\nEXPOSE 9000\nCMD [\"php-fpm\"]",
    "severity": "medium",
    "tags": ["php", "fpm", "performance", "configuration"],
    "description": "Proper PHP-FPM configuration optimizes request handling"
  },
  {
    "id": "php-opcache-config",
    "category": "dockerfile",
    "pattern": "FROM php:",
    "recommendation": "Enable and configure OPcache for production performance",
    "example": "RUN docker-php-ext-install opcache\nCOPY opcache.ini /usr/local/etc/php/conf.d/\n# opcache.ini: opcache.enable=1, opcache.memory_consumption=128",
    "severity": "high",
    "tags": ["php", "opcache", "performance", "caching"],
    "description": "OPcache significantly improves PHP performance in production"
  },
  {
    "id": "php-alpine-extensions",
    "category": "dockerfile",
    "pattern": "FROM php.*alpine",
    "recommendation": "Install necessary dependencies for PHP extensions in Alpine",
    "example": "RUN apk add --no-cache $PHPIZE_DEPS postgresql-dev libzip-dev \\\n    && docker-php-ext-install pdo_pgsql zip \\\n    && apk del $PHPIZE_DEPS",
    "severity": "high",
    "tags": ["php", "alpine", "extensions", "dependencies"],
    "description": "Alpine requires specific packages for PHP extension compilation"
  },
  {
    "id": "laravel-optimization",
    "category": "dockerfile",
    "pattern": "laravel",
    "recommendation": "Optimize Laravel for production containers",
    "example": "RUN php artisan config:cache \\\n    && php artisan route:cache \\\n    && php artisan view:cache",
    "severity": "medium",
    "tags": ["laravel", "optimization", "caching", "production"],
    "description": "Laravel caching commands improve application performance"
  },
  {
    "id": "symfony-cache-warmup",
    "category": "dockerfile",
    "pattern": "symfony",
    "recommendation": "Warm up Symfony cache during build",
    "example": "ENV APP_ENV=prod\nRUN php bin/console cache:warmup --env=prod",
    "severity": "medium",
    "tags": ["symfony", "cache", "warmup", "production"],
    "description": "Cache warmup prevents first-request performance penalties"
  },
  {
    "id": "php-multi-stage-build",
    "category": "dockerfile",
    "pattern": "composer install",
    "recommendation": "Use multi-stage builds to exclude development dependencies",
    "example": "FROM composer:2 AS build\nCOPY . /app\nRUN composer install --no-dev --optimize-autoloader\n\nFROM php:8.2-fpm-alpine\nCOPY --from=build /app /var/www/html",
    "severity": "high",
    "tags": ["php", "multistage", "composer", "optimization"],
    "description": "Multi-stage builds reduce image size by excluding build tools"
  },
  {
    "id": "php-security-user",
    "category": "security",
    "pattern": "FROM php:",
    "recommendation": "Create and use non-root user for PHP applications",
    "example": "RUN addgroup -g 1000 php && adduser -D -u 1000 -G php php\nUSER php\nWORKDIR /var/www/html",
    "severity": "high",
    "tags": ["php", "security", "user", "non-root"],
    "description": "Running as non-root reduces security attack surface"
  },
  {
    "id": "php-env-security",
    "category": "security",
    "pattern": "\\.env",
    "recommendation": "Never include .env files in images, use environment variables",
    "example": "# Add to .dockerignore: .env\n# Use K8s secrets or Docker secrets for sensitive data",
    "severity": "high",
    "tags": ["php", "security", "environment", "secrets"],
    "description": ".env files often contain sensitive credentials"
  },
  {
    "id": "php-nginx-sidecar",
    "category": "dockerfile",
    "pattern": "php-fpm",
    "recommendation": "Consider nginx as sidecar for serving static files",
    "example": "# In docker-compose or K8s: separate nginx and php-fpm containers\n# Share volume for static assets",
    "severity": "low",
    "tags": ["php", "nginx", "architecture", "static-files"],
    "description": "Nginx handles static files more efficiently than PHP"
  },
  {
    "id": "php-health-check",
    "category": "dockerfile",
    "pattern": "EXPOSE 9000",
    "recommendation": "Add health check for PHP-FPM applications",
    "example": "HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \\\n  CMD php-fpm -t || exit 1",
    "severity": "medium",
    "tags": ["php", "health", "monitoring", "fpm"],
    "description": "Health checks enable better container orchestration"
  },
  {
    "id": "wordpress-optimization",
    "category": "dockerfile",
    "pattern": "wordpress",
    "recommendation": "Optimize WordPress containers with proper configuration",
    "example": "RUN wp config set WP_CACHE true --raw\nRUN chown -R www-data:www-data /var/www/html",
    "severity": "medium",
    "tags": ["wordpress", "optimization", "configuration"],
    "description": "WordPress-specific optimizations improve performance"
  },
  {
    "id": "php-memory-limit",
    "category": "dockerfile",
    "pattern": "memory_limit",
    "recommendation": "Set appropriate PHP memory limits for containers",
    "example": "RUN echo 'memory_limit = 256M' > /usr/local/etc/php/conf.d/memory.ini",
    "severity": "medium",
    "tags": ["php", "memory", "limits", "configuration"],
    "description": "Memory limits prevent container OOM issues"
  },
  {
    "id": "php-session-redis",
    "category": "dockerfile",
    "pattern": "session",
    "recommendation": "Use Redis or Memcached for PHP sessions in containers",
    "example": "RUN pecl install redis && docker-php-ext-enable redis\n# Configure session.save_handler = redis",
    "severity": "medium",
    "tags": ["php", "sessions", "redis", "stateless"],
    "description": "External session storage enables horizontal scaling"
  },
  {
    "id": "php-pecl-cleanup",
    "category": "dockerfile",
    "pattern": "pecl install",
    "recommendation": "Clean up after PECL installations to reduce image size",
    "example": "RUN pecl install xdebug \\\n    && docker-php-ext-enable xdebug \\\n    && rm -rf /tmp/pear",
    "severity": "low",
    "tags": ["php", "pecl", "cleanup", "size"],
    "description": "PECL cleanup reduces image size"
  },
  {
    "id": "php-composer-security",
    "category": "security",
    "pattern": "composer install",
    "recommendation": "Run composer audit to check for vulnerable dependencies",
    "example": "RUN composer audit --no-dev",
    "severity": "high",
    "tags": ["php", "composer", "security", "audit"],
    "description": "Composer audit identifies known vulnerabilities"
  },
  {
    "id": "php-ini-production",
    "category": "dockerfile",
    "pattern": "php\\.ini",
    "recommendation": "Use production php.ini configuration",
    "example": "RUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"",
    "severity": "medium",
    "tags": ["php", "configuration", "production", "security"],
    "description": "Production php.ini has security-focused defaults"
  },
  {
    "id": "drupal-containerization",
    "category": "dockerfile",
    "pattern": "drupal",
    "recommendation": "Configure Drupal for container environments",
    "example": "RUN drush config:set system.performance css.preprocess 1 -y\nRUN drush config:set system.performance js.preprocess 1 -y",
    "severity": "medium",
    "tags": ["drupal", "cms", "configuration", "optimization"],
    "description": "Drupal-specific optimizations for containers"
  }
]