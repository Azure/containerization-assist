id: repository-analysis-comprehensive
version: '1.0.0'
description: Comprehensive repository analysis for containerization
category: analysis
parameters:
  - name: files
    type: array
    required: true
    description: List of file paths in the repository
  - name: fileContents
    type: object
    required: true
    description: Contents of key configuration files
  - name: depth
    type: number
    required: false
    description: Analysis depth level
  - name: securityFocus
    type: boolean
    required: false
    description: Whether to focus on security aspects
  - name: performanceFocus
    type: boolean
    required: false
    description: Whether to focus on performance aspects
template: |
  Analyze the repository structure and provide comprehensive containerization recommendations.

  Repository Files ({{files.length}} total):
  {{files}}

  Configuration Files:

  {{.}}


  Analysis Parameters:
  - Depth: {{depth}}
  - Security Focus: Yes
  - Performance Focus: Yes


  Relevant Patterns:
  {{knowledge}}



  Analysis Policies:
  {{policy}}


  Analyze the repository and provide a JSON response with this EXACT structure:
  ```json
  {
    "language": "string (e.g., javascript, python, java, go, dotnet, rust)",
    "languageVersion": "string (optional, e.g., 3.9, 11, 1.20)",
    "framework": "string (optional, e.g., express, django, spring, aspnet-core)",
    "frameworkVersion": "string (optional)",
    "buildSystem": {
      "type": "string (npm, maven, gradle, cargo, dotnet, pip, go)",
      "file": "string (package.json, pom.xml, etc)",
      "buildCommand": "string",
      "testCommand": "string (optional)"
    },
    "dependencies": [
      {
        "name": "string",
        "version": "string (optional)",
        "type": "string (runtime, dev, test)"
      }
    ],
    "ports": [number],
    "hasDockerfile": boolean,
    "hasDockerCompose": boolean,
    "hasKubernetes": boolean,
    "recommendations": {
      "baseImage": "string (e.g., node:18-alpine, python:3.9-slim)",
      "buildStrategy": "multi-stage or single-stage",
      "securityNotes": ["string"]
    },
    "confidence": number (0-100),
    "detectionMethod": "signature or extension or ai-enhanced",
    "insights": {
      "summary": ["2-3 key insights about the project"],
      "containerizationNotes": ["specific containerization recommendations"],
      "riskAssessment": ["potential challenges or risks"],
      "deploymentSuggestions": ["deployment pattern recommendations"]
    }
  }
  ```

  Detection Logic:
  1. **Language Detection**:
     - Check for package.json → JavaScript/TypeScript
     - Check for requirements.txt, setup.py, pyproject.toml → Python
     - Check for pom.xml, build.gradle → Java
     - Check for go.mod → Go
     - Check for Cargo.toml → Rust
     - Check for *.csproj, *.sln → .NET
     - Check for Gemfile → Ruby
     - Check for composer.json → PHP

  2. **Framework Detection**:
     - For JavaScript: Check dependencies for express, nestjs, next, react, vue, angular
     - For Python: Check for django, flask, fastapi in dependencies
     - For Java: Check for spring dependencies in pom.xml/build.gradle
     - For .NET: Check for AspNetCore, Blazor, gRPC packages
     - For Ruby: Check for rails in Gemfile

  3. **Build System**:
     - Detect based on lock files (package-lock.json → npm, yarn.lock → yarn, etc.)
     - Provide appropriate build and test commands

  4. **Port Detection**:
     - Look for port configurations in package.json scripts
     - Check for PORT environment variables
     - Look for common framework defaults (3000, 8000, 8080, 5000)

  5. **Dependencies**:
     - Extract top 10-15 most important dependencies
     - Classify as runtime, dev, or test

  6. **Confidence Scoring**:
     - High (80-100): Multiple signature files found
     - Medium (50-79): Some signature files or many matching extensions
     - Low (0-49): Only file extensions match

  7. **Recommendations**:
     - Select appropriate base image for the detected stack
     - Recommend multi-stage builds for compiled languages
     - Include security notes based on dependencies


  Security Analysis:
  - Check for known vulnerable dependencies
  - Recommend security scanning in CI/CD
  - Suggest non-root user configurations
  - Identify sensitive file patterns



  Performance Analysis:
  - Recommend layer caching strategies
  - Suggest optimal base image sizes
  - Identify build optimization opportunities
  - Recommend multi-stage build patterns


  Provide accurate detection based on the files and contents provided. Be specific and actionable in recommendations.
format: text
