{
  "id": "dockerfile-direct-analysis",
  "category": "containerization",
  "description": "Generate Dockerfile by directly analyzing repository files when automated detection fails",
  "version": "1.0",
  "parameters": [
    {
      "name": "repoPath",
      "type": "string",
      "required": true,
      "description": "Path to repository for analysis"
    },
    {
      "name": "detectedLanguage",
      "type": "string",
      "required": false,
      "description": "Language detected by automated analysis (if any)"
    },
    {
      "name": "moduleRoot",
      "type": "string",
      "required": false,
      "description": "Module root path for multi-module projects"
    },
    {
      "name": "optimization",
      "type": "string",
      "required": false,
      "description": "Optimization focus (performance, security, size, balanced)"
    }
  ],
  "template": "You are generating a Dockerfile for a repository at: {{repoPath}}\n{{#moduleRoot}}Module path: {{moduleRoot}}{{/moduleRoot}}\n\n**CONTEXT:**\n{{#detectedLanguage}}Language: {{detectedLanguage}}{{/detectedLanguage}}\n{{#framework}}Framework: {{framework}}{{/framework}}\n{{#frameworkVersion}}Framework Version: {{frameworkVersion}}{{/frameworkVersion}}\n{{#projectFiles}}Project files: {{projectFiles}}{{/projectFiles}}\n\n**IMPORTANT INSTRUCTIONS:**\n\nGenerate a production-ready Dockerfile based on the repository structure. The repository contains a project that needs to be containerized.\n\n**For .NET Projects:**\n{{#frameworkVersion}}\n- IMPORTANT: Framework version {{frameworkVersion}} detected!\n- If version starts with 4 (like 4.8, 4.7, 4.5), this is .NET Framework - MUST use Windows containers:\n  - Build: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2022\n  - Runtime: mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2022\n- If version is 6.0, 7.0, 8.0 or higher, this is .NET Core/.NET - use Linux containers:\n  - Build: mcr.microsoft.com/dotnet/sdk:{{frameworkVersion}}\n  - Runtime: mcr.microsoft.com/dotnet/aspnet:{{frameworkVersion}}-alpine\n{{/frameworkVersion}}\n{{^frameworkVersion}}\n- Check the .csproj file for TargetFramework or TargetFrameworkVersion\n- .NET Framework (v4.x) requires Windows containers\n- .NET Core/5+ can use Linux containers\n{{/frameworkVersion}}\n\n**For Other Languages:**\n- Node.js: Use node:18-alpine or version from .nvmrc/package.json engines\n- Python: Use python:3.11-slim or version from .python-version\n- Java: Use appropriate JDK version with Maven/Gradle for building\n- Go: Use golang:1.21-alpine for building, alpine for runtime\n\n**Best Practices to Follow:**\n1. Use multi-stage builds to minimize final image size\n2. Copy dependency files first, then install dependencies (for layer caching)\n3. Copy source code after dependencies are installed\n4. Add security hardening (non-root user) where appropriate\n5. Set proper WORKDIR, EXPOSE, and CMD/ENTRYPOINT\n6. Use specific version tags, not :latest\n{{#optimization}}\n7. Optimize for: {{optimization}}{{/optimization}}\n\n**CRITICAL: Analyze the actual project structure and requirements. Generate a Dockerfile that will successfully build and run the application.**\n\n**Output Format:**\nReturn ONLY the raw Dockerfile content. Start directly with FROM and end with the last Dockerfile instruction. Do not include any explanatory text, markdown formatting, or comments about the analysis."
}