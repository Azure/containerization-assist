{
  "id": "dockerfile-generation",
  "category": "containerization",
  "description": "Generate an optimized Dockerfile for the given application",
  "version": "1.0",
  "parameters": [
    {
      "name": "language",
      "type": "string",
      "required": true,
      "description": "Programming language of the application"
    },
    {
      "name": "framework",
      "type": "string",
      "required": false,
      "description": "Framework used by the application"
    },
    {
      "name": "securityLevel",
      "type": "string",
      "required": false,
      "description": "Security level (basic, enhanced, strict)"
    },
    {
      "name": "baseImage",
      "type": "string",
      "required": false,
      "description": "Preferred base image"
    },
    {
      "name": "dependencies",
      "type": "string",
      "required": false,
      "description": "Detected dependencies (dynamic)"
    },
    {
      "name": "optimization",
      "type": "string",
      "required": false,
      "description": "Optimization focus (performance, security, size, balanced)"
    },
    {
      "name": "buildSystem",
      "type": "string",
      "required": false,
      "description": "Build system (maven, gradle, npm, etc.)"
    },
    {
      "name": "buildCommand",
      "type": "string",
      "required": false,
      "description": "Build command if available"
    },
    {
      "name": "packageManager",
      "type": "string",
      "required": false,
      "description": "Package manager being used"
    },
    {
      "name": "buildFile",
      "type": "string",
      "required": false,
      "description": "Main build file (pom.xml, build.gradle, etc.)"
    },
    {
      "name": "hasWrapper",
      "type": "boolean",
      "required": false,
      "description": "Whether wrapper scripts (mvnw, gradlew) are available"
    },
    {
      "name": "bestPractices",
      "type": "array",
      "required": false,
      "description": "Knowledge-base best practices recommendations"
    },
    {
      "name": "examples",
      "type": "array",
      "required": false,
      "description": "Relevant code examples from knowledge base"
    },
    {
      "name": "securityRecommendations",
      "type": "array",
      "required": false,
      "description": "Security-specific recommendations from knowledge base"
    },
    {
      "name": "knowledgeSuggestions",
      "type": "array",
      "required": false,
      "description": "Detailed suggestions with reasons from knowledge base"
    }
  ],
  "template": "Generate an optimized Dockerfile for {{language}} application.\n{{#framework}}Framework: {{framework}}{{/framework}}\n{{#buildSystem}}Build system: {{buildSystem}}{{/buildSystem}}\n{{#packageManager}}Package manager: {{packageManager}}{{/packageManager}}\n{{#buildFile}}Build file: {{buildFile}}{{/buildFile}}\n{{#buildCommand}}Recommended build command: {{buildCommand}}{{/buildCommand}}\n{{#hasWrapper}}{{#.}}Wrapper scripts available: Yes{{/.}}{{^.}}Wrapper scripts available: No{{/.}}{{/hasWrapper}}\n{{#securityLevel}}Security level: {{securityLevel}}{{/securityLevel}}\n{{#baseImage}}Base image: {{baseImage}}{{/baseImage}}\n\n{{#bestPractices}}Best Practices (from knowledge base):\n{{#.}}- {{.}}\n{{/.}}{{/bestPractices}}\n\n{{#examples}}Relevant Examples:\n{{#.}}- {{.}}\n{{/.}}{{/examples}}\n\n{{#securityRecommendations}}Security Recommendations:\n{{#.}}- {{.}}\n{{/.}}{{/securityRecommendations}}\n\n{{#knowledgeSuggestions}}Knowledge-Based Suggestions:\n{{#.}}- {{recommendation}} ({{reason}})\n{{/.}}{{/knowledgeSuggestions}}\n\nRequirements:\n- Follow containerization best practices\n{{#optimization}}- Optimize for {{optimization}}{{/optimization}}\n{{#bestPractices}}{{#.}}- {{.}}\n{{/.}}{{/bestPractices}}\n- Use multi-stage builds when appropriate to reduce final image size\n- For compiled languages, use a builder stage and copy only the built artifacts to the final stage\n- Ensure all build commands complete successfully\n- Copy all necessary source files before running build commands\n- Use appropriate base images for both build and runtime stages\n- Include security considerations (non-root user, minimal base images)\n{{#securityRecommendations}}{{#.}}- {{.}}\n{{/.}}{{/securityRecommendations}}\n- Handle dependency installation efficiently (cache layers when possible)\n- Minimize final image size\n- Set proper WORKDIR, EXPOSE ports, and ENTRYPOINT/CMD\n\nBuild system specific requirements:\n{{#buildCommand}}- Use the recommended build command: {{buildCommand}}{{/buildCommand}}\n{{#buildFile}}- Copy build configuration file ({{buildFile}}) before copying source code{{/buildFile}}\n- For Maven projects: Use maven image, copy pom.xml first, run dependency resolution, then copy src and build\n- For Gradle projects: Use gradle image, copy build.gradle/settings.gradle first, then copy src and build\n- For NPM projects: Copy package*.json first, run npm install, then copy source and build if needed\n- For Go projects: Copy go.mod/go.sum first, run go mod download, then copy source and build\n{{^hasWrapper}}- If wrapper scripts are not available, use system package manager commands (mvn, gradle, npm, etc.){{/hasWrapper}}\n{{#hasWrapper}}- Copy wrapper scripts and directories (.mvn/, .gradle/) if they exist{{/hasWrapper}}\n- Always ensure the build artifact path matches what's copied in the final stage\n\nCRITICAL: Return ONLY the raw Dockerfile content. Do not include:\n- Explanatory text before or after the Dockerfile\n- Markdown code blocks or formatting\n- Comments about best practices\n- Installation instructions\n- Any text that is not part of the Dockerfile itself\n\nStart your response directly with the FROM instruction and end with the last Dockerfile instruction. No additional text.\n"
}
