metadata:
  name: dockerfile-generation
  category: containerization
  description: Generate an optimized Dockerfile for the given application
  version: "1.0"
  parameters:
    - name: language
      type: string
      required: true
      description: Programming language of the application
    - name: framework
      type: string
      required: false
      description: Framework used by the application
    - name: securityLevel
      type: string
      required: false
      description: Security level (basic, enhanced, strict)
    - name: baseImage
      type: string
      required: false
      description: Preferred base image
    - name: dependencies
      type: string
      required: false
      description: Detected dependencies (dynamic)
    - name: optimization
      type: string
      required: false
      description: Optimization focus (performance, security, size, balanced)
    - name: buildSystem
      type: string
      required: false
      description: Build system (maven, gradle, npm, etc.)
    - name: buildCommand
      type: string
      required: false
      description: Build command if available
    - name: packageManager
      type: string
      required: false
      description: Package manager being used
    - name: buildFile
      type: string
      required: false
      description: Main build file (pom.xml, build.gradle, etc.)
    - name: hasWrapper
      type: boolean
      required: false
      description: Whether wrapper scripts (mvnw, gradlew) are available

template: |
  Generate an optimized Dockerfile for {{language}} application.
  {{#framework}}Framework: {{framework}}{{/framework}}
  {{#buildSystem}}Build system: {{buildSystem}}{{/buildSystem}}
  {{#packageManager}}Package manager: {{packageManager}}{{/packageManager}}
  {{#buildFile}}Build file: {{buildFile}}{{/buildFile}}
  {{#buildCommand}}Recommended build command: {{buildCommand}}{{/buildCommand}}
  {{#hasWrapper}}{{#.}}Wrapper scripts available: Yes{{/.}}{{^.}}Wrapper scripts available: No{{/.}}{{/hasWrapper}}
  {{#securityLevel}}Security level: {{securityLevel}}{{/securityLevel}}
  {{#baseImage}}Base image: {{baseImage}}{{/baseImage}}

  Requirements:
  - Follow containerization best practices
  {{#optimization}}- Optimize for {{optimization}}{{/optimization}}
  - Use multi-stage builds when appropriate to reduce final image size
  - For compiled languages, use a builder stage and copy only the built artifacts to the final stage
  - Ensure all build commands complete successfully
  - Copy all necessary source files before running build commands
  - Use appropriate base images for both build and runtime stages
  - Include security considerations (non-root user, minimal base images)
  - Handle dependency installation efficiently (cache layers when possible)
  - Minimize final image size
  - Set proper WORKDIR, EXPOSE ports, and ENTRYPOINT/CMD

  Build system specific requirements:
  {{#buildCommand}}- Use the recommended build command: {{buildCommand}}{{/buildCommand}}
  {{#buildFile}}- Copy build configuration file ({{buildFile}}) before copying source code{{/buildFile}}
  - For Maven projects: Use maven image, copy pom.xml first, run dependency resolution, then copy src and build
  - For Gradle projects: Use gradle image, copy build.gradle/settings.gradle first, then copy src and build
  - For NPM projects: Copy package*.json first, run npm install, then copy source and build if needed
  - For Go projects: Copy go.mod/go.sum first, run go mod download, then copy source and build
  {{^hasWrapper}}- If wrapper scripts are not available, use system package manager commands (mvn, gradle, npm, etc.){{/hasWrapper}}
  {{#hasWrapper}}- Copy wrapper scripts and directories (.mvn/, .gradle/) if they exist{{/hasWrapper}}
  - Always ensure the build artifact path matches what's copied in the final stage

  CRITICAL: Return ONLY the raw Dockerfile content. Do not include:
  - Explanatory text before or after the Dockerfile
  - Markdown code blocks or formatting
  - Comments about best practices
  - Installation instructions
  - Any text that is not part of the Dockerfile itself

  Start your response directly with the FROM instruction and end with the last Dockerfile instruction. No additional text.
