id: generate-aca-manifests
version: '1.0.0'
description: Generate Azure Container Apps manifests for containerized applications
category: orchestration
parameters:
  - name: appName
    type: string
    required: true
    description: Application name for the Container App
  - name: imageId
    type: string
    required: true
    description: Container image to deploy
  - name: resourceGroup
    type: string
    required: false
    description: Azure resource group name
  - name: environmentName
    type: string
    required: false
    description: Container Apps environment name
  - name: location
    type: string
    required: false
    description: Azure region (e.g., eastus, westeurope)
  - name: cpu
    type: number
    required: false
    description: CPU cores (0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0)
  - name: memory
    type: string
    required: false
    description: Memory allocation (0.5Gi, 1Gi, 1.5Gi, 2Gi, 2.5Gi, 3Gi, 3.5Gi, 4Gi)
  - name: minReplicas
    type: number
    required: false
    description: Minimum instances (0 for serverless)
  - name: maxReplicas
    type: number
    required: false
    description: Maximum instances
  - name: targetPort
    type: number
    required: false
    description: Container port to expose
  - name: external
    type: boolean
    required: false
    description: Enable external ingress
  - name: environment
    type: string
    required: false
    description: Target environment (development, staging, production)
  - name: envVars
    type: array
    required: false
    description: Environment variables configuration
  - name: secrets
    type: array
    required: false
    description: Secret configuration
  - name: daprEnabled
    type: boolean
    required: false
    description: Enable Dapr integration
  - name: healthProbes
    type: object
    required: false
    description: Health probe configuration
  - name: bestPractices
    type: array
    required: false
    description: Knowledge-base best practices recommendations
  - name: examples
    type: array
    required: false
    description: Relevant code examples from knowledge base
  - name: securityRecommendations
    type: array
    required: false
    description: Security-specific recommendations from knowledge base
  - name: knowledgeSuggestions
    type: array
    required: false
    description: Detailed suggestions with reasons from knowledge base
template: >
  Generate production-ready Azure Container Apps deployment manifest.


  Application Details:

  - Name: {{appName}}

  - Image: {{imageId}}


  - Resource Group: {{resourceGroup}}



  - Environment: {{environmentName}}



  - Location: {{location}}




  Resource Configuration:

  - CPU: {{cpu}} vCPU



  - Memory: {{memory}}



  - Min Replicas: {{minReplicas}}



  - Max Replicas: {{maxReplicas}}




  Ingress Configuration:

  - Target Port: {{targetPort}}



  - External Access: {{external}}




  Target Environment: {{environment}}




  Dapr Integration: Enabled



  Best Practices (from knowledge base):

  {{#.}}- {{.}}

  {{/.}}


  Relevant Examples:

  {{#.}}- {{.}}

  {{/.}}


  Security Recommendations:

  {{#.}}- {{.}}

  {{/.}}


  Knowledge-Based Suggestions:

  {{#.}}- {{recommendation}} ({{reason}})

  {{/.}}


  Generate a complete Azure Container Apps manifest with the following requirements:


  1. **Container App Configuration:**
     - Use appropriate CPU/memory combinations (0.25/0.5Gi, 0.5/1Gi, 0.75/1.5Gi, 1/2Gi, 1.25/2.5Gi, 1.5/3Gi, 1.75/3.5Gi, 2/4Gi)
     - Configure managed identity for secure Azure resource access
     - Set up proper container configuration with command and args if needed
     - Include resource limits appropriate for the environment

  2. **Scaling Configuration:**
     - Enable scale-to-zero for cost optimization (minReplicas: 0 for non-production)
     - Configure appropriate scaling rules (HTTP, CPU, memory, or custom)
     - Set reasonable max replicas based on expected load
     - Include KEDA scalers if advanced scaling is needed

  3. **Ingress and Networking:**
     - Configure ingress for HTTP/HTTPS or TCP traffic
     - Set up custom domains if production environment
     - Enable CORS if web application
     - Configure session affinity if stateful application
     - Set appropriate timeouts for long-running requests

  4. **Health and Monitoring:**
     - Configure liveness probe for container health
     - Set up readiness probe for traffic routing
     - Include startup probe for slow-starting applications
     - Set appropriate probe intervals and thresholds

  5. **Security Configuration:**
     - Use secrets for sensitive configuration
     - Configure registry credentials for private images
     - Enable managed identity instead of credentials where possible
     - Set up IP restrictions if needed
     - Use least-privilege principles

  6. **Additional Features (if applicable):**
     - Dapr configuration for microservices (app-id, app-port, protocol)
     - Volume mounts for persistent storage (Azure Files or EmptyDir)
     - Init containers for setup tasks
     - Multiple container support for sidecar patterns
     - Blue-green deployment with traffic splitting

  Best Practices:

  {{#.}}- {{.}}

  {{/.}}

  - Set minReplicas to 0 for serverless cost optimization

  - Use managed identity for Azure resource access

  - Configure health probes for production reliability

  - Use specific image tags (avoid :latest in production)

  - Set resource limits to prevent resource exhaustion

  - Use secrets for sensitive configuration

  - Enable Dapr for distributed application capabilities

  {{#.}}- {{.}}

  {{/.}}

  - Configure appropriate ingress settings for your security requirements


  Return the complete Azure Container Apps manifest in JSON format without explanation or code fences. The manifest
  should follow the Azure Container Apps API schema and be ready for deployment using Azure CLI or ARM templates.
format: json
