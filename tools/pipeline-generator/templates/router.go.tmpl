package commands

import (
	"context"
	"github.com/Azure/container-kit/pkg/mcp/application/api"
	"github.com/Azure/container-kit/pkg/mcp/domain/errors"
)

// {{.Name}}Router implements {{.Name}} command routing
type {{.Name}}Router struct {
	router api.CommandRouter
}

// New{{.Name}}Router creates a new {{.Name}} router
func New{{.Name}}Router() *{{.Name}}Router {
	router := NewRouter()

	// Register commands
	{{range .Commands}}
	router.Register("{{.Name}}", &{{.Handler}}{})
	{{end}}

	return &{{.Name}}Router{
		router: router,
	}
}

// Route routes a command
func (r *{{.Name}}Router) Route(ctx context.Context, command string, args interface{}) (interface{}, error) {
	return r.router.Route(ctx, command, args)
}

// ListCommands returns available commands
func (r *{{.Name}}Router) ListCommands() []string {
	return r.router.ListCommands()
}

{{range .Commands}}
// {{.Handler}} handles {{.Name}} command
type {{.Handler}} struct{}

// Execute executes the {{.Name}} command
func (h *{{.Handler}}) Execute(ctx context.Context, args interface{}) (interface{}, error) {
	// Add command implementation here
	return nil, nil
}
{{end}}