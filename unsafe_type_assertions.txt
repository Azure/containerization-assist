pkg/mcp/validation/chains/composite.go:	).(*CompositeValidator)
pkg/mcp/validation/validators/context.go:	contextData, ok := data.(*ContextData)
pkg/mcp/validation/validators/context.go:	files, ok := data.([]string)
pkg/mcp/validation/validators/context.go:	operations, ok := data.([]map[string]interface{})
pkg/mcp/validation/validators/context.go:		instruction := op["instruction"].(string)
pkg/mcp/validation/validators/context.go:		source := op["source"].(string)
pkg/mcp/validation/validators/context.go:		dest := op["destination"].(string)
pkg/mcp/validation/validators/health.go:	healthRatio, _ := metrics["health_ratio"].(float64)
pkg/mcp/validation/validators/health.go:	totalRestarts, _ := metrics["total_restarts"].(int)
pkg/mcp/validation/validators/network.go:	ipStr, ok := data.(string)
pkg/mcp/validation/validators/network.go:	hostname, ok := data.(string)
pkg/mcp/validation/validators/network.go:	cidrStr, ok := data.(string)
pkg/mcp/validation/validators/network.go:	macStr, ok := data.(string)
pkg/mcp/validation/validators/network.go:	str, ok := data.(string)
pkg/mcp/validation/validators/docker.go:	content, ok := data.(string)
pkg/mcp/validation/validators/docker.go:	imageName, ok := data.(string)
pkg/mcp/validation/validators/format.go:	emailStr, ok := data.(string)
pkg/mcp/validation/validators/format.go:	urlStr, ok := data.(string)
pkg/mcp/validation/validators/format.go:	str, ok := data.(string)
pkg/mcp/validation/validators/image.go:	imageRef, ok := data.(string)
pkg/mcp/validation/validators/image.go:	images, ok := data.([]string)
pkg/mcp/internal/orchestration/tool_registry.go:	coreTool, ok := tool.(core.Tool)
pkg/mcp/internal/core/gomcp_handlers.go:	result, ok := resultInterface.(*deploy.AtomicCheckHealthResult)
pkg/mcp/internal/orchestration/checkpoint_manager.go:	lastCompleted := lastState["completed_stages"].([]interface{})
pkg/mcp/internal/orchestration/checkpoint_manager.go:		lastCompletedStrs[i] = v.(string)
pkg/mcp/internal/core/schema_regression_test.go:	resultMap, ok := resp.Result.(map[string]interface{})
pkg/mcp/internal/core/schema_regression_test.go:	toolsArray, ok := toolsInterface.([]interface{})
pkg/mcp/internal/core/schema_regression_test.go:		propertiesMap, ok := properties.(map[string]interface{})
pkg/mcp/internal/core/schema_regression_test.go:		properties, ok := tool.InputSchema["properties"].(map[string]interface{})
pkg/mcp/internal/core/schema_regression_test.go:				sessionIDType, ok := sessionIDMap["type"].(string)
pkg/mcp/internal/core/schema_regression_test.go:				_, isMap := properties.(map[string]interface{})
pkg/mcp/internal/core/conversation_test.go:		session, ok := sessionInterface.(*session.SessionState)
pkg/mcp/internal/core/conversation_test.go:		session, ok := sessionInterface.(*session.SessionState)
pkg/mcp/internal/core/server_lifecycle_test.go:	session1, ok := session1Interface.(*session.SessionState)
pkg/mcp/internal/core/server_lifecycle_test.go:	session2, ok := session2Interface.(*session.SessionState)
pkg/mcp/internal/core/mcp_server_test.go:		sessionState, ok := sessionInterface.(*session.SessionState)
pkg/mcp/internal/core/mcp_server_test.go:		retrieved, ok := retrievedInterface.(*session.SessionState)
pkg/mcp/internal/core/mcp_server_test.go:		sessionState, ok := sessionInterface.(*session.SessionState)
pkg/mcp/internal/core/mcp_server_test.go:		retrieved, ok := retrievedInterface.(*session.SessionState)
pkg/mcp/internal/orchestration/no_reflect_orchestrator.go:	argsMap, ok := args.(map[string]interface{})
pkg/mcp/internal/orchestration/no_reflect_orchestrator.go:	argsMap, ok := args.(map[string]interface{})
pkg/mcp/internal/core/error_handling_test.go:				str, ok := input.(string)
pkg/mcp/internal/core/error_handling_test.go:				num, ok := input.(int)
pkg/mcp/internal/core/error_handling_test.go:				num, ok := input.(int)
pkg/mcp/internal/core/error_handling_test.go:				num, ok := input.(int)
pkg/mcp/internal/core/tool_integration_test.go:				args.DryRun = dryRun.(bool)
pkg/mcp/internal/core/tool_integration_test.go:				args.BaseImage = baseImage.(string)
pkg/mcp/internal/core/tool_integration_test.go:				args.Template = template.(string)
pkg/mcp/internal/core/tool_integration_test.go:				args.Optimization = optimization.(string)
pkg/mcp/internal/core/tool_integration_test.go:				args.IncludeHealthCheck = includeHealthCheck.(bool)
pkg/mcp/internal/core/tool_integration_test.go:				args.BuildArgs = buildArgs.(map[string]string)
pkg/mcp/internal/core/tool_integration_test.go:				args.Platform = platform.(string)
pkg/mcp/internal/orchestration/types_test.go:	inputMap, ok := example.Input.(map[string]interface{})
pkg/mcp/internal/orchestration/types_test.go:	outputMap, ok := example.Output.(map[string]interface{})
pkg/mcp/internal/core/server_shutdown_test.go:	session, ok := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/types/tools/constraints.go:	str, ok := value.(string)
pkg/mcp/types/tools/schema.go:	properties := schema["properties"].(map[string]interface{})
pkg/mcp/types/tools/schema.go:	schemaMap, ok := schema.(map[string]interface{})
pkg/mcp/types/tools/schema.go:	schemaMap, ok := schema.(map[string]interface{})
pkg/mcp/types/tools/schema.go:	expectedType, ok := schemaMap["type"].(string)
pkg/mcp/internal/scan/scan_image_security_atomic.go:	scanArgs, ok := args.(AtomicScanImageSecurityArgs)
pkg/mcp/internal/scan/scan_image_security_atomic.go:	scanArgs, ok := args.(AtomicScanImageSecurityArgs)
pkg/mcp/internal/scan/validators_unified.go:	typedArgs, ok := args.(AtomicScanSecretsArgs)
pkg/mcp/internal/scan/validators_unified.go:	scanArgs, ok := args.(AtomicScanImageSecurityArgs)
pkg/mcp/internal/scan/scan_secrets_tool.go:	typedArgs, ok := args.(AtomicScanSecretsArgs)
pkg/mcp/internal/scan/scan_secrets_tool.go:	typedArgs, ok := args.(AtomicScanSecretsArgs)
pkg/mcp/internal/customizer/k8s_networkpolicy.go:	spec := np["spec"].(map[string]interface{})
pkg/mcp/internal/customizer/k8s_networkpolicy.go:		podSelector := spec["podSelector"].(map[string]interface{})
pkg/mcp/internal/customizer/k8s_networkpolicy.go:	metadata := np["metadata"].(map[string]interface{})
pkg/mcp/internal/customizer/k8s_networkpolicy.go:	metadataLabels := metadata["labels"].(map[string]interface{})
pkg/mcp/internal/customizer/k8s_networkpolicy.go:	metadata := np["metadata"].(map[string]interface{})
pkg/mcp/internal/customizer/k8s_networkpolicy.go:	metadataAnnotations := metadata["annotations"].(map[string]interface{})
pkg/mcp/internal/customizer/k8s_service.go:	specMap, ok := spec.(map[string]interface{})
pkg/mcp/internal/runtime/registry_test.go:	properties, ok := inputSchema["properties"].(map[string]interface{})
pkg/mcp/internal/runtime/registry_test.go:	messageField, ok := properties["message"].(map[string]interface{})
pkg/mcp/internal/runtime/registry_test.go:	countField, ok := properties["count"].(map[string]interface{})
pkg/mcp/internal/runtime/registry_test.go:	itemsField, ok := properties["items"].(map[string]interface{})
pkg/mcp/internal/runtime/registry_test.go:	outputProps, ok := outputSchema["properties"].(map[string]interface{})
pkg/mcp/internal/runtime/registry_test.go:	successField, ok := outputProps["success"].(map[string]interface{})
pkg/mcp/internal/runtime/registry_test.go:			testArgs := args.(TestArgs)
pkg/mcp/internal/runtime/registry_test.go:	resultTyped, ok := result.(TestResult)
pkg/mcp/internal/deploy/deploy_kubernetes_validate.go:	deployArgs, ok := args.(AtomicDeployKubernetesArgs)
pkg/mcp/internal/deploy/validator.go:	metadata, ok := doc["metadata"].(map[string]interface{})
pkg/mcp/internal/deploy/validator.go:	spec, ok := doc["spec"].(map[string]interface{})
pkg/mcp/internal/deploy/validator.go:	template, ok := spec["template"].(map[string]interface{})
pkg/mcp/internal/deploy/validator.go:		containers, ok := templateSpec["containers"].([]interface{})
pkg/mcp/internal/deploy/validator.go:	cont, ok := container.(map[string]interface{})
pkg/mcp/internal/deploy/validator.go:	spec, ok := doc["spec"].(map[string]interface{})
pkg/mcp/internal/deploy/validator.go:	ports, ok := spec["ports"].([]interface{})
pkg/mcp/internal/deploy/validator.go:	p, ok := port.(map[string]interface{})
pkg/mcp/internal/deploy/validator.go:	secretType, ok := doc["type"].(string)
pkg/mcp/internal/deploy/validator.go:	spec, ok := doc["spec"].(map[string]interface{})
pkg/mcp/internal/deploy/validator.go:	rules, ok := spec["rules"].([]interface{})
pkg/mcp/internal/deploy/validator.go:	spec, ok := doc["spec"].(map[string]interface{})
pkg/mcp/internal/session/manage_session_labels.go:	session, ok := sessionInterface.(*SessionState)
pkg/mcp/internal/session/manage_session_labels.go:	addArgs, ok := args.(AddSessionLabelArgs)
pkg/mcp/internal/session/manage_session_labels.go:	removeArgs, ok := args.(RemoveSessionLabelArgs)
pkg/mcp/internal/session/manage_session_labels.go:	updateArgs, ok := args.(UpdateSessionLabelsArgs)
pkg/mcp/internal/session/manage_session_labels.go:	listArgs, ok := args.(ListSessionLabelsArgs)
pkg/mcp/internal/session/manage_session_labels.go:	addArgs, ok := args.(AddSessionLabelArgs)
pkg/mcp/internal/session/manage_session_labels.go:	removeArgs, ok := args.(RemoveSessionLabelArgs)
pkg/mcp/internal/session/manage_session_labels.go:	updateArgs, ok := args.(UpdateSessionLabelsArgs)
pkg/mcp/internal/session/manage_session_labels.go:	_, ok := args.(ListSessionLabelsArgs)
pkg/mcp/internal/customizer/k8s_helpers.go:			keyStr, ok := path[i].(string)
pkg/mcp/internal/customizer/k8s_helpers.go:			keyInt, ok := path[i].(int)
pkg/mcp/internal/customizer/k8s_helpers.go:		keyStr, ok := finalKey.(string)
pkg/mcp/internal/customizer/k8s_helpers.go:		keyInt, ok := finalKey.(int)
pkg/mcp/internal/customizer/k8s_helpers.go:	metadataMap, ok := metadata.(map[string]interface{})
pkg/mcp/internal/customizer/k8s_helpers.go:	labelsMap, ok := existingLabels.(map[string]interface{})
pkg/mcp/internal/customizer/k8s_ingress.go:	metadataMap, ok := metadata.(map[string]interface{})
pkg/mcp/internal/customizer/k8s_ingress.go:	annotationsMap, ok := existingAnnotations.(map[string]interface{})
pkg/mcp/internal/runtime/conversation/conversation_forms_test.go:	optimization, ok := response.Values["optimization"].(string)
pkg/mcp/internal/session/analytics_test.go:	sessionState := sessionInterface.(*SessionState)
pkg/mcp/internal/session/analytics_test.go:		sessionState := sessionInterface.(*SessionState)
pkg/mcp/internal/session/analytics_test.go:		sessionState := sessionInterface.(*SessionState)
pkg/mcp/internal/session/analytics_test.go:	sessionState := sessionInterface.(*SessionState)
pkg/mcp/internal/session/analytics_test.go:	sessionState := sessionInterface.(*SessionState)
pkg/mcp/internal/session/analytics.go:		state := sessionData.State.(*SessionState)
pkg/mcp/internal/session/list_sessions.go:	listArgs, ok := args.(ListSessionsArgs)
pkg/mcp/internal/session/list_sessions.go:	sm, ok := t.sessionManager.(*SessionManager)
pkg/mcp/internal/session/list_sessions.go:	listArgs, ok := args.(ListSessionsArgs)
pkg/mcp/internal/runtime/conversation/deploy_stage.go:	k8sManifests := sessionState.Metadata["k8s_manifests"].(map[string]interface{})
pkg/mcp/internal/runtime/conversation/deploy_stage.go:				contentStr, ok := content.(string)
pkg/mcp/internal/runtime/errors_test.go:	toolResult, ok := result.(*ToolError)
pkg/mcp/internal/runtime/conversation/common_stage.go:	_, ok := state.Context["build_dry_run_complete"].(bool)
pkg/mcp/internal/runtime/conversation/prompt_manager_core.go:	internalSession, ok := sessionInterface.(*session.SessionState)
pkg/mcp/internal/session/delete_session.go:	deleteArgs, ok := args.(DeleteSessionArgs)
pkg/mcp/internal/session/delete_session.go:	deleteArgs, ok := args.(DeleteSessionArgs)
pkg/mcp/internal/runtime/conversation/conversation_handler.go:					failureAnalysis, _ = fa.(map[string]interface{})
pkg/mcp/internal/runtime/conversation/conversation_handler.go:	internalSession, ok := sessionInterface.(*session.SessionState)
pkg/mcp/internal/runtime/conversation/conversation_handler.go:						failureAnalysisData, _ = fa.(map[string]interface{})
pkg/mcp/internal/runtime/conversation/conversation_handler.go:	internalSession, ok := sessionInterface.(*session.SessionState)
pkg/mcp/internal/deploy/deploy_kubernetes_atomic.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/deploy/deploy_kubernetes_atomic.go:	deployArgs, ok := args.(AtomicDeployKubernetesArgs)
pkg/mcp/internal/server/unified_server_test.go:	properties := schema["properties"].(map[string]interface{})
pkg/mcp/internal/server/unified_server_test.go:	required := schema["required"].([]string)
pkg/mcp/internal/runtime/conversation/conversation_handler_test.go:		retrieved, ok := retrievedInterface.(*session.SessionState)
pkg/mcp/internal/server/unified_server.go:	message, ok := args["message"].(string)
pkg/mcp/internal/server/unified_server.go:	sessionID, _ := args["session_id"].(string)
pkg/mcp/internal/server/unified_server.go:		variables, _ := args["variables"].(map[string]string)
pkg/mcp/internal/server/unified_server.go:	sessionID, ok := args["session_id"].(string)
pkg/mcp/internal/server/unified_server.go:			properties := schema["properties"].(map[string]interface{})
pkg/mcp/internal/deploy/generate_manifests_helpers.go:	spec, ok := deployment["spec"].(map[string]interface{})
pkg/mcp/internal/deploy/generate_manifests_helpers.go:	template, ok := spec["template"].(map[string]interface{})
pkg/mcp/internal/deploy/generate_manifests_helpers.go:	templateSpec, ok := template["spec"].(map[string]interface{})
pkg/mcp/internal/runtime/conversation/build_stage.go:	resultMap, _ := result.(map[string]interface{})
pkg/mcp/internal/runtime/conversation/build_stage.go:		details, _ = resultField.(map[string]interface{})
pkg/mcp/internal/runtime/conversation/build_stage.go:	resultMap, _ := result.(map[string]interface{})
pkg/mcp/internal/runtime/conversation/build_stage.go:		details, _ = resultField.(map[string]interface{})
pkg/mcp/internal/runtime/conversation/build_stage.go:	registry, ok := state.Context["preferred_registry"].(string)
pkg/mcp/internal/runtime/conversation/build_stage.go:				dryResultMap, _ = resultField.(map[string]interface{})
pkg/mcp/internal/runtime/conversation/build_stage.go:	resultMap, _ := result.(map[string]interface{})
pkg/mcp/internal/deploy/health_checker.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/state/providers.go:	sessionState, ok := state.(*session.SessionState)
pkg/mcp/internal/state/providers.go:	conversationState, ok := state.(*BasicConversationState)
pkg/mcp/internal/state/providers.go:	workflowSession, ok := state.(WorkflowSessionInterface)
pkg/mcp/internal/deploy/health_tool.go:	typedArgs, ok := args.(AtomicCheckHealthArgs)
pkg/mcp/internal/deploy/health_tool.go:	typedArgs, ok := args.(AtomicCheckHealthArgs)
pkg/mcp/internal/transport/llm_e2e_test.go:			params, ok := req.Params.(map[string]interface{})
pkg/mcp/internal/transport/llm_e2e_test.go:			toolName, _ := params["name"].(string)
pkg/mcp/internal/transport/llm_e2e_test.go:			args, _ := params["arguments"].(map[string]interface{})
pkg/mcp/internal/transport/llm_e2e_test.go:				message, _ := args["message"].(string)
pkg/mcp/internal/transport/llm_e2e_test.go:		result := resp["result"].(map[string]interface{})
pkg/mcp/internal/transport/llm_e2e_test.go:		errObj := resp["error"].(map[string]interface{})
pkg/mcp/internal/deploy/deploy_kubernetes_validate_unified.go:	deployArgs, ok := args.(AtomicDeployKubernetesArgs)
pkg/mcp/internal/transport/http.go:	toolHandler, ok := handler.(ToolHandler)
pkg/mcp/internal/pipeline/operations.go:		sess, ok := s.(*sessionsvc.SessionState)
pkg/mcp/internal/pipeline/operations.go:		imageRef, _ := argsMap["image_ref"].(string)
pkg/mcp/internal/pipeline/operations.go:		appName, _ := argsMap["app_name"].(string)
pkg/mcp/internal/pipeline/operations.go:		port, _ := argsMap["port"].(int)
pkg/mcp/internal/pipeline/operations.go:		cpuRequest, _ := argsMap["cpu_request"].(string)
pkg/mcp/internal/pipeline/operations.go:		memoryRequest, _ := argsMap["memory_request"].(string)
pkg/mcp/internal/pipeline/operations.go:		cpuLimit, _ := argsMap["cpu_limit"].(string)
pkg/mcp/internal/pipeline/operations.go:		memoryLimit, _ := argsMap["memory_limit"].(string)
pkg/mcp/internal/pipeline/operations.go:		namespace, _ := argsMap["namespace"].(string)
pkg/mcp/internal/pipeline/operations.go:		labelSelector, _ := argsMap["label_selector"].(string)
pkg/mcp/internal/transport/stdio_mapping_test.go:				result, ok := msg["result"].(map[string]interface{})
pkg/mcp/internal/transport/stdio_mapping_test.go:				error, ok := msg["error"].(map[string]interface{})
pkg/mcp/internal/transport/stdio_mapping_test.go:		buildArgs, ok := decoded["build_args"].(map[string]interface{})
pkg/mcp/internal/transport/stdio_mapping_test.go:			errorObj, ok := decoded["error"].(map[string]interface{})
pkg/mcp/internal/pipeline/security_hardening.go:	imageRef, ok := args["image_ref"].(string)
pkg/mcp/internal/pipeline/security_hardening.go:	imageRef, ok := args["image_ref"].(string)
pkg/mcp/internal/pipeline/security_hardening.go:	sourceRef, sourceOk := args["source_ref"].(string)
pkg/mcp/internal/pipeline/security_hardening.go:	targetRef, targetOk := args["target_ref"].(string)
pkg/mcp/internal/state/mappings.go:	sessionState, ok := source.(*session.SessionState)
pkg/mcp/internal/state/mappings.go:	conversationState, ok := target.(*BasicConversationState)
pkg/mcp/internal/state/mappings.go:	workflowSession, ok := source.(WorkflowSessionInterface)
pkg/mcp/internal/state/mappings.go:	sourceMap, ok := source.(map[string]interface{})
pkg/mcp/internal/state/mappings.go:	targetMap, ok := target.(map[string]interface{})
pkg/mcp/internal/conversation/chat_tool.go:	chatArgs, ok := args.(ChatToolArgs)
pkg/mcp/internal/conversation/chat_tool.go:	chatArgs, ok := args.(ChatToolArgs)
pkg/mcp/internal/state/validators.go:	sessionState, ok := state.(*session.SessionState)
pkg/mcp/internal/state/validators.go:	conversationState, ok := state.(*BasicConversationState)
pkg/mcp/internal/state/validators.go:	workflowSession, ok := state.(WorkflowSessionInterface)
pkg/mcp/internal/pipeline/distributed_operations.go:		imageRef, _ := subOp.Args["image_ref"].(string)
pkg/mcp/internal/pipeline/distributed_operations.go:		imageRef, _ := subOp.Args["image_ref"].(string)
pkg/mcp/internal/pipeline/distributed_operations.go:		sourceRef, _ := subOp.Args["source_ref"].(string)
pkg/mcp/internal/pipeline/distributed_operations.go:		targetRef, _ := subOp.Args["target_ref"].(string)
pkg/mcp/internal/pipeline/performance_optimizations.go:		imageRef, _ := args["image_ref"].(string)
pkg/mcp/internal/pipeline/performance_optimizations.go:		imageRef, _ := args["image_ref"].(string)
pkg/mcp/internal/pipeline/performance_optimizations.go:		sourceRef, _ := args["source_ref"].(string)
pkg/mcp/internal/pipeline/performance_optimizations.go:		targetRef, _ := args["target_ref"].(string)
pkg/mcp/internal/tools/dry_run_comprehensive_test.go:			mockArgs := args.(*MockToolArgs)
pkg/mcp/internal/tools/dry_run_comprehensive_test.go:			mockArgs := args.(*MockToolArgs)
pkg/mcp/internal/tools/dry_run_comprehensive_test.go:	mockArgs, ok := args.(*MockToolArgs)
pkg/mcp/internal/tools/dry_run_comprehensive_test.go:	mockArgs, ok := args.(*MockToolArgs)
pkg/mcp/internal/tools/dry_run_comprehensive_test.go:			dryRunResult, ok := dryRunResp.(*MockToolResponse)
pkg/mcp/internal/tools/dry_run_comprehensive_test.go:			actualResult, ok := actualResp.(*MockToolResponse)
pkg/mcp/internal/tools/dry_run_comprehensive_test.go:	result, ok := resp.(*MockToolResponse)
pkg/mcp/internal/observability/manifest_validator.go:	kind, _ := manifest["kind"].(string)
pkg/mcp/internal/observability/manifest_validator.go:	spec, ok := manifest["spec"].(map[string]interface{})
pkg/mcp/internal/observability/manifest_validator.go:	template, ok := spec["template"].(map[string]interface{})
pkg/mcp/internal/observability/manifest_validator.go:	templateSpec, ok := template["spec"].(map[string]interface{})
pkg/mcp/internal/observability/manifest_validator.go:	containers, ok := templateSpec["containers"].([]interface{})
pkg/mcp/internal/observability/manifest_validator.go:	spec, ok := manifest["spec"].(map[string]interface{})
pkg/mcp/internal/observability/manifest_validator.go:	ports, ok := spec["ports"].([]interface{})
pkg/mcp/internal/observability/manifest_validator.go:	spec, ok := manifest["spec"].(map[string]interface{})
pkg/mcp/internal/observability/manifest_validator.go:	metadata, ok := manifest["metadata"].(map[string]interface{})
pkg/mcp/internal/observability/manifest_validator.go:	labels, ok := metadata["labels"].(map[string]interface{})
pkg/mcp/internal/observability/manifest_validator.go:		next, ok := current[part].(map[string]interface{})
pkg/mcp/internal/retry/fix_providers.go:	dockerfilePath, ok := strategy.Parameters["dockerfile_path"].(string)
pkg/mcp/internal/retry/fix_providers.go:	dockerfilePath, ok := context["dockerfile_path"].(string)
pkg/mcp/internal/retry/fix_providers.go:	suggestedImages := strategy.Parameters["suggested_images"].([]string)
pkg/mcp/internal/retry/fix_providers.go:	alternativePorts := strategy.Parameters["alternative_ports"].([]int)
pkg/mcp/internal/retry/fix_providers.go:	configPath, ok := strategy.Parameters["config_path"].(string)
pkg/mcp/internal/retry/fix_providers.go:	configType, _ := strategy.Parameters["config_type"].(string)
pkg/mcp/internal/retry/fix_providers.go:	configPath, ok := strategy.Parameters["config_path"].(string)
pkg/mcp/internal/retry/fix_providers.go:	command, ok := strategy.Parameters["command"].(string)
pkg/mcp/internal/retry/fix_providers.go:	suggestions, _ := strategy.Parameters["package_suggestions"].([]string)
pkg/mcp/internal/retry/coordinator.go:	result := rc.attemptPool.Get().(*AttemptResult)
pkg/mcp/internal/build/pull_image_atomic.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/build/pull_image_atomic.go:	pullArgs, ok := args.(AtomicPullImageArgs)
pkg/mcp/internal/build/pull_image_atomic.go:	pullArgs, ok := args.(AtomicPullImageArgs)
pkg/mcp/internal/build/build_image_atomic.go:	buildArgs, ok := args.(AtomicBuildImageArgs)
pkg/mcp/internal/build/build_image_atomic.go:	buildArgs, ok := args.(AtomicBuildImageArgs)
pkg/mcp/internal/build/tag_image_atomic.go:	tagArgs, ok := args.(AtomicTagImageArgs)
pkg/mcp/internal/build/tag_image_atomic.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/build/tag_image_atomic.go:	tagArgs, ok := args.(AtomicTagImageArgs)
pkg/mcp/internal/build/tag_image_atomic.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/build/tag_image_atomic.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/build/build_executor.go:	session, ok := sessionInterface.(*session.SessionState)
pkg/mcp/internal/build/build_executor.go:	session, ok := sessionInterface.(*session.SessionState)
pkg/mcp/internal/build/push_image_atomic.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/build/push_image_atomic.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/build/integration_test.go:	retrievedMap := retrieved.(map[string]interface{})
pkg/mcp/internal/analyze/validate_dockerfile_atomic.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/analyze/validate_dockerfile_atomic.go:	validateArgs, ok := args.(AtomicValidateDockerfileArgs)
pkg/mcp/internal/analyze/validate_dockerfile_atomic.go:	validateArgs, ok := args.(AtomicValidateDockerfileArgs)
pkg/mcp/internal/analyze/analyze_repository_atomic.go:			oldSessionID, _ := resumedFrom["old_session_id"].(string)
pkg/mcp/internal/analyze/analyze_repository_atomic.go:			lastRepoURL, _ := resumedFrom["last_repo_url"].(string)
pkg/mcp/internal/analyze/analyze_repository_atomic.go:			scanSummary := scanSummaryData.(map[string]interface{})
pkg/mcp/internal/analyze/analyze_repository_atomic.go:			sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/analyze/analyze_repository_atomic.go:				newSessionState := newSessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/analyze/analyze_repository_atomic.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/analyze/analyze_repository_atomic.go:	sessionState := sessionInterface.(*sessiontypes.SessionState)
pkg/mcp/internal/analyze/analyzer_simple_test.go:	typedAnalyzer, ok := analyzer.(mcptypes.AIAnalyzer)
pkg/mcp/internal/analyze/analyzer_simple_test.go:	typedAnalyzer, ok := analyzer.(mcptypes.AIAnalyzer)
pkg/mcp/internal/analyze/analyze_repository.go:	argsMap, ok := args.(map[string]interface{})
pkg/mcp/internal/analyze/analyze_repository.go:	repoPath, ok := argsMap["repo_path"].(string)
pkg/mcp/internal/analyze/analyze_repository.go:	result, ok := resultInterface.(*AtomicAnalysisResult)
pkg/mcp/internal/analyze/analyze_repository.go:	argsMap, ok := args.(map[string]interface{})
pkg/mcp/internal/analyze/analyzer_test.go:	callerAnalyzer, ok := analyzer.(*CallerAnalyzer)
pkg/mcp/internal/analyze/generate_dockerfile.go:	repoAnalysis, ok := session["repository_analysis"].(map[string]interface{})
pkg/mcp/internal/analyze/generate_dockerfile.go:	repoAnalysis, _ := session["repository_analysis"].(map[string]interface{})
pkg/mcp/internal/analyze/generate_dockerfile.go:	workDir, _ := session["work_dir"].(string)
pkg/mcp/internal/analyze/generate_dockerfile.go:	repoAnalysis, _ := session["repository_analysis"].(map[string]interface{})
pkg/mcp/internal/analyze/generate_dockerfile.go:	typedArgs, ok := args.(GenerateDockerfileArgs)
pkg/mcp/internal/analyze/generate_dockerfile.go:	typedArgs, ok := args.(GenerateDockerfileArgs)
pkg/mcp/internal/utils/mcperror_test.go:	data, ok := err.Data.(map[string]interface{})
